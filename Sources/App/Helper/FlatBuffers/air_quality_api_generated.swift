// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum com_openmeteo_AirQualityModel: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case bestMatch = 0
  case camsGlobal = 1
  case camsEurope = 2

  public static var max: com_openmeteo_AirQualityModel { return .camsEurope }
  public static var min: com_openmeteo_AirQualityModel { return .bestMatch }
}


public struct com_openmeteo_AirQualityHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case pm10 = 6
    case pm25 = 8
    case dust = 10
    case aerosolOpticalDepth = 12
    case carbonMonoxide = 14
    case nitrogenDioxide = 16
    case ammonia = 18
    case ozone = 20
    case sulphurDioxide = 22
    case uvIndex = 24
    case uvIndexClearSky = 26
    case alderPollen = 28
    case birchPollen = 30
    case grassPollen = 32
    case mugwortPollen = 34
    case olivePollen = 36
    case ragweedPollen = 38
    case europeanAqi = 40
    case europeanAqiPm25 = 42
    case europeanAqiPm10 = 44
    case europeanAqiNo2 = 46
    case europeanAqiO3 = 48
    case europeanAqiSo2 = 50
    case usAqi = 52
    case usAqiPm25 = 54
    case usAqiPm10 = 56
    case usAqiNo2 = 58
    case usAqiO3 = 60
    case usAqiSo2 = 62
    case usAqiCo = 64
    case isDay = 66
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var pm10: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pm10.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pm25: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pm25.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dust: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dust.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var aerosolOpticalDepth: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.aerosolOpticalDepth.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var carbonMonoxide: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.carbonMonoxide.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var nitrogenDioxide: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.nitrogenDioxide.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var ammonia: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.ammonia.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var ozone: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.ozone.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sulphurDioxide: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.sulphurDioxide.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndex: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSky: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var alderPollen: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.alderPollen.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var birchPollen: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.birchPollen.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var grassPollen: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.grassPollen.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var mugwortPollen: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.mugwortPollen.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var olivePollen: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.olivePollen.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var ragweedPollen: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.ragweedPollen.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqi: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqi.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiPm25: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiPm25.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiPm10: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiPm10.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiNo2: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiNo2.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiO3: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiO3.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiSo2: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiSo2.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqi: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqi.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiPm25: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiPm25.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiPm10: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiPm10.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiNo2: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiNo2.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiO3: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiO3.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiSo2: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiSo2.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiCo: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiCo.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var isDay: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startAirQualityHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 32) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(pm10: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pm10, at: VTOFFSET.pm10.p) }
  public static func add(pm25: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pm25, at: VTOFFSET.pm25.p) }
  public static func add(dust: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dust, at: VTOFFSET.dust.p) }
  public static func add(aerosolOpticalDepth: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aerosolOpticalDepth, at: VTOFFSET.aerosolOpticalDepth.p) }
  public static func add(carbonMonoxide: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: carbonMonoxide, at: VTOFFSET.carbonMonoxide.p) }
  public static func add(nitrogenDioxide: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nitrogenDioxide, at: VTOFFSET.nitrogenDioxide.p) }
  public static func add(ammonia: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ammonia, at: VTOFFSET.ammonia.p) }
  public static func add(ozone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ozone, at: VTOFFSET.ozone.p) }
  public static func add(sulphurDioxide: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sulphurDioxide, at: VTOFFSET.sulphurDioxide.p) }
  public static func add(uvIndex: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndex, at: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSky, at: VTOFFSET.uvIndexClearSky.p) }
  public static func add(alderPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alderPollen, at: VTOFFSET.alderPollen.p) }
  public static func add(birchPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: birchPollen, at: VTOFFSET.birchPollen.p) }
  public static func add(grassPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: grassPollen, at: VTOFFSET.grassPollen.p) }
  public static func add(mugwortPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mugwortPollen, at: VTOFFSET.mugwortPollen.p) }
  public static func add(olivePollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: olivePollen, at: VTOFFSET.olivePollen.p) }
  public static func add(ragweedPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ragweedPollen, at: VTOFFSET.ragweedPollen.p) }
  public static func add(europeanAqi: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqi, at: VTOFFSET.europeanAqi.p) }
  public static func add(europeanAqiPm25: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiPm25, at: VTOFFSET.europeanAqiPm25.p) }
  public static func add(europeanAqiPm10: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiPm10, at: VTOFFSET.europeanAqiPm10.p) }
  public static func add(europeanAqiNo2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiNo2, at: VTOFFSET.europeanAqiNo2.p) }
  public static func add(europeanAqiO3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiO3, at: VTOFFSET.europeanAqiO3.p) }
  public static func add(europeanAqiSo2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiSo2, at: VTOFFSET.europeanAqiSo2.p) }
  public static func add(usAqi: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqi, at: VTOFFSET.usAqi.p) }
  public static func add(usAqiPm25: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiPm25, at: VTOFFSET.usAqiPm25.p) }
  public static func add(usAqiPm10: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiPm10, at: VTOFFSET.usAqiPm10.p) }
  public static func add(usAqiNo2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiNo2, at: VTOFFSET.usAqiNo2.p) }
  public static func add(usAqiO3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiO3, at: VTOFFSET.usAqiO3.p) }
  public static func add(usAqiSo2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiSo2, at: VTOFFSET.usAqiSo2.p) }
  public static func add(usAqiCo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiCo, at: VTOFFSET.usAqiCo.p) }
  public static func add(isDay: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: isDay, at: VTOFFSET.isDay.p) }
  public static func endAirQualityHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createAirQualityHourly(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    pm10Offset pm10: Offset = Offset(),
    pm25Offset pm25: Offset = Offset(),
    dustOffset dust: Offset = Offset(),
    aerosolOpticalDepthOffset aerosolOpticalDepth: Offset = Offset(),
    carbonMonoxideOffset carbonMonoxide: Offset = Offset(),
    nitrogenDioxideOffset nitrogenDioxide: Offset = Offset(),
    ammoniaOffset ammonia: Offset = Offset(),
    ozoneOffset ozone: Offset = Offset(),
    sulphurDioxideOffset sulphurDioxide: Offset = Offset(),
    uvIndexOffset uvIndex: Offset = Offset(),
    uvIndexClearSkyOffset uvIndexClearSky: Offset = Offset(),
    alderPollenOffset alderPollen: Offset = Offset(),
    birchPollenOffset birchPollen: Offset = Offset(),
    grassPollenOffset grassPollen: Offset = Offset(),
    mugwortPollenOffset mugwortPollen: Offset = Offset(),
    olivePollenOffset olivePollen: Offset = Offset(),
    ragweedPollenOffset ragweedPollen: Offset = Offset(),
    europeanAqiOffset europeanAqi: Offset = Offset(),
    europeanAqiPm25Offset europeanAqiPm25: Offset = Offset(),
    europeanAqiPm10Offset europeanAqiPm10: Offset = Offset(),
    europeanAqiNo2Offset europeanAqiNo2: Offset = Offset(),
    europeanAqiO3Offset europeanAqiO3: Offset = Offset(),
    europeanAqiSo2Offset europeanAqiSo2: Offset = Offset(),
    usAqiOffset usAqi: Offset = Offset(),
    usAqiPm25Offset usAqiPm25: Offset = Offset(),
    usAqiPm10Offset usAqiPm10: Offset = Offset(),
    usAqiNo2Offset usAqiNo2: Offset = Offset(),
    usAqiO3Offset usAqiO3: Offset = Offset(),
    usAqiSo2Offset usAqiSo2: Offset = Offset(),
    usAqiCoOffset usAqiCo: Offset = Offset(),
    isDayOffset isDay: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_AirQualityHourly.startAirQualityHourly(&fbb)
    com_openmeteo_AirQualityHourly.add(time: time, &fbb)
    com_openmeteo_AirQualityHourly.add(pm10: pm10, &fbb)
    com_openmeteo_AirQualityHourly.add(pm25: pm25, &fbb)
    com_openmeteo_AirQualityHourly.add(dust: dust, &fbb)
    com_openmeteo_AirQualityHourly.add(aerosolOpticalDepth: aerosolOpticalDepth, &fbb)
    com_openmeteo_AirQualityHourly.add(carbonMonoxide: carbonMonoxide, &fbb)
    com_openmeteo_AirQualityHourly.add(nitrogenDioxide: nitrogenDioxide, &fbb)
    com_openmeteo_AirQualityHourly.add(ammonia: ammonia, &fbb)
    com_openmeteo_AirQualityHourly.add(ozone: ozone, &fbb)
    com_openmeteo_AirQualityHourly.add(sulphurDioxide: sulphurDioxide, &fbb)
    com_openmeteo_AirQualityHourly.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_AirQualityHourly.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_AirQualityHourly.add(alderPollen: alderPollen, &fbb)
    com_openmeteo_AirQualityHourly.add(birchPollen: birchPollen, &fbb)
    com_openmeteo_AirQualityHourly.add(grassPollen: grassPollen, &fbb)
    com_openmeteo_AirQualityHourly.add(mugwortPollen: mugwortPollen, &fbb)
    com_openmeteo_AirQualityHourly.add(olivePollen: olivePollen, &fbb)
    com_openmeteo_AirQualityHourly.add(ragweedPollen: ragweedPollen, &fbb)
    com_openmeteo_AirQualityHourly.add(europeanAqi: europeanAqi, &fbb)
    com_openmeteo_AirQualityHourly.add(europeanAqiPm25: europeanAqiPm25, &fbb)
    com_openmeteo_AirQualityHourly.add(europeanAqiPm10: europeanAqiPm10, &fbb)
    com_openmeteo_AirQualityHourly.add(europeanAqiNo2: europeanAqiNo2, &fbb)
    com_openmeteo_AirQualityHourly.add(europeanAqiO3: europeanAqiO3, &fbb)
    com_openmeteo_AirQualityHourly.add(europeanAqiSo2: europeanAqiSo2, &fbb)
    com_openmeteo_AirQualityHourly.add(usAqi: usAqi, &fbb)
    com_openmeteo_AirQualityHourly.add(usAqiPm25: usAqiPm25, &fbb)
    com_openmeteo_AirQualityHourly.add(usAqiPm10: usAqiPm10, &fbb)
    com_openmeteo_AirQualityHourly.add(usAqiNo2: usAqiNo2, &fbb)
    com_openmeteo_AirQualityHourly.add(usAqiO3: usAqiO3, &fbb)
    com_openmeteo_AirQualityHourly.add(usAqiSo2: usAqiSo2, &fbb)
    com_openmeteo_AirQualityHourly.add(usAqiCo: usAqiCo, &fbb)
    com_openmeteo_AirQualityHourly.add(isDay: isDay, &fbb)
    return com_openmeteo_AirQualityHourly.endAirQualityHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.pm10.p, fieldName: "pm10", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pm25.p, fieldName: "pm25", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dust.p, fieldName: "dust", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.aerosolOpticalDepth.p, fieldName: "aerosolOpticalDepth", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.carbonMonoxide.p, fieldName: "carbonMonoxide", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.nitrogenDioxide.p, fieldName: "nitrogenDioxide", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.ammonia.p, fieldName: "ammonia", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.ozone.p, fieldName: "ozone", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sulphurDioxide.p, fieldName: "sulphurDioxide", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.alderPollen.p, fieldName: "alderPollen", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.birchPollen.p, fieldName: "birchPollen", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.grassPollen.p, fieldName: "grassPollen", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.mugwortPollen.p, fieldName: "mugwortPollen", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.olivePollen.p, fieldName: "olivePollen", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.ragweedPollen.p, fieldName: "ragweedPollen", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqi.p, fieldName: "europeanAqi", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiPm25.p, fieldName: "europeanAqiPm25", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiPm10.p, fieldName: "europeanAqiPm10", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiNo2.p, fieldName: "europeanAqiNo2", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiO3.p, fieldName: "europeanAqiO3", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiSo2.p, fieldName: "europeanAqiSo2", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqi.p, fieldName: "usAqi", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiPm25.p, fieldName: "usAqiPm25", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiPm10.p, fieldName: "usAqiPm10", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiNo2.p, fieldName: "usAqiNo2", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiO3.p, fieldName: "usAqiO3", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiSo2.p, fieldName: "usAqiSo2", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiCo.p, fieldName: "usAqiCo", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_AirQualityCurrent: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case interval = 6
    case pm10 = 8
    case pm25 = 10
    case dust = 12
    case aerosolOpticalDepth = 14
    case carbonMonoxide = 16
    case nitrogenDioxide = 18
    case ammonia = 20
    case ozone = 22
    case sulphurDioxide = 24
    case uvIndex = 26
    case uvIndexClearSky = 28
    case alderPollen = 30
    case birchPollen = 32
    case grassPollen = 34
    case mugwortPollen = 36
    case olivePollen = 38
    case ragweedPollen = 40
    case europeanAqi = 42
    case europeanAqiPm25 = 44
    case europeanAqiPm10 = 46
    case europeanAqiNo2 = 48
    case europeanAqiO3 = 50
    case europeanAqiSo2 = 52
    case usAqi = 54
    case usAqiPm25 = 56
    case usAqiPm10 = 58
    case usAqiNo2 = 60
    case usAqiO3 = 62
    case usAqiSo2 = 64
    case usAqiCo = 66
    case isDay = 68
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: Int64 { let o = _accessor.offset(VTOFFSET.time.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var interval: Int32 { let o = _accessor.offset(VTOFFSET.interval.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var pm10: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.pm10.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutablePm10: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.pm10.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var pm25: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.pm25.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutablePm25: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.pm25.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var dust: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.dust.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableDust: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.dust.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var aerosolOpticalDepth: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.aerosolOpticalDepth.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableAerosolOpticalDepth: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.aerosolOpticalDepth.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var carbonMonoxide: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.carbonMonoxide.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableCarbonMonoxide: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.carbonMonoxide.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var nitrogenDioxide: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.nitrogenDioxide.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableNitrogenDioxide: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.nitrogenDioxide.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var ammonia: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.ammonia.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableAmmonia: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.ammonia.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var ozone: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.ozone.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableOzone: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.ozone.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var sulphurDioxide: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.sulphurDioxide.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSulphurDioxide: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.sulphurDioxide.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var uvIndex: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUvIndex: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var uvIndexClearSky: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUvIndexClearSky: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var alderPollen: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.alderPollen.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableAlderPollen: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.alderPollen.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var birchPollen: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.birchPollen.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableBirchPollen: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.birchPollen.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var grassPollen: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.grassPollen.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableGrassPollen: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.grassPollen.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var mugwortPollen: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.mugwortPollen.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableMugwortPollen: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.mugwortPollen.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var olivePollen: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.olivePollen.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableOlivePollen: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.olivePollen.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var ragweedPollen: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.ragweedPollen.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableRagweedPollen: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.ragweedPollen.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var europeanAqi: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqi.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableEuropeanAqi: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.europeanAqi.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var europeanAqiPm25: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiPm25.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableEuropeanAqiPm25: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.europeanAqiPm25.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var europeanAqiPm10: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiPm10.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableEuropeanAqiPm10: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.europeanAqiPm10.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var europeanAqiNo2: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiNo2.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableEuropeanAqiNo2: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.europeanAqiNo2.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var europeanAqiO3: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiO3.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableEuropeanAqiO3: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.europeanAqiO3.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var europeanAqiSo2: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiSo2.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableEuropeanAqiSo2: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.europeanAqiSo2.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var usAqi: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.usAqi.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUsAqi: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.usAqi.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var usAqiPm25: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiPm25.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUsAqiPm25: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.usAqiPm25.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var usAqiPm10: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiPm10.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUsAqiPm10: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.usAqiPm10.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var usAqiNo2: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiNo2.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUsAqiNo2: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.usAqiNo2.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var usAqiO3: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiO3.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUsAqiO3: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.usAqiO3.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var usAqiSo2: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiSo2.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUsAqiSo2: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.usAqiSo2.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var usAqiCo: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiCo.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUsAqiCo: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.usAqiCo.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var isDay: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableIsDay: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public static func startAirQualityCurrent(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 33) }
  public static func add(time: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: time, def: 0, at: VTOFFSET.time.p) }
  public static func add(interval: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: interval, def: 0, at: VTOFFSET.interval.p) }
  public static func add(pm10: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let pm10 = pm10 else { return }; fbb.create(struct: pm10, position: VTOFFSET.pm10.p) }
  public static func add(pm25: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let pm25 = pm25 else { return }; fbb.create(struct: pm25, position: VTOFFSET.pm25.p) }
  public static func add(dust: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let dust = dust else { return }; fbb.create(struct: dust, position: VTOFFSET.dust.p) }
  public static func add(aerosolOpticalDepth: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let aerosolOpticalDepth = aerosolOpticalDepth else { return }; fbb.create(struct: aerosolOpticalDepth, position: VTOFFSET.aerosolOpticalDepth.p) }
  public static func add(carbonMonoxide: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let carbonMonoxide = carbonMonoxide else { return }; fbb.create(struct: carbonMonoxide, position: VTOFFSET.carbonMonoxide.p) }
  public static func add(nitrogenDioxide: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let nitrogenDioxide = nitrogenDioxide else { return }; fbb.create(struct: nitrogenDioxide, position: VTOFFSET.nitrogenDioxide.p) }
  public static func add(ammonia: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let ammonia = ammonia else { return }; fbb.create(struct: ammonia, position: VTOFFSET.ammonia.p) }
  public static func add(ozone: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let ozone = ozone else { return }; fbb.create(struct: ozone, position: VTOFFSET.ozone.p) }
  public static func add(sulphurDioxide: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let sulphurDioxide = sulphurDioxide else { return }; fbb.create(struct: sulphurDioxide, position: VTOFFSET.sulphurDioxide.p) }
  public static func add(uvIndex: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let uvIndex = uvIndex else { return }; fbb.create(struct: uvIndex, position: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let uvIndexClearSky = uvIndexClearSky else { return }; fbb.create(struct: uvIndexClearSky, position: VTOFFSET.uvIndexClearSky.p) }
  public static func add(alderPollen: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let alderPollen = alderPollen else { return }; fbb.create(struct: alderPollen, position: VTOFFSET.alderPollen.p) }
  public static func add(birchPollen: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let birchPollen = birchPollen else { return }; fbb.create(struct: birchPollen, position: VTOFFSET.birchPollen.p) }
  public static func add(grassPollen: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let grassPollen = grassPollen else { return }; fbb.create(struct: grassPollen, position: VTOFFSET.grassPollen.p) }
  public static func add(mugwortPollen: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let mugwortPollen = mugwortPollen else { return }; fbb.create(struct: mugwortPollen, position: VTOFFSET.mugwortPollen.p) }
  public static func add(olivePollen: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let olivePollen = olivePollen else { return }; fbb.create(struct: olivePollen, position: VTOFFSET.olivePollen.p) }
  public static func add(ragweedPollen: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let ragweedPollen = ragweedPollen else { return }; fbb.create(struct: ragweedPollen, position: VTOFFSET.ragweedPollen.p) }
  public static func add(europeanAqi: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let europeanAqi = europeanAqi else { return }; fbb.create(struct: europeanAqi, position: VTOFFSET.europeanAqi.p) }
  public static func add(europeanAqiPm25: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let europeanAqiPm25 = europeanAqiPm25 else { return }; fbb.create(struct: europeanAqiPm25, position: VTOFFSET.europeanAqiPm25.p) }
  public static func add(europeanAqiPm10: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let europeanAqiPm10 = europeanAqiPm10 else { return }; fbb.create(struct: europeanAqiPm10, position: VTOFFSET.europeanAqiPm10.p) }
  public static func add(europeanAqiNo2: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let europeanAqiNo2 = europeanAqiNo2 else { return }; fbb.create(struct: europeanAqiNo2, position: VTOFFSET.europeanAqiNo2.p) }
  public static func add(europeanAqiO3: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let europeanAqiO3 = europeanAqiO3 else { return }; fbb.create(struct: europeanAqiO3, position: VTOFFSET.europeanAqiO3.p) }
  public static func add(europeanAqiSo2: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let europeanAqiSo2 = europeanAqiSo2 else { return }; fbb.create(struct: europeanAqiSo2, position: VTOFFSET.europeanAqiSo2.p) }
  public static func add(usAqi: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let usAqi = usAqi else { return }; fbb.create(struct: usAqi, position: VTOFFSET.usAqi.p) }
  public static func add(usAqiPm25: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let usAqiPm25 = usAqiPm25 else { return }; fbb.create(struct: usAqiPm25, position: VTOFFSET.usAqiPm25.p) }
  public static func add(usAqiPm10: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let usAqiPm10 = usAqiPm10 else { return }; fbb.create(struct: usAqiPm10, position: VTOFFSET.usAqiPm10.p) }
  public static func add(usAqiNo2: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let usAqiNo2 = usAqiNo2 else { return }; fbb.create(struct: usAqiNo2, position: VTOFFSET.usAqiNo2.p) }
  public static func add(usAqiO3: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let usAqiO3 = usAqiO3 else { return }; fbb.create(struct: usAqiO3, position: VTOFFSET.usAqiO3.p) }
  public static func add(usAqiSo2: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let usAqiSo2 = usAqiSo2 else { return }; fbb.create(struct: usAqiSo2, position: VTOFFSET.usAqiSo2.p) }
  public static func add(usAqiCo: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let usAqiCo = usAqiCo else { return }; fbb.create(struct: usAqiCo, position: VTOFFSET.usAqiCo.p) }
  public static func add(isDay: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let isDay = isDay else { return }; fbb.create(struct: isDay, position: VTOFFSET.isDay.p) }
  public static func endAirQualityCurrent(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirQualityCurrent(
    _ fbb: inout FlatBufferBuilder,
    time: Int64 = 0,
    interval: Int32 = 0,
    pm10: com_openmeteo_ValueAndUnit? = nil,
    pm25: com_openmeteo_ValueAndUnit? = nil,
    dust: com_openmeteo_ValueAndUnit? = nil,
    aerosolOpticalDepth: com_openmeteo_ValueAndUnit? = nil,
    carbonMonoxide: com_openmeteo_ValueAndUnit? = nil,
    nitrogenDioxide: com_openmeteo_ValueAndUnit? = nil,
    ammonia: com_openmeteo_ValueAndUnit? = nil,
    ozone: com_openmeteo_ValueAndUnit? = nil,
    sulphurDioxide: com_openmeteo_ValueAndUnit? = nil,
    uvIndex: com_openmeteo_ValueAndUnit? = nil,
    uvIndexClearSky: com_openmeteo_ValueAndUnit? = nil,
    alderPollen: com_openmeteo_ValueAndUnit? = nil,
    birchPollen: com_openmeteo_ValueAndUnit? = nil,
    grassPollen: com_openmeteo_ValueAndUnit? = nil,
    mugwortPollen: com_openmeteo_ValueAndUnit? = nil,
    olivePollen: com_openmeteo_ValueAndUnit? = nil,
    ragweedPollen: com_openmeteo_ValueAndUnit? = nil,
    europeanAqi: com_openmeteo_ValueAndUnit? = nil,
    europeanAqiPm25: com_openmeteo_ValueAndUnit? = nil,
    europeanAqiPm10: com_openmeteo_ValueAndUnit? = nil,
    europeanAqiNo2: com_openmeteo_ValueAndUnit? = nil,
    europeanAqiO3: com_openmeteo_ValueAndUnit? = nil,
    europeanAqiSo2: com_openmeteo_ValueAndUnit? = nil,
    usAqi: com_openmeteo_ValueAndUnit? = nil,
    usAqiPm25: com_openmeteo_ValueAndUnit? = nil,
    usAqiPm10: com_openmeteo_ValueAndUnit? = nil,
    usAqiNo2: com_openmeteo_ValueAndUnit? = nil,
    usAqiO3: com_openmeteo_ValueAndUnit? = nil,
    usAqiSo2: com_openmeteo_ValueAndUnit? = nil,
    usAqiCo: com_openmeteo_ValueAndUnit? = nil,
    isDay: com_openmeteo_ValueAndUnit? = nil
  ) -> Offset {
    let __start = com_openmeteo_AirQualityCurrent.startAirQualityCurrent(&fbb)
    com_openmeteo_AirQualityCurrent.add(time: time, &fbb)
    com_openmeteo_AirQualityCurrent.add(interval: interval, &fbb)
    com_openmeteo_AirQualityCurrent.add(pm10: pm10, &fbb)
    com_openmeteo_AirQualityCurrent.add(pm25: pm25, &fbb)
    com_openmeteo_AirQualityCurrent.add(dust: dust, &fbb)
    com_openmeteo_AirQualityCurrent.add(aerosolOpticalDepth: aerosolOpticalDepth, &fbb)
    com_openmeteo_AirQualityCurrent.add(carbonMonoxide: carbonMonoxide, &fbb)
    com_openmeteo_AirQualityCurrent.add(nitrogenDioxide: nitrogenDioxide, &fbb)
    com_openmeteo_AirQualityCurrent.add(ammonia: ammonia, &fbb)
    com_openmeteo_AirQualityCurrent.add(ozone: ozone, &fbb)
    com_openmeteo_AirQualityCurrent.add(sulphurDioxide: sulphurDioxide, &fbb)
    com_openmeteo_AirQualityCurrent.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_AirQualityCurrent.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_AirQualityCurrent.add(alderPollen: alderPollen, &fbb)
    com_openmeteo_AirQualityCurrent.add(birchPollen: birchPollen, &fbb)
    com_openmeteo_AirQualityCurrent.add(grassPollen: grassPollen, &fbb)
    com_openmeteo_AirQualityCurrent.add(mugwortPollen: mugwortPollen, &fbb)
    com_openmeteo_AirQualityCurrent.add(olivePollen: olivePollen, &fbb)
    com_openmeteo_AirQualityCurrent.add(ragweedPollen: ragweedPollen, &fbb)
    com_openmeteo_AirQualityCurrent.add(europeanAqi: europeanAqi, &fbb)
    com_openmeteo_AirQualityCurrent.add(europeanAqiPm25: europeanAqiPm25, &fbb)
    com_openmeteo_AirQualityCurrent.add(europeanAqiPm10: europeanAqiPm10, &fbb)
    com_openmeteo_AirQualityCurrent.add(europeanAqiNo2: europeanAqiNo2, &fbb)
    com_openmeteo_AirQualityCurrent.add(europeanAqiO3: europeanAqiO3, &fbb)
    com_openmeteo_AirQualityCurrent.add(europeanAqiSo2: europeanAqiSo2, &fbb)
    com_openmeteo_AirQualityCurrent.add(usAqi: usAqi, &fbb)
    com_openmeteo_AirQualityCurrent.add(usAqiPm25: usAqiPm25, &fbb)
    com_openmeteo_AirQualityCurrent.add(usAqiPm10: usAqiPm10, &fbb)
    com_openmeteo_AirQualityCurrent.add(usAqiNo2: usAqiNo2, &fbb)
    com_openmeteo_AirQualityCurrent.add(usAqiO3: usAqiO3, &fbb)
    com_openmeteo_AirQualityCurrent.add(usAqiSo2: usAqiSo2, &fbb)
    com_openmeteo_AirQualityCurrent.add(usAqiCo: usAqiCo, &fbb)
    com_openmeteo_AirQualityCurrent.add(isDay: isDay, &fbb)
    return com_openmeteo_AirQualityCurrent.endAirQualityCurrent(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.interval.p, fieldName: "interval", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pm10.p, fieldName: "pm10", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.pm25.p, fieldName: "pm25", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.dust.p, fieldName: "dust", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.aerosolOpticalDepth.p, fieldName: "aerosolOpticalDepth", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.carbonMonoxide.p, fieldName: "carbonMonoxide", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.nitrogenDioxide.p, fieldName: "nitrogenDioxide", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.ammonia.p, fieldName: "ammonia", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.ozone.p, fieldName: "ozone", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.sulphurDioxide.p, fieldName: "sulphurDioxide", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.alderPollen.p, fieldName: "alderPollen", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.birchPollen.p, fieldName: "birchPollen", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.grassPollen.p, fieldName: "grassPollen", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.mugwortPollen.p, fieldName: "mugwortPollen", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.olivePollen.p, fieldName: "olivePollen", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.ragweedPollen.p, fieldName: "ragweedPollen", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.europeanAqi.p, fieldName: "europeanAqi", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.europeanAqiPm25.p, fieldName: "europeanAqiPm25", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.europeanAqiPm10.p, fieldName: "europeanAqiPm10", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.europeanAqiNo2.p, fieldName: "europeanAqiNo2", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.europeanAqiO3.p, fieldName: "europeanAqiO3", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.europeanAqiSo2.p, fieldName: "europeanAqiSo2", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.usAqi.p, fieldName: "usAqi", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.usAqiPm25.p, fieldName: "usAqiPm25", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.usAqiPm10.p, fieldName: "usAqiPm10", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.usAqiNo2.p, fieldName: "usAqiNo2", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.usAqiO3.p, fieldName: "usAqiO3", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.usAqiSo2.p, fieldName: "usAqiSo2", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.usAqiCo.p, fieldName: "usAqiCo", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: com_openmeteo_ValueAndUnit.self)
    _v.finish()
  }
}

public struct com_openmeteo_AirQualityApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case generationtimeMs = 12
    case utcOffsetSeconds = 14
    case timezone = 16
    case timezoneAbbreviation = 18
    case time = 20
    case hourly = 22
    case current = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: com_openmeteo_AirQualityModel { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? .bestMatch : com_openmeteo_AirQualityModel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .bestMatch }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var time: com_openmeteo_TimeRange? { let o = _accessor.offset(VTOFFSET.time.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable? { let o = _accessor.offset(VTOFFSET.time.v); return o == 0 ? nil : com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var hourly: com_openmeteo_AirQualityHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_AirQualityHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var current: com_openmeteo_AirQualityCurrent? { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? nil : com_openmeteo_AirQualityCurrent(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startAirQualityApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: com_openmeteo_AirQualityModel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: model.rawValue, def: 0, at: VTOFFSET.model.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func add(current: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: current, at: VTOFFSET.current.p) }
  public static func endAirQualityApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirQualityApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    model: com_openmeteo_AirQualityModel = .bestMatch,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    time: com_openmeteo_TimeRange? = nil,
    hourlyOffset hourly: Offset = Offset(),
    currentOffset current: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_AirQualityApi.startAirQualityApi(&fbb)
    com_openmeteo_AirQualityApi.add(latitude: latitude, &fbb)
    com_openmeteo_AirQualityApi.add(longitude: longitude, &fbb)
    com_openmeteo_AirQualityApi.add(elevation: elevation, &fbb)
    com_openmeteo_AirQualityApi.add(model: model, &fbb)
    com_openmeteo_AirQualityApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_AirQualityApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_AirQualityApi.add(timezone: timezone, &fbb)
    com_openmeteo_AirQualityApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_AirQualityApi.add(time: time, &fbb)
    com_openmeteo_AirQualityApi.add(hourly: hourly, &fbb)
    com_openmeteo_AirQualityApi.add(current: current, &fbb)
    return com_openmeteo_AirQualityApi.endAirQualityApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: com_openmeteo_AirQualityModel.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: false, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_AirQualityHourly>.self)
    try _v.visit(field: VTOFFSET.current.p, fieldName: "current", required: false, type: ForwardOffset<com_openmeteo_AirQualityCurrent>.self)
    _v.finish()
  }
}

