// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum com_openmeteo_WeatherModel: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case undefined = 0
  case bestMatch = 1
  case gfsSeamless = 2
  case gfsGlobal = 3
  case gfsHrrr = 4
  case meteofranceSeamless = 5
  case meteofranceArpegeSeamless = 6
  case meteofranceArpegeWorld = 7
  case meteofranceArpegeEurope = 8
  case meteofranceAromeSeamless = 9
  case meteofranceAromeFrance = 10
  case meteofranceAromeFranceHd = 11
  case jmaSeamless = 12
  case jmaMsm = 13
  case jmsGsm = 14
  case jmaGsm = 15
  case gemSeamless = 16
  case gemGlobal = 17
  case gemRegional = 18
  case gemHrdpsContinental = 19
  case iconSeamless = 20
  case iconGlobal = 21
  case iconEu = 22
  case iconD2 = 23
  case ecmwfIfs04 = 24
  case metnoNordic = 25
  case era5Seamless = 26
  case era5 = 27
  case cerra = 28
  case era5Land = 29
  case ecmwfIfs = 30

  public static var max: com_openmeteo_WeatherModel { return .ecmwfIfs }
  public static var min: com_openmeteo_WeatherModel { return .undefined }
}


public struct com_openmeteo_ValuesAndLevel: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case level = 4
    case values = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var level: Int32 { let o = _accessor.offset(VTOFFSET.level.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public static func startValuesAndLevel(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(level: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: level, def: 0, at: VTOFFSET.level.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endValuesAndLevel(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [6]); return end }
  public static func createValuesAndLevel(
    _ fbb: inout FlatBufferBuilder,
    level: Int32 = 0,
    valuesVectorOffset values: Offset
  ) -> Offset {
    let __start = com_openmeteo_ValuesAndLevel.startValuesAndLevel(&fbb)
    com_openmeteo_ValuesAndLevel.add(level: level, &fbb)
    com_openmeteo_ValuesAndLevel.addVectorOf(values: values, &fbb)
    return com_openmeteo_ValuesAndLevel.endValuesAndLevel(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.level.p, fieldName: "level", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: true, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_ValuesUnitPressureLevel: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case unit = 4
    case values = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var unit: com_openmeteo_SiUnit { let o = _accessor.offset(VTOFFSET.unit.v); return o == 0 ? .undefined : com_openmeteo_SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> com_openmeteo_ValuesAndLevel? { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? nil : com_openmeteo_ValuesAndLevel(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startValuesUnitPressureLevel(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(unit: com_openmeteo_SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unit.rawValue, def: 0, at: VTOFFSET.unit.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endValuesUnitPressureLevel(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createValuesUnitPressureLevel(
    _ fbb: inout FlatBufferBuilder,
    unit: com_openmeteo_SiUnit = .undefined,
    valuesVectorOffset values: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_ValuesUnitPressureLevel.startValuesUnitPressureLevel(&fbb)
    com_openmeteo_ValuesUnitPressureLevel.add(unit: unit, &fbb)
    com_openmeteo_ValuesUnitPressureLevel.addVectorOf(values: values, &fbb)
    return com_openmeteo_ValuesUnitPressureLevel.endValuesUnitPressureLevel(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.unit.p, fieldName: "unit", required: false, type: com_openmeteo_SiUnit.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_ValuesAndLevel>, com_openmeteo_ValuesAndLevel>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_WeatherHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case apparentTemperature = 6
    case cape = 8
    case cloudcover = 10
    case cloudcoverHigh = 12
    case cloudcoverLow = 14
    case cloudcoverMid = 16
    case dewpoint2m = 18
    case diffuseRadiation = 20
    case diffuseRadiationInstant = 22
    case directNormalIrradiance = 24
    case directNormalIrradianceInstant = 26
    case directRadiation = 28
    case directRadiationInstant = 30
    case et0FaoEvapotranspiration = 32
    case evapotranspiration = 34
    case freezinglevelHeight = 36
    case growingDegreeDaysBase0Limit50 = 38
    case isDay = 40
    case latentHeatflux = 42
    case leafWetnessProbability = 44
    case liftedIndex = 46
    case lightningPotential = 48
    case precipitation = 50
    case precipitationProbability = 52
    case pressureMsl = 54
    case rain = 56
    case relativehumidity2m = 58
    case runoff = 60
    case sensibleHeatflux = 62
    case shortwaveRadiation = 64
    case shortwaveRadiationInstant = 66
    case showers = 68
    case snowDepth = 70
    case snowHeight = 72
    case snowfall = 74
    case snowfallHeight = 76
    case snowfallWaterEquivalent = 78
    case soilMoisture0To1cm = 80
    case soilMoisture0To100cm = 82
    case soilMoisture0To10cm = 84
    case soilMoisture0To7cm = 86
    case soilMoisture100To200cm = 88
    case soilMoisture100To255cm = 90
    case soilMoisture10To40cm = 92
    case soilMoisture1To3cm = 94
    case soilMoisture27To81cm = 96
    case soilMoisture28To100cm = 98
    case soilMoisture3To9cm = 100
    case soilMoisture40To100cm = 102
    case soilMoisture7To28cm = 104
    case soilMoisture9To27cm = 106
    case soilMoistureIndex0To100cm = 108
    case soilMoistureIndex0To7cm = 110
    case soilMoistureIndex100To255cm = 112
    case soilMoistureIndex28To100cm = 114
    case soilMoistureIndex7To28cm = 116
    case soilTemperature0To100cm = 118
    case soilTemperature0To10cm = 120
    case soilTemperature0To7cm = 122
    case soilTemperature0cm = 124
    case soilTemperature100To200cm = 126
    case soilTemperature100To255cm = 128
    case soilTemperature10To40cm = 130
    case soilTemperature18cm = 132
    case soilTemperature28To100cm = 134
    case soilTemperature40To100cm = 136
    case soilTemperature54cm = 138
    case soilTemperature6cm = 140
    case soilTemperature7To28cm = 142
    case surfacePressure = 144
    case surfaceTemperature = 146
    case temperature100m = 148
    case temperature120m = 150
    case temperature150m = 152
    case temperature180m = 154
    case temperature2m = 156
    case temperature20m = 158
    case temperature200m = 160
    case temperature50m = 162
    case temperature40m = 164
    case temperature80m = 166
    case terrestrialRadiation = 168
    case terrestrialRadiationInstant = 170
    case totalColumnIntegratedWaterVapour = 172
    case updraft = 174
    case uvIndex = 176
    case uvIndexClearSky = 178
    case vaporPressureDeficit = 180
    case visibility = 182
    case weathercode = 184
    case winddirection100m = 186
    case winddirection10m = 188
    case winddirection120m = 190
    case winddirection150m = 192
    case winddirection180m = 194
    case winddirection200m = 196
    case winddirection20m = 198
    case winddirection40m = 200
    case winddirection50m = 202
    case winddirection80m = 204
    case windgusts10m = 206
    case windspeed100m = 208
    case windspeed10m = 210
    case windspeed120m = 212
    case windspeed150m = 214
    case windspeed180m = 216
    case windspeed200m = 218
    case windspeed20m = 220
    case windspeed40m = 222
    case windspeed50m = 224
    case windspeed80m = 226
    case pressureLevelTemperature = 228
    case pressureLevelDewpoint = 230
    case pressureLevelRelativehumidity = 232
    case pressureLevelCloudcover = 234
    case pressureLevelWindspeed = 236
    case pressureLevelWinddirection = 238
    case pressureLevelVerticalVelocity = 240
    case pressureLevelGeopotentialHeight = 242
    case wetBulbTemperature2m = 244
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var apparentTemperature: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cape: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverHigh: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverLow: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMid: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradiance: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradianceInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var et0FaoEvapotranspiration: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var evapotranspiration: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var freezinglevelHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var growingDegreeDaysBase0Limit50: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var isDay: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var latentHeatflux: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var leafWetnessProbability: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var liftedIndex: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.liftedIndex.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var lightningPotential: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbability: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMsl: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var rain: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var runoff: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.runoff.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sensibleHeatflux: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var showers: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowDepth: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfall: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfallHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfallHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfallWaterEquivalent: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfallWaterEquivalent.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To1cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To1cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To10cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To7cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To7cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture100To200cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture100To255cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture100To255cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture10To40cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture1To3cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture1To3cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture27To81cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture27To81cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture28To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture28To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture3To9cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture3To9cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture40To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture7To28cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture7To28cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture9To27cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture9To27cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To7cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex100To255cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex28To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex7To28cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0To10cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0To7cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To7cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature100To200cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature100To255cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature100To255cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature10To40cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature18cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature28To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature28To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature40To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature54cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature6cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature7To28cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature7To28cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressure: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfaceTemperature: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfaceTemperature.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature100m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature100m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature120m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature150m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature150m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature180m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature20m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature20m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature200m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature200m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature50m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature50m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature40m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature40m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature80m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var terrestrialRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var terrestrialRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var totalColumnIntegratedWaterVapour: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.totalColumnIntegratedWaterVapour.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var updraft: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.updraft.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndex: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSky: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var vaporPressureDeficit: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibility: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var weathercode: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection100m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection100m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection120m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection150m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection150m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection180m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection200m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection200m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection20m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection20m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection40m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection40m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection50m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection50m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection80m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed100m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed100m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed120m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed150m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed150m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed180m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed200m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed200m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed20m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed20m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed40m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed40m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed50m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed50m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed80m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelTemperature: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelTemperature.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelDewpoint: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelDewpoint.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelRelativehumidity: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelRelativehumidity.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelCloudcover: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelCloudcover.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelWindspeed: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelWindspeed.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelWinddirection: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelWinddirection.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelVerticalVelocity: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelVerticalVelocity.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelGeopotentialHeight: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelGeopotentialHeight.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var wetBulbTemperature2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.wetBulbTemperature2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 121) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(apparentTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperature, at: VTOFFSET.apparentTemperature.p) }
  public static func add(cape: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cape, at: VTOFFSET.cape.p) }
  public static func add(cloudcover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover, at: VTOFFSET.cloudcover.p) }
  public static func add(cloudcoverHigh: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverHigh, at: VTOFFSET.cloudcoverHigh.p) }
  public static func add(cloudcoverLow: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverLow, at: VTOFFSET.cloudcoverLow.p) }
  public static func add(cloudcoverMid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMid, at: VTOFFSET.cloudcoverMid.p) }
  public static func add(dewpoint2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint2m, at: VTOFFSET.dewpoint2m.p) }
  public static func add(diffuseRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiation, at: VTOFFSET.diffuseRadiation.p) }
  public static func add(diffuseRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiationInstant, at: VTOFFSET.diffuseRadiationInstant.p) }
  public static func add(directNormalIrradiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradiance, at: VTOFFSET.directNormalIrradiance.p) }
  public static func add(directNormalIrradianceInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradianceInstant, at: VTOFFSET.directNormalIrradianceInstant.p) }
  public static func add(directRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiation, at: VTOFFSET.directRadiation.p) }
  public static func add(directRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiationInstant, at: VTOFFSET.directRadiationInstant.p) }
  public static func add(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(evapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: evapotranspiration, at: VTOFFSET.evapotranspiration.p) }
  public static func add(freezinglevelHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: freezinglevelHeight, at: VTOFFSET.freezinglevelHeight.p) }
  public static func add(growingDegreeDaysBase0Limit50: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: growingDegreeDaysBase0Limit50, at: VTOFFSET.growingDegreeDaysBase0Limit50.p) }
  public static func add(isDay: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: isDay, at: VTOFFSET.isDay.p) }
  public static func add(latentHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: latentHeatflux, at: VTOFFSET.latentHeatflux.p) }
  public static func add(leafWetnessProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: leafWetnessProbability, at: VTOFFSET.leafWetnessProbability.p) }
  public static func add(liftedIndex: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: liftedIndex, at: VTOFFSET.liftedIndex.p) }
  public static func add(lightningPotential: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lightningPotential, at: VTOFFSET.lightningPotential.p) }
  public static func add(precipitation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitation, at: VTOFFSET.precipitation.p) }
  public static func add(precipitationProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbability, at: VTOFFSET.precipitationProbability.p) }
  public static func add(pressureMsl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMsl, at: VTOFFSET.pressureMsl.p) }
  public static func add(rain: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rain, at: VTOFFSET.rain.p) }
  public static func add(relativehumidity2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity2m, at: VTOFFSET.relativehumidity2m.p) }
  public static func add(runoff: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: runoff, at: VTOFFSET.runoff.p) }
  public static func add(sensibleHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sensibleHeatflux, at: VTOFFSET.sensibleHeatflux.p) }
  public static func add(shortwaveRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiation, at: VTOFFSET.shortwaveRadiation.p) }
  public static func add(shortwaveRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationInstant, at: VTOFFSET.shortwaveRadiationInstant.p) }
  public static func add(showers: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showers, at: VTOFFSET.showers.p) }
  public static func add(snowDepth: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowDepth, at: VTOFFSET.snowDepth.p) }
  public static func add(snowHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowHeight, at: VTOFFSET.snowHeight.p) }
  public static func add(snowfall: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfall, at: VTOFFSET.snowfall.p) }
  public static func add(snowfallHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfallHeight, at: VTOFFSET.snowfallHeight.p) }
  public static func add(snowfallWaterEquivalent: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfallWaterEquivalent, at: VTOFFSET.snowfallWaterEquivalent.p) }
  public static func add(soilMoisture0To1cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To1cm, at: VTOFFSET.soilMoisture0To1cm.p) }
  public static func add(soilMoisture0To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To100cm, at: VTOFFSET.soilMoisture0To100cm.p) }
  public static func add(soilMoisture0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To10cm, at: VTOFFSET.soilMoisture0To10cm.p) }
  public static func add(soilMoisture0To7cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To7cm, at: VTOFFSET.soilMoisture0To7cm.p) }
  public static func add(soilMoisture100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture100To200cm, at: VTOFFSET.soilMoisture100To200cm.p) }
  public static func add(soilMoisture100To255cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture100To255cm, at: VTOFFSET.soilMoisture100To255cm.p) }
  public static func add(soilMoisture10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture10To40cm, at: VTOFFSET.soilMoisture10To40cm.p) }
  public static func add(soilMoisture1To3cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture1To3cm, at: VTOFFSET.soilMoisture1To3cm.p) }
  public static func add(soilMoisture27To81cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture27To81cm, at: VTOFFSET.soilMoisture27To81cm.p) }
  public static func add(soilMoisture28To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture28To100cm, at: VTOFFSET.soilMoisture28To100cm.p) }
  public static func add(soilMoisture3To9cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture3To9cm, at: VTOFFSET.soilMoisture3To9cm.p) }
  public static func add(soilMoisture40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture40To100cm, at: VTOFFSET.soilMoisture40To100cm.p) }
  public static func add(soilMoisture7To28cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture7To28cm, at: VTOFFSET.soilMoisture7To28cm.p) }
  public static func add(soilMoisture9To27cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture9To27cm, at: VTOFFSET.soilMoisture9To27cm.p) }
  public static func add(soilMoistureIndex0To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To100cm, at: VTOFFSET.soilMoistureIndex0To100cm.p) }
  public static func add(soilMoistureIndex0To7cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To7cm, at: VTOFFSET.soilMoistureIndex0To7cm.p) }
  public static func add(soilMoistureIndex100To255cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex100To255cm, at: VTOFFSET.soilMoistureIndex100To255cm.p) }
  public static func add(soilMoistureIndex28To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex28To100cm, at: VTOFFSET.soilMoistureIndex28To100cm.p) }
  public static func add(soilMoistureIndex7To28cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex7To28cm, at: VTOFFSET.soilMoistureIndex7To28cm.p) }
  public static func add(soilTemperature0To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To100cm, at: VTOFFSET.soilTemperature0To100cm.p) }
  public static func add(soilTemperature0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To10cm, at: VTOFFSET.soilTemperature0To10cm.p) }
  public static func add(soilTemperature0To7cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To7cm, at: VTOFFSET.soilTemperature0To7cm.p) }
  public static func add(soilTemperature0cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0cm, at: VTOFFSET.soilTemperature0cm.p) }
  public static func add(soilTemperature100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature100To200cm, at: VTOFFSET.soilTemperature100To200cm.p) }
  public static func add(soilTemperature100To255cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature100To255cm, at: VTOFFSET.soilTemperature100To255cm.p) }
  public static func add(soilTemperature10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature10To40cm, at: VTOFFSET.soilTemperature10To40cm.p) }
  public static func add(soilTemperature18cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature18cm, at: VTOFFSET.soilTemperature18cm.p) }
  public static func add(soilTemperature28To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature28To100cm, at: VTOFFSET.soilTemperature28To100cm.p) }
  public static func add(soilTemperature40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature40To100cm, at: VTOFFSET.soilTemperature40To100cm.p) }
  public static func add(soilTemperature54cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature54cm, at: VTOFFSET.soilTemperature54cm.p) }
  public static func add(soilTemperature6cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature6cm, at: VTOFFSET.soilTemperature6cm.p) }
  public static func add(soilTemperature7To28cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature7To28cm, at: VTOFFSET.soilTemperature7To28cm.p) }
  public static func add(surfacePressure: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressure, at: VTOFFSET.surfacePressure.p) }
  public static func add(surfaceTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfaceTemperature, at: VTOFFSET.surfaceTemperature.p) }
  public static func add(temperature100m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature100m, at: VTOFFSET.temperature100m.p) }
  public static func add(temperature120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature120m, at: VTOFFSET.temperature120m.p) }
  public static func add(temperature150m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature150m, at: VTOFFSET.temperature150m.p) }
  public static func add(temperature180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature180m, at: VTOFFSET.temperature180m.p) }
  public static func add(temperature2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2m, at: VTOFFSET.temperature2m.p) }
  public static func add(temperature20m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature20m, at: VTOFFSET.temperature20m.p) }
  public static func add(temperature200m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature200m, at: VTOFFSET.temperature200m.p) }
  public static func add(temperature50m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature50m, at: VTOFFSET.temperature50m.p) }
  public static func add(temperature40m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature40m, at: VTOFFSET.temperature40m.p) }
  public static func add(temperature80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature80m, at: VTOFFSET.temperature80m.p) }
  public static func add(terrestrialRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiation, at: VTOFFSET.terrestrialRadiation.p) }
  public static func add(terrestrialRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiationInstant, at: VTOFFSET.terrestrialRadiationInstant.p) }
  public static func add(totalColumnIntegratedWaterVapour: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: totalColumnIntegratedWaterVapour, at: VTOFFSET.totalColumnIntegratedWaterVapour.p) }
  public static func add(updraft: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updraft, at: VTOFFSET.updraft.p) }
  public static func add(uvIndex: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndex, at: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSky, at: VTOFFSET.uvIndexClearSky.p) }
  public static func add(vaporPressureDeficit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vaporPressureDeficit, at: VTOFFSET.vaporPressureDeficit.p) }
  public static func add(visibility: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibility, at: VTOFFSET.visibility.p) }
  public static func add(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func add(winddirection100m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection100m, at: VTOFFSET.winddirection100m.p) }
  public static func add(winddirection10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10m, at: VTOFFSET.winddirection10m.p) }
  public static func add(winddirection120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection120m, at: VTOFFSET.winddirection120m.p) }
  public static func add(winddirection150m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection150m, at: VTOFFSET.winddirection150m.p) }
  public static func add(winddirection180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection180m, at: VTOFFSET.winddirection180m.p) }
  public static func add(winddirection200m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection200m, at: VTOFFSET.winddirection200m.p) }
  public static func add(winddirection20m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection20m, at: VTOFFSET.winddirection20m.p) }
  public static func add(winddirection40m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection40m, at: VTOFFSET.winddirection40m.p) }
  public static func add(winddirection50m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection50m, at: VTOFFSET.winddirection50m.p) }
  public static func add(winddirection80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection80m, at: VTOFFSET.winddirection80m.p) }
  public static func add(windgusts10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10m, at: VTOFFSET.windgusts10m.p) }
  public static func add(windspeed100m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed100m, at: VTOFFSET.windspeed100m.p) }
  public static func add(windspeed10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10m, at: VTOFFSET.windspeed10m.p) }
  public static func add(windspeed120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed120m, at: VTOFFSET.windspeed120m.p) }
  public static func add(windspeed150m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed150m, at: VTOFFSET.windspeed150m.p) }
  public static func add(windspeed180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed180m, at: VTOFFSET.windspeed180m.p) }
  public static func add(windspeed200m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed200m, at: VTOFFSET.windspeed200m.p) }
  public static func add(windspeed20m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed20m, at: VTOFFSET.windspeed20m.p) }
  public static func add(windspeed40m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed40m, at: VTOFFSET.windspeed40m.p) }
  public static func add(windspeed50m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed50m, at: VTOFFSET.windspeed50m.p) }
  public static func add(windspeed80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed80m, at: VTOFFSET.windspeed80m.p) }
  public static func add(pressureLevelTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelTemperature, at: VTOFFSET.pressureLevelTemperature.p) }
  public static func add(pressureLevelDewpoint: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelDewpoint, at: VTOFFSET.pressureLevelDewpoint.p) }
  public static func add(pressureLevelRelativehumidity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelRelativehumidity, at: VTOFFSET.pressureLevelRelativehumidity.p) }
  public static func add(pressureLevelCloudcover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelCloudcover, at: VTOFFSET.pressureLevelCloudcover.p) }
  public static func add(pressureLevelWindspeed: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelWindspeed, at: VTOFFSET.pressureLevelWindspeed.p) }
  public static func add(pressureLevelWinddirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelWinddirection, at: VTOFFSET.pressureLevelWinddirection.p) }
  public static func add(pressureLevelVerticalVelocity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelVerticalVelocity, at: VTOFFSET.pressureLevelVerticalVelocity.p) }
  public static func add(pressureLevelGeopotentialHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelGeopotentialHeight, at: VTOFFSET.pressureLevelGeopotentialHeight.p) }
  public static func add(wetBulbTemperature2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wetBulbTemperature2m, at: VTOFFSET.wetBulbTemperature2m.p) }
  public static func endWeatherHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createWeatherHourly(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    apparentTemperatureOffset apparentTemperature: Offset = Offset(),
    capeOffset cape: Offset = Offset(),
    cloudcoverOffset cloudcover: Offset = Offset(),
    cloudcoverHighOffset cloudcoverHigh: Offset = Offset(),
    cloudcoverLowOffset cloudcoverLow: Offset = Offset(),
    cloudcoverMidOffset cloudcoverMid: Offset = Offset(),
    dewpoint2mOffset dewpoint2m: Offset = Offset(),
    diffuseRadiationOffset diffuseRadiation: Offset = Offset(),
    diffuseRadiationInstantOffset diffuseRadiationInstant: Offset = Offset(),
    directNormalIrradianceOffset directNormalIrradiance: Offset = Offset(),
    directNormalIrradianceInstantOffset directNormalIrradianceInstant: Offset = Offset(),
    directRadiationOffset directRadiation: Offset = Offset(),
    directRadiationInstantOffset directRadiationInstant: Offset = Offset(),
    et0FaoEvapotranspirationOffset et0FaoEvapotranspiration: Offset = Offset(),
    evapotranspirationOffset evapotranspiration: Offset = Offset(),
    freezinglevelHeightOffset freezinglevelHeight: Offset = Offset(),
    growingDegreeDaysBase0Limit50Offset growingDegreeDaysBase0Limit50: Offset = Offset(),
    isDayOffset isDay: Offset = Offset(),
    latentHeatfluxOffset latentHeatflux: Offset = Offset(),
    leafWetnessProbabilityOffset leafWetnessProbability: Offset = Offset(),
    liftedIndexOffset liftedIndex: Offset = Offset(),
    lightningPotentialOffset lightningPotential: Offset = Offset(),
    precipitationOffset precipitation: Offset = Offset(),
    precipitationProbabilityOffset precipitationProbability: Offset = Offset(),
    pressureMslOffset pressureMsl: Offset = Offset(),
    rainOffset rain: Offset = Offset(),
    relativehumidity2mOffset relativehumidity2m: Offset = Offset(),
    runoffOffset runoff: Offset = Offset(),
    sensibleHeatfluxOffset sensibleHeatflux: Offset = Offset(),
    shortwaveRadiationOffset shortwaveRadiation: Offset = Offset(),
    shortwaveRadiationInstantOffset shortwaveRadiationInstant: Offset = Offset(),
    showersOffset showers: Offset = Offset(),
    snowDepthOffset snowDepth: Offset = Offset(),
    snowHeightOffset snowHeight: Offset = Offset(),
    snowfallOffset snowfall: Offset = Offset(),
    snowfallHeightOffset snowfallHeight: Offset = Offset(),
    snowfallWaterEquivalentOffset snowfallWaterEquivalent: Offset = Offset(),
    soilMoisture0To1cmOffset soilMoisture0To1cm: Offset = Offset(),
    soilMoisture0To100cmOffset soilMoisture0To100cm: Offset = Offset(),
    soilMoisture0To10cmOffset soilMoisture0To10cm: Offset = Offset(),
    soilMoisture0To7cmOffset soilMoisture0To7cm: Offset = Offset(),
    soilMoisture100To200cmOffset soilMoisture100To200cm: Offset = Offset(),
    soilMoisture100To255cmOffset soilMoisture100To255cm: Offset = Offset(),
    soilMoisture10To40cmOffset soilMoisture10To40cm: Offset = Offset(),
    soilMoisture1To3cmOffset soilMoisture1To3cm: Offset = Offset(),
    soilMoisture27To81cmOffset soilMoisture27To81cm: Offset = Offset(),
    soilMoisture28To100cmOffset soilMoisture28To100cm: Offset = Offset(),
    soilMoisture3To9cmOffset soilMoisture3To9cm: Offset = Offset(),
    soilMoisture40To100cmOffset soilMoisture40To100cm: Offset = Offset(),
    soilMoisture7To28cmOffset soilMoisture7To28cm: Offset = Offset(),
    soilMoisture9To27cmOffset soilMoisture9To27cm: Offset = Offset(),
    soilMoistureIndex0To100cmOffset soilMoistureIndex0To100cm: Offset = Offset(),
    soilMoistureIndex0To7cmOffset soilMoistureIndex0To7cm: Offset = Offset(),
    soilMoistureIndex100To255cmOffset soilMoistureIndex100To255cm: Offset = Offset(),
    soilMoistureIndex28To100cmOffset soilMoistureIndex28To100cm: Offset = Offset(),
    soilMoistureIndex7To28cmOffset soilMoistureIndex7To28cm: Offset = Offset(),
    soilTemperature0To100cmOffset soilTemperature0To100cm: Offset = Offset(),
    soilTemperature0To10cmOffset soilTemperature0To10cm: Offset = Offset(),
    soilTemperature0To7cmOffset soilTemperature0To7cm: Offset = Offset(),
    soilTemperature0cmOffset soilTemperature0cm: Offset = Offset(),
    soilTemperature100To200cmOffset soilTemperature100To200cm: Offset = Offset(),
    soilTemperature100To255cmOffset soilTemperature100To255cm: Offset = Offset(),
    soilTemperature10To40cmOffset soilTemperature10To40cm: Offset = Offset(),
    soilTemperature18cmOffset soilTemperature18cm: Offset = Offset(),
    soilTemperature28To100cmOffset soilTemperature28To100cm: Offset = Offset(),
    soilTemperature40To100cmOffset soilTemperature40To100cm: Offset = Offset(),
    soilTemperature54cmOffset soilTemperature54cm: Offset = Offset(),
    soilTemperature6cmOffset soilTemperature6cm: Offset = Offset(),
    soilTemperature7To28cmOffset soilTemperature7To28cm: Offset = Offset(),
    surfacePressureOffset surfacePressure: Offset = Offset(),
    surfaceTemperatureOffset surfaceTemperature: Offset = Offset(),
    temperature100mOffset temperature100m: Offset = Offset(),
    temperature120mOffset temperature120m: Offset = Offset(),
    temperature150mOffset temperature150m: Offset = Offset(),
    temperature180mOffset temperature180m: Offset = Offset(),
    temperature2mOffset temperature2m: Offset = Offset(),
    temperature20mOffset temperature20m: Offset = Offset(),
    temperature200mOffset temperature200m: Offset = Offset(),
    temperature50mOffset temperature50m: Offset = Offset(),
    temperature40mOffset temperature40m: Offset = Offset(),
    temperature80mOffset temperature80m: Offset = Offset(),
    terrestrialRadiationOffset terrestrialRadiation: Offset = Offset(),
    terrestrialRadiationInstantOffset terrestrialRadiationInstant: Offset = Offset(),
    totalColumnIntegratedWaterVapourOffset totalColumnIntegratedWaterVapour: Offset = Offset(),
    updraftOffset updraft: Offset = Offset(),
    uvIndexOffset uvIndex: Offset = Offset(),
    uvIndexClearSkyOffset uvIndexClearSky: Offset = Offset(),
    vaporPressureDeficitOffset vaporPressureDeficit: Offset = Offset(),
    visibilityOffset visibility: Offset = Offset(),
    weathercodeOffset weathercode: Offset = Offset(),
    winddirection100mOffset winddirection100m: Offset = Offset(),
    winddirection10mOffset winddirection10m: Offset = Offset(),
    winddirection120mOffset winddirection120m: Offset = Offset(),
    winddirection150mOffset winddirection150m: Offset = Offset(),
    winddirection180mOffset winddirection180m: Offset = Offset(),
    winddirection200mOffset winddirection200m: Offset = Offset(),
    winddirection20mOffset winddirection20m: Offset = Offset(),
    winddirection40mOffset winddirection40m: Offset = Offset(),
    winddirection50mOffset winddirection50m: Offset = Offset(),
    winddirection80mOffset winddirection80m: Offset = Offset(),
    windgusts10mOffset windgusts10m: Offset = Offset(),
    windspeed100mOffset windspeed100m: Offset = Offset(),
    windspeed10mOffset windspeed10m: Offset = Offset(),
    windspeed120mOffset windspeed120m: Offset = Offset(),
    windspeed150mOffset windspeed150m: Offset = Offset(),
    windspeed180mOffset windspeed180m: Offset = Offset(),
    windspeed200mOffset windspeed200m: Offset = Offset(),
    windspeed20mOffset windspeed20m: Offset = Offset(),
    windspeed40mOffset windspeed40m: Offset = Offset(),
    windspeed50mOffset windspeed50m: Offset = Offset(),
    windspeed80mOffset windspeed80m: Offset = Offset(),
    pressureLevelTemperatureOffset pressureLevelTemperature: Offset = Offset(),
    pressureLevelDewpointOffset pressureLevelDewpoint: Offset = Offset(),
    pressureLevelRelativehumidityOffset pressureLevelRelativehumidity: Offset = Offset(),
    pressureLevelCloudcoverOffset pressureLevelCloudcover: Offset = Offset(),
    pressureLevelWindspeedOffset pressureLevelWindspeed: Offset = Offset(),
    pressureLevelWinddirectionOffset pressureLevelWinddirection: Offset = Offset(),
    pressureLevelVerticalVelocityOffset pressureLevelVerticalVelocity: Offset = Offset(),
    pressureLevelGeopotentialHeightOffset pressureLevelGeopotentialHeight: Offset = Offset(),
    wetBulbTemperature2mOffset wetBulbTemperature2m: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_WeatherHourly.startWeatherHourly(&fbb)
    com_openmeteo_WeatherHourly.add(time: time, &fbb)
    com_openmeteo_WeatherHourly.add(apparentTemperature: apparentTemperature, &fbb)
    com_openmeteo_WeatherHourly.add(cape: cape, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover: cloudcover, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcoverHigh: cloudcoverHigh, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcoverLow: cloudcoverLow, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcoverMid: cloudcoverMid, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint2m: dewpoint2m, &fbb)
    com_openmeteo_WeatherHourly.add(diffuseRadiation: diffuseRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(diffuseRadiationInstant: diffuseRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(directNormalIrradiance: directNormalIrradiance, &fbb)
    com_openmeteo_WeatherHourly.add(directNormalIrradianceInstant: directNormalIrradianceInstant, &fbb)
    com_openmeteo_WeatherHourly.add(directRadiation: directRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(directRadiationInstant: directRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_WeatherHourly.add(evapotranspiration: evapotranspiration, &fbb)
    com_openmeteo_WeatherHourly.add(freezinglevelHeight: freezinglevelHeight, &fbb)
    com_openmeteo_WeatherHourly.add(growingDegreeDaysBase0Limit50: growingDegreeDaysBase0Limit50, &fbb)
    com_openmeteo_WeatherHourly.add(isDay: isDay, &fbb)
    com_openmeteo_WeatherHourly.add(latentHeatflux: latentHeatflux, &fbb)
    com_openmeteo_WeatherHourly.add(leafWetnessProbability: leafWetnessProbability, &fbb)
    com_openmeteo_WeatherHourly.add(liftedIndex: liftedIndex, &fbb)
    com_openmeteo_WeatherHourly.add(lightningPotential: lightningPotential, &fbb)
    com_openmeteo_WeatherHourly.add(precipitation: precipitation, &fbb)
    com_openmeteo_WeatherHourly.add(precipitationProbability: precipitationProbability, &fbb)
    com_openmeteo_WeatherHourly.add(pressureMsl: pressureMsl, &fbb)
    com_openmeteo_WeatherHourly.add(rain: rain, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity2m: relativehumidity2m, &fbb)
    com_openmeteo_WeatherHourly.add(runoff: runoff, &fbb)
    com_openmeteo_WeatherHourly.add(sensibleHeatflux: sensibleHeatflux, &fbb)
    com_openmeteo_WeatherHourly.add(shortwaveRadiation: shortwaveRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(shortwaveRadiationInstant: shortwaveRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(showers: showers, &fbb)
    com_openmeteo_WeatherHourly.add(snowDepth: snowDepth, &fbb)
    com_openmeteo_WeatherHourly.add(snowHeight: snowHeight, &fbb)
    com_openmeteo_WeatherHourly.add(snowfall: snowfall, &fbb)
    com_openmeteo_WeatherHourly.add(snowfallHeight: snowfallHeight, &fbb)
    com_openmeteo_WeatherHourly.add(snowfallWaterEquivalent: snowfallWaterEquivalent, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture0To1cm: soilMoisture0To1cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture0To100cm: soilMoisture0To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture0To10cm: soilMoisture0To10cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture0To7cm: soilMoisture0To7cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture100To200cm: soilMoisture100To200cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture100To255cm: soilMoisture100To255cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture10To40cm: soilMoisture10To40cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture1To3cm: soilMoisture1To3cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture27To81cm: soilMoisture27To81cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture28To100cm: soilMoisture28To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture3To9cm: soilMoisture3To9cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture40To100cm: soilMoisture40To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture7To28cm: soilMoisture7To28cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture9To27cm: soilMoisture9To27cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex0To100cm: soilMoistureIndex0To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex0To7cm: soilMoistureIndex0To7cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex100To255cm: soilMoistureIndex100To255cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex28To100cm: soilMoistureIndex28To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex7To28cm: soilMoistureIndex7To28cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature0To100cm: soilTemperature0To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature0To10cm: soilTemperature0To10cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature0To7cm: soilTemperature0To7cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature0cm: soilTemperature0cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature100To200cm: soilTemperature100To200cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature100To255cm: soilTemperature100To255cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature10To40cm: soilTemperature10To40cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature18cm: soilTemperature18cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature28To100cm: soilTemperature28To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature40To100cm: soilTemperature40To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature54cm: soilTemperature54cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature6cm: soilTemperature6cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature7To28cm: soilTemperature7To28cm, &fbb)
    com_openmeteo_WeatherHourly.add(surfacePressure: surfacePressure, &fbb)
    com_openmeteo_WeatherHourly.add(surfaceTemperature: surfaceTemperature, &fbb)
    com_openmeteo_WeatherHourly.add(temperature100m: temperature100m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature120m: temperature120m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature150m: temperature150m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature180m: temperature180m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature2m: temperature2m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature20m: temperature20m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature200m: temperature200m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature50m: temperature50m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature40m: temperature40m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature80m: temperature80m, &fbb)
    com_openmeteo_WeatherHourly.add(terrestrialRadiation: terrestrialRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(terrestrialRadiationInstant: terrestrialRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(totalColumnIntegratedWaterVapour: totalColumnIntegratedWaterVapour, &fbb)
    com_openmeteo_WeatherHourly.add(updraft: updraft, &fbb)
    com_openmeteo_WeatherHourly.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_WeatherHourly.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_WeatherHourly.add(vaporPressureDeficit: vaporPressureDeficit, &fbb)
    com_openmeteo_WeatherHourly.add(visibility: visibility, &fbb)
    com_openmeteo_WeatherHourly.add(weathercode: weathercode, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection100m: winddirection100m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection10m: winddirection10m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection120m: winddirection120m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection150m: winddirection150m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection180m: winddirection180m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection200m: winddirection200m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection20m: winddirection20m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection40m: winddirection40m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection50m: winddirection50m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection80m: winddirection80m, &fbb)
    com_openmeteo_WeatherHourly.add(windgusts10m: windgusts10m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed100m: windspeed100m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed10m: windspeed10m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed120m: windspeed120m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed150m: windspeed150m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed180m: windspeed180m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed200m: windspeed200m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed20m: windspeed20m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed40m: windspeed40m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed50m: windspeed50m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed80m: windspeed80m, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelTemperature: pressureLevelTemperature, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelDewpoint: pressureLevelDewpoint, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelRelativehumidity: pressureLevelRelativehumidity, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelCloudcover: pressureLevelCloudcover, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelWindspeed: pressureLevelWindspeed, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelWinddirection: pressureLevelWinddirection, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelVerticalVelocity: pressureLevelVerticalVelocity, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelGeopotentialHeight: pressureLevelGeopotentialHeight, &fbb)
    com_openmeteo_WeatherHourly.add(wetBulbTemperature2m: wetBulbTemperature2m, &fbb)
    return com_openmeteo_WeatherHourly.endWeatherHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.apparentTemperature.p, fieldName: "apparentTemperature", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cape.p, fieldName: "cape", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover.p, fieldName: "cloudcover", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverHigh.p, fieldName: "cloudcoverHigh", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverLow.p, fieldName: "cloudcoverLow", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMid.p, fieldName: "cloudcoverMid", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint2m.p, fieldName: "dewpoint2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiation.p, fieldName: "diffuseRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiationInstant.p, fieldName: "diffuseRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradiance.p, fieldName: "directNormalIrradiance", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradianceInstant.p, fieldName: "directNormalIrradianceInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directRadiation.p, fieldName: "directRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directRadiationInstant.p, fieldName: "directRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.evapotranspiration.p, fieldName: "evapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.freezinglevelHeight.p, fieldName: "freezinglevelHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.growingDegreeDaysBase0Limit50.p, fieldName: "growingDegreeDaysBase0Limit50", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.latentHeatflux.p, fieldName: "latentHeatflux", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.leafWetnessProbability.p, fieldName: "leafWetnessProbability", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.liftedIndex.p, fieldName: "liftedIndex", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.lightningPotential.p, fieldName: "lightningPotential", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitation.p, fieldName: "precipitation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbability.p, fieldName: "precipitationProbability", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMsl.p, fieldName: "pressureMsl", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.rain.p, fieldName: "rain", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity2m.p, fieldName: "relativehumidity2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.runoff.p, fieldName: "runoff", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sensibleHeatflux.p, fieldName: "sensibleHeatflux", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiation.p, fieldName: "shortwaveRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationInstant.p, fieldName: "shortwaveRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.showers.p, fieldName: "showers", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowDepth.p, fieldName: "snowDepth", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowHeight.p, fieldName: "snowHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfall.p, fieldName: "snowfall", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfallHeight.p, fieldName: "snowfallHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfallWaterEquivalent.p, fieldName: "snowfallWaterEquivalent", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To1cm.p, fieldName: "soilMoisture0To1cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To100cm.p, fieldName: "soilMoisture0To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To10cm.p, fieldName: "soilMoisture0To10cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To7cm.p, fieldName: "soilMoisture0To7cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To200cm.p, fieldName: "soilMoisture100To200cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To255cm.p, fieldName: "soilMoisture100To255cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture10To40cm.p, fieldName: "soilMoisture10To40cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture1To3cm.p, fieldName: "soilMoisture1To3cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture27To81cm.p, fieldName: "soilMoisture27To81cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture28To100cm.p, fieldName: "soilMoisture28To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture3To9cm.p, fieldName: "soilMoisture3To9cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture40To100cm.p, fieldName: "soilMoisture40To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture7To28cm.p, fieldName: "soilMoisture7To28cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture9To27cm.p, fieldName: "soilMoisture9To27cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To100cm.p, fieldName: "soilMoistureIndex0To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To7cm.p, fieldName: "soilMoistureIndex0To7cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex100To255cm.p, fieldName: "soilMoistureIndex100To255cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex28To100cm.p, fieldName: "soilMoistureIndex28To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex7To28cm.p, fieldName: "soilMoistureIndex7To28cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To100cm.p, fieldName: "soilTemperature0To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To10cm.p, fieldName: "soilTemperature0To10cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To7cm.p, fieldName: "soilTemperature0To7cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0cm.p, fieldName: "soilTemperature0cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To200cm.p, fieldName: "soilTemperature100To200cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To255cm.p, fieldName: "soilTemperature100To255cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature10To40cm.p, fieldName: "soilTemperature10To40cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature18cm.p, fieldName: "soilTemperature18cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature28To100cm.p, fieldName: "soilTemperature28To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature40To100cm.p, fieldName: "soilTemperature40To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature54cm.p, fieldName: "soilTemperature54cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature6cm.p, fieldName: "soilTemperature6cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature7To28cm.p, fieldName: "soilTemperature7To28cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressure.p, fieldName: "surfacePressure", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfaceTemperature.p, fieldName: "surfaceTemperature", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature100m.p, fieldName: "temperature100m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature120m.p, fieldName: "temperature120m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature150m.p, fieldName: "temperature150m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature180m.p, fieldName: "temperature180m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2m.p, fieldName: "temperature2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature20m.p, fieldName: "temperature20m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature200m.p, fieldName: "temperature200m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature50m.p, fieldName: "temperature50m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature40m.p, fieldName: "temperature40m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature80m.p, fieldName: "temperature80m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiation.p, fieldName: "terrestrialRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiationInstant.p, fieldName: "terrestrialRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.totalColumnIntegratedWaterVapour.p, fieldName: "totalColumnIntegratedWaterVapour", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.updraft.p, fieldName: "updraft", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.vaporPressureDeficit.p, fieldName: "vaporPressureDeficit", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibility.p, fieldName: "visibility", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection100m.p, fieldName: "winddirection100m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection10m.p, fieldName: "winddirection10m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection120m.p, fieldName: "winddirection120m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection150m.p, fieldName: "winddirection150m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection180m.p, fieldName: "winddirection180m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection200m.p, fieldName: "winddirection200m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection20m.p, fieldName: "winddirection20m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection40m.p, fieldName: "winddirection40m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection50m.p, fieldName: "winddirection50m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection80m.p, fieldName: "winddirection80m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10m.p, fieldName: "windgusts10m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed100m.p, fieldName: "windspeed100m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10m.p, fieldName: "windspeed10m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed120m.p, fieldName: "windspeed120m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed150m.p, fieldName: "windspeed150m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed180m.p, fieldName: "windspeed180m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed200m.p, fieldName: "windspeed200m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed20m.p, fieldName: "windspeed20m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed40m.p, fieldName: "windspeed40m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed50m.p, fieldName: "windspeed50m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed80m.p, fieldName: "windspeed80m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureLevelTemperature.p, fieldName: "pressureLevelTemperature", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelDewpoint.p, fieldName: "pressureLevelDewpoint", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelRelativehumidity.p, fieldName: "pressureLevelRelativehumidity", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelCloudcover.p, fieldName: "pressureLevelCloudcover", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelWindspeed.p, fieldName: "pressureLevelWindspeed", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelWinddirection.p, fieldName: "pressureLevelWinddirection", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelVerticalVelocity.p, fieldName: "pressureLevelVerticalVelocity", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelGeopotentialHeight.p, fieldName: "pressureLevelGeopotentialHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.wetBulbTemperature2m.p, fieldName: "wetBulbTemperature2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_WeatherCurrent: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case interval = 6
    case apparentTemperature = 8
    case cape = 10
    case cloudcover = 12
    case cloudcoverHigh = 14
    case cloudcoverLow = 16
    case cloudcoverMid = 18
    case dewpoint2m = 20
    case diffuseRadiation = 22
    case diffuseRadiationInstant = 24
    case directNormalIrradiance = 26
    case directNormalIrradianceInstant = 28
    case directRadiation = 30
    case directRadiationInstant = 32
    case et0FaoEvapotranspiration = 34
    case evapotranspiration = 36
    case freezinglevelHeight = 38
    case growingDegreeDaysBase0Limit50 = 40
    case isDay = 42
    case latentHeatflux = 44
    case leafWetnessProbability = 46
    case liftedIndex = 48
    case lightningPotential = 50
    case precipitation = 52
    case precipitationProbability = 54
    case pressureMsl = 56
    case rain = 58
    case relativehumidity2m = 60
    case runoff = 62
    case sensibleHeatflux = 64
    case shortwaveRadiation = 66
    case shortwaveRadiationInstant = 68
    case showers = 70
    case snowDepth = 72
    case snowHeight = 74
    case snowfall = 76
    case snowfallHeight = 78
    case snowfallWaterEquivalent = 80
    case soilMoisture0To1cm = 82
    case soilMoisture0To100cm = 84
    case soilMoisture0To10cm = 86
    case soilMoisture0To7cm = 88
    case soilMoisture100To200cm = 90
    case soilMoisture100To255cm = 92
    case soilMoisture10To40cm = 94
    case soilMoisture1To3cm = 96
    case soilMoisture27To81cm = 98
    case soilMoisture28To100cm = 100
    case soilMoisture3To9cm = 102
    case soilMoisture40To100cm = 104
    case soilMoisture7To28cm = 106
    case soilMoisture9To27cm = 108
    case soilMoistureIndex0To100cm = 110
    case soilMoistureIndex0To7cm = 112
    case soilMoistureIndex100To255cm = 114
    case soilMoistureIndex28To100cm = 116
    case soilMoistureIndex7To28cm = 118
    case soilTemperature0To100cm = 120
    case soilTemperature0To10cm = 122
    case soilTemperature0To7cm = 124
    case soilTemperature0cm = 126
    case soilTemperature100To200cm = 128
    case soilTemperature100To255cm = 130
    case soilTemperature10To40cm = 132
    case soilTemperature18cm = 134
    case soilTemperature28To100cm = 136
    case soilTemperature40To100cm = 138
    case soilTemperature54cm = 140
    case soilTemperature6cm = 142
    case soilTemperature7To28cm = 144
    case surfacePressure = 146
    case surfaceTemperature = 148
    case temperature100m = 150
    case temperature120m = 152
    case temperature150m = 154
    case temperature180m = 156
    case temperature2m = 158
    case temperature20m = 160
    case temperature200m = 162
    case temperature50m = 164
    case temperature40m = 166
    case temperature80m = 168
    case terrestrialRadiation = 170
    case terrestrialRadiationInstant = 172
    case totalColumnIntegratedWaterVapour = 174
    case updraft = 176
    case uvIndex = 178
    case uvIndexClearSky = 180
    case vaporPressureDeficit = 182
    case visibility = 184
    case weathercode = 186
    case winddirection100m = 188
    case winddirection10m = 190
    case winddirection120m = 192
    case winddirection150m = 194
    case winddirection180m = 196
    case winddirection200m = 198
    case winddirection20m = 200
    case winddirection40m = 202
    case winddirection50m = 204
    case winddirection80m = 206
    case windgusts10m = 208
    case windspeed100m = 210
    case windspeed10m = 212
    case windspeed120m = 214
    case windspeed150m = 216
    case windspeed180m = 218
    case windspeed200m = 220
    case windspeed20m = 222
    case windspeed40m = 224
    case windspeed50m = 226
    case windspeed80m = 228
    case wetBulbTemperature2m = 230
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: Int64 { let o = _accessor.offset(VTOFFSET.time.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var interval: Int32 { let o = _accessor.offset(VTOFFSET.interval.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var apparentTemperature: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableApparentTemperature: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var cape: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableCape: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var cloudcover: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableCloudcover: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var cloudcoverHigh: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableCloudcoverHigh: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var cloudcoverLow: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableCloudcoverLow: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var cloudcoverMid: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableCloudcoverMid: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var dewpoint2m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableDewpoint2m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var diffuseRadiation: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableDiffuseRadiation: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var diffuseRadiationInstant: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableDiffuseRadiationInstant: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var directNormalIrradiance: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableDirectNormalIrradiance: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var directNormalIrradianceInstant: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableDirectNormalIrradianceInstant: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var directRadiation: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableDirectRadiation: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var directRadiationInstant: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableDirectRadiationInstant: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var et0FaoEvapotranspiration: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableEt0FaoEvapotranspiration: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var evapotranspiration: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableEvapotranspiration: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var freezinglevelHeight: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableFreezinglevelHeight: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var growingDegreeDaysBase0Limit50: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableGrowingDegreeDaysBase0Limit50: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var isDay: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableIsDay: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var latentHeatflux: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableLatentHeatflux: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var leafWetnessProbability: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableLeafWetnessProbability: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var liftedIndex: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.liftedIndex.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableLiftedIndex: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.liftedIndex.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var lightningPotential: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableLightningPotential: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var precipitation: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutablePrecipitation: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var precipitationProbability: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutablePrecipitationProbability: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var pressureMsl: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutablePressureMsl: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var rain: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableRain: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var relativehumidity2m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableRelativehumidity2m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var runoff: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.runoff.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableRunoff: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.runoff.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var sensibleHeatflux: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSensibleHeatflux: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var shortwaveRadiation: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableShortwaveRadiation: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var shortwaveRadiationInstant: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableShortwaveRadiationInstant: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var showers: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableShowers: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var snowDepth: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSnowDepth: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var snowHeight: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSnowHeight: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var snowfall: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSnowfall: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var snowfallHeight: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.snowfallHeight.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSnowfallHeight: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.snowfallHeight.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var snowfallWaterEquivalent: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.snowfallWaterEquivalent.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSnowfallWaterEquivalent: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.snowfallWaterEquivalent.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture0To1cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To1cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture0To1cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture0To1cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture0To100cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To100cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture0To100cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture0To100cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture0To10cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture0To10cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture0To7cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To7cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture0To7cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture0To7cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture100To200cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture100To200cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture100To255cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture100To255cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture100To255cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture100To255cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture10To40cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture10To40cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture1To3cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture1To3cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture1To3cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture1To3cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture27To81cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture27To81cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture27To81cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture27To81cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture28To100cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture28To100cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture28To100cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture28To100cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture3To9cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture3To9cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture3To9cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture3To9cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture40To100cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture40To100cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture7To28cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture7To28cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture7To28cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture7To28cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoisture9To27cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture9To27cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoisture9To27cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoisture9To27cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoistureIndex0To100cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoistureIndex0To100cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoistureIndex0To7cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoistureIndex0To7cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoistureIndex100To255cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoistureIndex100To255cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoistureIndex28To100cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoistureIndex28To100cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilMoistureIndex7To28cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilMoistureIndex7To28cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature0To100cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To100cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature0To100cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature0To100cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature0To10cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature0To10cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature0To7cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To7cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature0To7cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature0To7cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature0cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature0cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature100To200cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature100To200cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature100To255cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature100To255cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature100To255cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature100To255cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature10To40cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature10To40cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature18cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature18cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature28To100cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature28To100cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature28To100cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature28To100cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature40To100cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature40To100cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature54cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature54cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature6cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature6cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var soilTemperature7To28cm: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature7To28cm.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSoilTemperature7To28cm: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.soilTemperature7To28cm.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var surfacePressure: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSurfacePressure: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var surfaceTemperature: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.surfaceTemperature.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSurfaceTemperature: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.surfaceTemperature.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature100m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature100m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature100m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature100m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature120m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature120m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature150m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature150m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature150m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature150m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature180m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature180m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature2m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature2m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature2m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature20m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature20m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature20m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature20m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature200m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature200m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature200m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature200m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature50m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature50m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature50m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature50m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature40m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature40m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature40m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature40m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature80m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTemperature80m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var terrestrialRadiation: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTerrestrialRadiation: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var terrestrialRadiationInstant: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTerrestrialRadiationInstant: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var totalColumnIntegratedWaterVapour: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.totalColumnIntegratedWaterVapour.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableTotalColumnIntegratedWaterVapour: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.totalColumnIntegratedWaterVapour.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var updraft: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.updraft.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUpdraft: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.updraft.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var uvIndex: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUvIndex: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var uvIndexClearSky: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableUvIndexClearSky: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var vaporPressureDeficit: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableVaporPressureDeficit: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var visibility: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableVisibility: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var weathercode: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWeathercode: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection100m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection100m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection100m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection100m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection10m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection10m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection120m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection120m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection150m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection150m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection150m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection150m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection180m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection180m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection200m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection200m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection200m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection200m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection20m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection20m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection20m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection20m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection40m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection40m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection40m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection40m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection50m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection50m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection50m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection50m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var winddirection80m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWinddirection80m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windgusts10m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindgusts10m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed100m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed100m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed100m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed100m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed10m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed10m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed120m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed120m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed150m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed150m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed150m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed150m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed180m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed180m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed200m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed200m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed200m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed200m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed20m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed20m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed20m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed20m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed40m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed40m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed40m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed40m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed50m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed50m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed50m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed50m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windspeed80m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindspeed80m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var wetBulbTemperature2m: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.wetBulbTemperature2m.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWetBulbTemperature2m: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.wetBulbTemperature2m.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public static func startWeatherCurrent(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 114) }
  public static func add(time: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: time, def: 0, at: VTOFFSET.time.p) }
  public static func add(interval: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: interval, def: 0, at: VTOFFSET.interval.p) }
  public static func add(apparentTemperature: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let apparentTemperature = apparentTemperature else { return }; fbb.create(struct: apparentTemperature, position: VTOFFSET.apparentTemperature.p) }
  public static func add(cape: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let cape = cape else { return }; fbb.create(struct: cape, position: VTOFFSET.cape.p) }
  public static func add(cloudcover: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let cloudcover = cloudcover else { return }; fbb.create(struct: cloudcover, position: VTOFFSET.cloudcover.p) }
  public static func add(cloudcoverHigh: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let cloudcoverHigh = cloudcoverHigh else { return }; fbb.create(struct: cloudcoverHigh, position: VTOFFSET.cloudcoverHigh.p) }
  public static func add(cloudcoverLow: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let cloudcoverLow = cloudcoverLow else { return }; fbb.create(struct: cloudcoverLow, position: VTOFFSET.cloudcoverLow.p) }
  public static func add(cloudcoverMid: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let cloudcoverMid = cloudcoverMid else { return }; fbb.create(struct: cloudcoverMid, position: VTOFFSET.cloudcoverMid.p) }
  public static func add(dewpoint2m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let dewpoint2m = dewpoint2m else { return }; fbb.create(struct: dewpoint2m, position: VTOFFSET.dewpoint2m.p) }
  public static func add(diffuseRadiation: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let diffuseRadiation = diffuseRadiation else { return }; fbb.create(struct: diffuseRadiation, position: VTOFFSET.diffuseRadiation.p) }
  public static func add(diffuseRadiationInstant: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let diffuseRadiationInstant = diffuseRadiationInstant else { return }; fbb.create(struct: diffuseRadiationInstant, position: VTOFFSET.diffuseRadiationInstant.p) }
  public static func add(directNormalIrradiance: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let directNormalIrradiance = directNormalIrradiance else { return }; fbb.create(struct: directNormalIrradiance, position: VTOFFSET.directNormalIrradiance.p) }
  public static func add(directNormalIrradianceInstant: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let directNormalIrradianceInstant = directNormalIrradianceInstant else { return }; fbb.create(struct: directNormalIrradianceInstant, position: VTOFFSET.directNormalIrradianceInstant.p) }
  public static func add(directRadiation: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let directRadiation = directRadiation else { return }; fbb.create(struct: directRadiation, position: VTOFFSET.directRadiation.p) }
  public static func add(directRadiationInstant: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let directRadiationInstant = directRadiationInstant else { return }; fbb.create(struct: directRadiationInstant, position: VTOFFSET.directRadiationInstant.p) }
  public static func add(et0FaoEvapotranspiration: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let et0FaoEvapotranspiration = et0FaoEvapotranspiration else { return }; fbb.create(struct: et0FaoEvapotranspiration, position: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(evapotranspiration: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let evapotranspiration = evapotranspiration else { return }; fbb.create(struct: evapotranspiration, position: VTOFFSET.evapotranspiration.p) }
  public static func add(freezinglevelHeight: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let freezinglevelHeight = freezinglevelHeight else { return }; fbb.create(struct: freezinglevelHeight, position: VTOFFSET.freezinglevelHeight.p) }
  public static func add(growingDegreeDaysBase0Limit50: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let growingDegreeDaysBase0Limit50 = growingDegreeDaysBase0Limit50 else { return }; fbb.create(struct: growingDegreeDaysBase0Limit50, position: VTOFFSET.growingDegreeDaysBase0Limit50.p) }
  public static func add(isDay: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let isDay = isDay else { return }; fbb.create(struct: isDay, position: VTOFFSET.isDay.p) }
  public static func add(latentHeatflux: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let latentHeatflux = latentHeatflux else { return }; fbb.create(struct: latentHeatflux, position: VTOFFSET.latentHeatflux.p) }
  public static func add(leafWetnessProbability: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let leafWetnessProbability = leafWetnessProbability else { return }; fbb.create(struct: leafWetnessProbability, position: VTOFFSET.leafWetnessProbability.p) }
  public static func add(liftedIndex: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let liftedIndex = liftedIndex else { return }; fbb.create(struct: liftedIndex, position: VTOFFSET.liftedIndex.p) }
  public static func add(lightningPotential: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let lightningPotential = lightningPotential else { return }; fbb.create(struct: lightningPotential, position: VTOFFSET.lightningPotential.p) }
  public static func add(precipitation: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let precipitation = precipitation else { return }; fbb.create(struct: precipitation, position: VTOFFSET.precipitation.p) }
  public static func add(precipitationProbability: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let precipitationProbability = precipitationProbability else { return }; fbb.create(struct: precipitationProbability, position: VTOFFSET.precipitationProbability.p) }
  public static func add(pressureMsl: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let pressureMsl = pressureMsl else { return }; fbb.create(struct: pressureMsl, position: VTOFFSET.pressureMsl.p) }
  public static func add(rain: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let rain = rain else { return }; fbb.create(struct: rain, position: VTOFFSET.rain.p) }
  public static func add(relativehumidity2m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let relativehumidity2m = relativehumidity2m else { return }; fbb.create(struct: relativehumidity2m, position: VTOFFSET.relativehumidity2m.p) }
  public static func add(runoff: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let runoff = runoff else { return }; fbb.create(struct: runoff, position: VTOFFSET.runoff.p) }
  public static func add(sensibleHeatflux: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let sensibleHeatflux = sensibleHeatflux else { return }; fbb.create(struct: sensibleHeatflux, position: VTOFFSET.sensibleHeatflux.p) }
  public static func add(shortwaveRadiation: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let shortwaveRadiation = shortwaveRadiation else { return }; fbb.create(struct: shortwaveRadiation, position: VTOFFSET.shortwaveRadiation.p) }
  public static func add(shortwaveRadiationInstant: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let shortwaveRadiationInstant = shortwaveRadiationInstant else { return }; fbb.create(struct: shortwaveRadiationInstant, position: VTOFFSET.shortwaveRadiationInstant.p) }
  public static func add(showers: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let showers = showers else { return }; fbb.create(struct: showers, position: VTOFFSET.showers.p) }
  public static func add(snowDepth: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let snowDepth = snowDepth else { return }; fbb.create(struct: snowDepth, position: VTOFFSET.snowDepth.p) }
  public static func add(snowHeight: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let snowHeight = snowHeight else { return }; fbb.create(struct: snowHeight, position: VTOFFSET.snowHeight.p) }
  public static func add(snowfall: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let snowfall = snowfall else { return }; fbb.create(struct: snowfall, position: VTOFFSET.snowfall.p) }
  public static func add(snowfallHeight: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let snowfallHeight = snowfallHeight else { return }; fbb.create(struct: snowfallHeight, position: VTOFFSET.snowfallHeight.p) }
  public static func add(snowfallWaterEquivalent: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let snowfallWaterEquivalent = snowfallWaterEquivalent else { return }; fbb.create(struct: snowfallWaterEquivalent, position: VTOFFSET.snowfallWaterEquivalent.p) }
  public static func add(soilMoisture0To1cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture0To1cm = soilMoisture0To1cm else { return }; fbb.create(struct: soilMoisture0To1cm, position: VTOFFSET.soilMoisture0To1cm.p) }
  public static func add(soilMoisture0To100cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture0To100cm = soilMoisture0To100cm else { return }; fbb.create(struct: soilMoisture0To100cm, position: VTOFFSET.soilMoisture0To100cm.p) }
  public static func add(soilMoisture0To10cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture0To10cm = soilMoisture0To10cm else { return }; fbb.create(struct: soilMoisture0To10cm, position: VTOFFSET.soilMoisture0To10cm.p) }
  public static func add(soilMoisture0To7cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture0To7cm = soilMoisture0To7cm else { return }; fbb.create(struct: soilMoisture0To7cm, position: VTOFFSET.soilMoisture0To7cm.p) }
  public static func add(soilMoisture100To200cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture100To200cm = soilMoisture100To200cm else { return }; fbb.create(struct: soilMoisture100To200cm, position: VTOFFSET.soilMoisture100To200cm.p) }
  public static func add(soilMoisture100To255cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture100To255cm = soilMoisture100To255cm else { return }; fbb.create(struct: soilMoisture100To255cm, position: VTOFFSET.soilMoisture100To255cm.p) }
  public static func add(soilMoisture10To40cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture10To40cm = soilMoisture10To40cm else { return }; fbb.create(struct: soilMoisture10To40cm, position: VTOFFSET.soilMoisture10To40cm.p) }
  public static func add(soilMoisture1To3cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture1To3cm = soilMoisture1To3cm else { return }; fbb.create(struct: soilMoisture1To3cm, position: VTOFFSET.soilMoisture1To3cm.p) }
  public static func add(soilMoisture27To81cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture27To81cm = soilMoisture27To81cm else { return }; fbb.create(struct: soilMoisture27To81cm, position: VTOFFSET.soilMoisture27To81cm.p) }
  public static func add(soilMoisture28To100cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture28To100cm = soilMoisture28To100cm else { return }; fbb.create(struct: soilMoisture28To100cm, position: VTOFFSET.soilMoisture28To100cm.p) }
  public static func add(soilMoisture3To9cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture3To9cm = soilMoisture3To9cm else { return }; fbb.create(struct: soilMoisture3To9cm, position: VTOFFSET.soilMoisture3To9cm.p) }
  public static func add(soilMoisture40To100cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture40To100cm = soilMoisture40To100cm else { return }; fbb.create(struct: soilMoisture40To100cm, position: VTOFFSET.soilMoisture40To100cm.p) }
  public static func add(soilMoisture7To28cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture7To28cm = soilMoisture7To28cm else { return }; fbb.create(struct: soilMoisture7To28cm, position: VTOFFSET.soilMoisture7To28cm.p) }
  public static func add(soilMoisture9To27cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoisture9To27cm = soilMoisture9To27cm else { return }; fbb.create(struct: soilMoisture9To27cm, position: VTOFFSET.soilMoisture9To27cm.p) }
  public static func add(soilMoistureIndex0To100cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoistureIndex0To100cm = soilMoistureIndex0To100cm else { return }; fbb.create(struct: soilMoistureIndex0To100cm, position: VTOFFSET.soilMoistureIndex0To100cm.p) }
  public static func add(soilMoistureIndex0To7cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoistureIndex0To7cm = soilMoistureIndex0To7cm else { return }; fbb.create(struct: soilMoistureIndex0To7cm, position: VTOFFSET.soilMoistureIndex0To7cm.p) }
  public static func add(soilMoistureIndex100To255cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoistureIndex100To255cm = soilMoistureIndex100To255cm else { return }; fbb.create(struct: soilMoistureIndex100To255cm, position: VTOFFSET.soilMoistureIndex100To255cm.p) }
  public static func add(soilMoistureIndex28To100cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoistureIndex28To100cm = soilMoistureIndex28To100cm else { return }; fbb.create(struct: soilMoistureIndex28To100cm, position: VTOFFSET.soilMoistureIndex28To100cm.p) }
  public static func add(soilMoistureIndex7To28cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilMoistureIndex7To28cm = soilMoistureIndex7To28cm else { return }; fbb.create(struct: soilMoistureIndex7To28cm, position: VTOFFSET.soilMoistureIndex7To28cm.p) }
  public static func add(soilTemperature0To100cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature0To100cm = soilTemperature0To100cm else { return }; fbb.create(struct: soilTemperature0To100cm, position: VTOFFSET.soilTemperature0To100cm.p) }
  public static func add(soilTemperature0To10cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature0To10cm = soilTemperature0To10cm else { return }; fbb.create(struct: soilTemperature0To10cm, position: VTOFFSET.soilTemperature0To10cm.p) }
  public static func add(soilTemperature0To7cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature0To7cm = soilTemperature0To7cm else { return }; fbb.create(struct: soilTemperature0To7cm, position: VTOFFSET.soilTemperature0To7cm.p) }
  public static func add(soilTemperature0cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature0cm = soilTemperature0cm else { return }; fbb.create(struct: soilTemperature0cm, position: VTOFFSET.soilTemperature0cm.p) }
  public static func add(soilTemperature100To200cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature100To200cm = soilTemperature100To200cm else { return }; fbb.create(struct: soilTemperature100To200cm, position: VTOFFSET.soilTemperature100To200cm.p) }
  public static func add(soilTemperature100To255cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature100To255cm = soilTemperature100To255cm else { return }; fbb.create(struct: soilTemperature100To255cm, position: VTOFFSET.soilTemperature100To255cm.p) }
  public static func add(soilTemperature10To40cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature10To40cm = soilTemperature10To40cm else { return }; fbb.create(struct: soilTemperature10To40cm, position: VTOFFSET.soilTemperature10To40cm.p) }
  public static func add(soilTemperature18cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature18cm = soilTemperature18cm else { return }; fbb.create(struct: soilTemperature18cm, position: VTOFFSET.soilTemperature18cm.p) }
  public static func add(soilTemperature28To100cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature28To100cm = soilTemperature28To100cm else { return }; fbb.create(struct: soilTemperature28To100cm, position: VTOFFSET.soilTemperature28To100cm.p) }
  public static func add(soilTemperature40To100cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature40To100cm = soilTemperature40To100cm else { return }; fbb.create(struct: soilTemperature40To100cm, position: VTOFFSET.soilTemperature40To100cm.p) }
  public static func add(soilTemperature54cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature54cm = soilTemperature54cm else { return }; fbb.create(struct: soilTemperature54cm, position: VTOFFSET.soilTemperature54cm.p) }
  public static func add(soilTemperature6cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature6cm = soilTemperature6cm else { return }; fbb.create(struct: soilTemperature6cm, position: VTOFFSET.soilTemperature6cm.p) }
  public static func add(soilTemperature7To28cm: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let soilTemperature7To28cm = soilTemperature7To28cm else { return }; fbb.create(struct: soilTemperature7To28cm, position: VTOFFSET.soilTemperature7To28cm.p) }
  public static func add(surfacePressure: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let surfacePressure = surfacePressure else { return }; fbb.create(struct: surfacePressure, position: VTOFFSET.surfacePressure.p) }
  public static func add(surfaceTemperature: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let surfaceTemperature = surfaceTemperature else { return }; fbb.create(struct: surfaceTemperature, position: VTOFFSET.surfaceTemperature.p) }
  public static func add(temperature100m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature100m = temperature100m else { return }; fbb.create(struct: temperature100m, position: VTOFFSET.temperature100m.p) }
  public static func add(temperature120m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature120m = temperature120m else { return }; fbb.create(struct: temperature120m, position: VTOFFSET.temperature120m.p) }
  public static func add(temperature150m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature150m = temperature150m else { return }; fbb.create(struct: temperature150m, position: VTOFFSET.temperature150m.p) }
  public static func add(temperature180m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature180m = temperature180m else { return }; fbb.create(struct: temperature180m, position: VTOFFSET.temperature180m.p) }
  public static func add(temperature2m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature2m = temperature2m else { return }; fbb.create(struct: temperature2m, position: VTOFFSET.temperature2m.p) }
  public static func add(temperature20m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature20m = temperature20m else { return }; fbb.create(struct: temperature20m, position: VTOFFSET.temperature20m.p) }
  public static func add(temperature200m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature200m = temperature200m else { return }; fbb.create(struct: temperature200m, position: VTOFFSET.temperature200m.p) }
  public static func add(temperature50m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature50m = temperature50m else { return }; fbb.create(struct: temperature50m, position: VTOFFSET.temperature50m.p) }
  public static func add(temperature40m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature40m = temperature40m else { return }; fbb.create(struct: temperature40m, position: VTOFFSET.temperature40m.p) }
  public static func add(temperature80m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let temperature80m = temperature80m else { return }; fbb.create(struct: temperature80m, position: VTOFFSET.temperature80m.p) }
  public static func add(terrestrialRadiation: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let terrestrialRadiation = terrestrialRadiation else { return }; fbb.create(struct: terrestrialRadiation, position: VTOFFSET.terrestrialRadiation.p) }
  public static func add(terrestrialRadiationInstant: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let terrestrialRadiationInstant = terrestrialRadiationInstant else { return }; fbb.create(struct: terrestrialRadiationInstant, position: VTOFFSET.terrestrialRadiationInstant.p) }
  public static func add(totalColumnIntegratedWaterVapour: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let totalColumnIntegratedWaterVapour = totalColumnIntegratedWaterVapour else { return }; fbb.create(struct: totalColumnIntegratedWaterVapour, position: VTOFFSET.totalColumnIntegratedWaterVapour.p) }
  public static func add(updraft: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let updraft = updraft else { return }; fbb.create(struct: updraft, position: VTOFFSET.updraft.p) }
  public static func add(uvIndex: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let uvIndex = uvIndex else { return }; fbb.create(struct: uvIndex, position: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let uvIndexClearSky = uvIndexClearSky else { return }; fbb.create(struct: uvIndexClearSky, position: VTOFFSET.uvIndexClearSky.p) }
  public static func add(vaporPressureDeficit: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let vaporPressureDeficit = vaporPressureDeficit else { return }; fbb.create(struct: vaporPressureDeficit, position: VTOFFSET.vaporPressureDeficit.p) }
  public static func add(visibility: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let visibility = visibility else { return }; fbb.create(struct: visibility, position: VTOFFSET.visibility.p) }
  public static func add(weathercode: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let weathercode = weathercode else { return }; fbb.create(struct: weathercode, position: VTOFFSET.weathercode.p) }
  public static func add(winddirection100m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection100m = winddirection100m else { return }; fbb.create(struct: winddirection100m, position: VTOFFSET.winddirection100m.p) }
  public static func add(winddirection10m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection10m = winddirection10m else { return }; fbb.create(struct: winddirection10m, position: VTOFFSET.winddirection10m.p) }
  public static func add(winddirection120m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection120m = winddirection120m else { return }; fbb.create(struct: winddirection120m, position: VTOFFSET.winddirection120m.p) }
  public static func add(winddirection150m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection150m = winddirection150m else { return }; fbb.create(struct: winddirection150m, position: VTOFFSET.winddirection150m.p) }
  public static func add(winddirection180m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection180m = winddirection180m else { return }; fbb.create(struct: winddirection180m, position: VTOFFSET.winddirection180m.p) }
  public static func add(winddirection200m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection200m = winddirection200m else { return }; fbb.create(struct: winddirection200m, position: VTOFFSET.winddirection200m.p) }
  public static func add(winddirection20m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection20m = winddirection20m else { return }; fbb.create(struct: winddirection20m, position: VTOFFSET.winddirection20m.p) }
  public static func add(winddirection40m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection40m = winddirection40m else { return }; fbb.create(struct: winddirection40m, position: VTOFFSET.winddirection40m.p) }
  public static func add(winddirection50m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection50m = winddirection50m else { return }; fbb.create(struct: winddirection50m, position: VTOFFSET.winddirection50m.p) }
  public static func add(winddirection80m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let winddirection80m = winddirection80m else { return }; fbb.create(struct: winddirection80m, position: VTOFFSET.winddirection80m.p) }
  public static func add(windgusts10m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windgusts10m = windgusts10m else { return }; fbb.create(struct: windgusts10m, position: VTOFFSET.windgusts10m.p) }
  public static func add(windspeed100m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed100m = windspeed100m else { return }; fbb.create(struct: windspeed100m, position: VTOFFSET.windspeed100m.p) }
  public static func add(windspeed10m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed10m = windspeed10m else { return }; fbb.create(struct: windspeed10m, position: VTOFFSET.windspeed10m.p) }
  public static func add(windspeed120m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed120m = windspeed120m else { return }; fbb.create(struct: windspeed120m, position: VTOFFSET.windspeed120m.p) }
  public static func add(windspeed150m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed150m = windspeed150m else { return }; fbb.create(struct: windspeed150m, position: VTOFFSET.windspeed150m.p) }
  public static func add(windspeed180m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed180m = windspeed180m else { return }; fbb.create(struct: windspeed180m, position: VTOFFSET.windspeed180m.p) }
  public static func add(windspeed200m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed200m = windspeed200m else { return }; fbb.create(struct: windspeed200m, position: VTOFFSET.windspeed200m.p) }
  public static func add(windspeed20m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed20m = windspeed20m else { return }; fbb.create(struct: windspeed20m, position: VTOFFSET.windspeed20m.p) }
  public static func add(windspeed40m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed40m = windspeed40m else { return }; fbb.create(struct: windspeed40m, position: VTOFFSET.windspeed40m.p) }
  public static func add(windspeed50m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed50m = windspeed50m else { return }; fbb.create(struct: windspeed50m, position: VTOFFSET.windspeed50m.p) }
  public static func add(windspeed80m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windspeed80m = windspeed80m else { return }; fbb.create(struct: windspeed80m, position: VTOFFSET.windspeed80m.p) }
  public static func add(wetBulbTemperature2m: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let wetBulbTemperature2m = wetBulbTemperature2m else { return }; fbb.create(struct: wetBulbTemperature2m, position: VTOFFSET.wetBulbTemperature2m.p) }
  public static func endWeatherCurrent(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherCurrent(
    _ fbb: inout FlatBufferBuilder,
    time: Int64 = 0,
    interval: Int32 = 0,
    apparentTemperature: com_openmeteo_ValueAndUnit? = nil,
    cape: com_openmeteo_ValueAndUnit? = nil,
    cloudcover: com_openmeteo_ValueAndUnit? = nil,
    cloudcoverHigh: com_openmeteo_ValueAndUnit? = nil,
    cloudcoverLow: com_openmeteo_ValueAndUnit? = nil,
    cloudcoverMid: com_openmeteo_ValueAndUnit? = nil,
    dewpoint2m: com_openmeteo_ValueAndUnit? = nil,
    diffuseRadiation: com_openmeteo_ValueAndUnit? = nil,
    diffuseRadiationInstant: com_openmeteo_ValueAndUnit? = nil,
    directNormalIrradiance: com_openmeteo_ValueAndUnit? = nil,
    directNormalIrradianceInstant: com_openmeteo_ValueAndUnit? = nil,
    directRadiation: com_openmeteo_ValueAndUnit? = nil,
    directRadiationInstant: com_openmeteo_ValueAndUnit? = nil,
    et0FaoEvapotranspiration: com_openmeteo_ValueAndUnit? = nil,
    evapotranspiration: com_openmeteo_ValueAndUnit? = nil,
    freezinglevelHeight: com_openmeteo_ValueAndUnit? = nil,
    growingDegreeDaysBase0Limit50: com_openmeteo_ValueAndUnit? = nil,
    isDay: com_openmeteo_ValueAndUnit? = nil,
    latentHeatflux: com_openmeteo_ValueAndUnit? = nil,
    leafWetnessProbability: com_openmeteo_ValueAndUnit? = nil,
    liftedIndex: com_openmeteo_ValueAndUnit? = nil,
    lightningPotential: com_openmeteo_ValueAndUnit? = nil,
    precipitation: com_openmeteo_ValueAndUnit? = nil,
    precipitationProbability: com_openmeteo_ValueAndUnit? = nil,
    pressureMsl: com_openmeteo_ValueAndUnit? = nil,
    rain: com_openmeteo_ValueAndUnit? = nil,
    relativehumidity2m: com_openmeteo_ValueAndUnit? = nil,
    runoff: com_openmeteo_ValueAndUnit? = nil,
    sensibleHeatflux: com_openmeteo_ValueAndUnit? = nil,
    shortwaveRadiation: com_openmeteo_ValueAndUnit? = nil,
    shortwaveRadiationInstant: com_openmeteo_ValueAndUnit? = nil,
    showers: com_openmeteo_ValueAndUnit? = nil,
    snowDepth: com_openmeteo_ValueAndUnit? = nil,
    snowHeight: com_openmeteo_ValueAndUnit? = nil,
    snowfall: com_openmeteo_ValueAndUnit? = nil,
    snowfallHeight: com_openmeteo_ValueAndUnit? = nil,
    snowfallWaterEquivalent: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture0To1cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture0To100cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture0To10cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture0To7cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture100To200cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture100To255cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture10To40cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture1To3cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture27To81cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture28To100cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture3To9cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture40To100cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture7To28cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoisture9To27cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoistureIndex0To100cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoistureIndex0To7cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoistureIndex100To255cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoistureIndex28To100cm: com_openmeteo_ValueAndUnit? = nil,
    soilMoistureIndex7To28cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature0To100cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature0To10cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature0To7cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature0cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature100To200cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature100To255cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature10To40cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature18cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature28To100cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature40To100cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature54cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature6cm: com_openmeteo_ValueAndUnit? = nil,
    soilTemperature7To28cm: com_openmeteo_ValueAndUnit? = nil,
    surfacePressure: com_openmeteo_ValueAndUnit? = nil,
    surfaceTemperature: com_openmeteo_ValueAndUnit? = nil,
    temperature100m: com_openmeteo_ValueAndUnit? = nil,
    temperature120m: com_openmeteo_ValueAndUnit? = nil,
    temperature150m: com_openmeteo_ValueAndUnit? = nil,
    temperature180m: com_openmeteo_ValueAndUnit? = nil,
    temperature2m: com_openmeteo_ValueAndUnit? = nil,
    temperature20m: com_openmeteo_ValueAndUnit? = nil,
    temperature200m: com_openmeteo_ValueAndUnit? = nil,
    temperature50m: com_openmeteo_ValueAndUnit? = nil,
    temperature40m: com_openmeteo_ValueAndUnit? = nil,
    temperature80m: com_openmeteo_ValueAndUnit? = nil,
    terrestrialRadiation: com_openmeteo_ValueAndUnit? = nil,
    terrestrialRadiationInstant: com_openmeteo_ValueAndUnit? = nil,
    totalColumnIntegratedWaterVapour: com_openmeteo_ValueAndUnit? = nil,
    updraft: com_openmeteo_ValueAndUnit? = nil,
    uvIndex: com_openmeteo_ValueAndUnit? = nil,
    uvIndexClearSky: com_openmeteo_ValueAndUnit? = nil,
    vaporPressureDeficit: com_openmeteo_ValueAndUnit? = nil,
    visibility: com_openmeteo_ValueAndUnit? = nil,
    weathercode: com_openmeteo_ValueAndUnit? = nil,
    winddirection100m: com_openmeteo_ValueAndUnit? = nil,
    winddirection10m: com_openmeteo_ValueAndUnit? = nil,
    winddirection120m: com_openmeteo_ValueAndUnit? = nil,
    winddirection150m: com_openmeteo_ValueAndUnit? = nil,
    winddirection180m: com_openmeteo_ValueAndUnit? = nil,
    winddirection200m: com_openmeteo_ValueAndUnit? = nil,
    winddirection20m: com_openmeteo_ValueAndUnit? = nil,
    winddirection40m: com_openmeteo_ValueAndUnit? = nil,
    winddirection50m: com_openmeteo_ValueAndUnit? = nil,
    winddirection80m: com_openmeteo_ValueAndUnit? = nil,
    windgusts10m: com_openmeteo_ValueAndUnit? = nil,
    windspeed100m: com_openmeteo_ValueAndUnit? = nil,
    windspeed10m: com_openmeteo_ValueAndUnit? = nil,
    windspeed120m: com_openmeteo_ValueAndUnit? = nil,
    windspeed150m: com_openmeteo_ValueAndUnit? = nil,
    windspeed180m: com_openmeteo_ValueAndUnit? = nil,
    windspeed200m: com_openmeteo_ValueAndUnit? = nil,
    windspeed20m: com_openmeteo_ValueAndUnit? = nil,
    windspeed40m: com_openmeteo_ValueAndUnit? = nil,
    windspeed50m: com_openmeteo_ValueAndUnit? = nil,
    windspeed80m: com_openmeteo_ValueAndUnit? = nil,
    wetBulbTemperature2m: com_openmeteo_ValueAndUnit? = nil
  ) -> Offset {
    let __start = com_openmeteo_WeatherCurrent.startWeatherCurrent(&fbb)
    com_openmeteo_WeatherCurrent.add(time: time, &fbb)
    com_openmeteo_WeatherCurrent.add(interval: interval, &fbb)
    com_openmeteo_WeatherCurrent.add(apparentTemperature: apparentTemperature, &fbb)
    com_openmeteo_WeatherCurrent.add(cape: cape, &fbb)
    com_openmeteo_WeatherCurrent.add(cloudcover: cloudcover, &fbb)
    com_openmeteo_WeatherCurrent.add(cloudcoverHigh: cloudcoverHigh, &fbb)
    com_openmeteo_WeatherCurrent.add(cloudcoverLow: cloudcoverLow, &fbb)
    com_openmeteo_WeatherCurrent.add(cloudcoverMid: cloudcoverMid, &fbb)
    com_openmeteo_WeatherCurrent.add(dewpoint2m: dewpoint2m, &fbb)
    com_openmeteo_WeatherCurrent.add(diffuseRadiation: diffuseRadiation, &fbb)
    com_openmeteo_WeatherCurrent.add(diffuseRadiationInstant: diffuseRadiationInstant, &fbb)
    com_openmeteo_WeatherCurrent.add(directNormalIrradiance: directNormalIrradiance, &fbb)
    com_openmeteo_WeatherCurrent.add(directNormalIrradianceInstant: directNormalIrradianceInstant, &fbb)
    com_openmeteo_WeatherCurrent.add(directRadiation: directRadiation, &fbb)
    com_openmeteo_WeatherCurrent.add(directRadiationInstant: directRadiationInstant, &fbb)
    com_openmeteo_WeatherCurrent.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_WeatherCurrent.add(evapotranspiration: evapotranspiration, &fbb)
    com_openmeteo_WeatherCurrent.add(freezinglevelHeight: freezinglevelHeight, &fbb)
    com_openmeteo_WeatherCurrent.add(growingDegreeDaysBase0Limit50: growingDegreeDaysBase0Limit50, &fbb)
    com_openmeteo_WeatherCurrent.add(isDay: isDay, &fbb)
    com_openmeteo_WeatherCurrent.add(latentHeatflux: latentHeatflux, &fbb)
    com_openmeteo_WeatherCurrent.add(leafWetnessProbability: leafWetnessProbability, &fbb)
    com_openmeteo_WeatherCurrent.add(liftedIndex: liftedIndex, &fbb)
    com_openmeteo_WeatherCurrent.add(lightningPotential: lightningPotential, &fbb)
    com_openmeteo_WeatherCurrent.add(precipitation: precipitation, &fbb)
    com_openmeteo_WeatherCurrent.add(precipitationProbability: precipitationProbability, &fbb)
    com_openmeteo_WeatherCurrent.add(pressureMsl: pressureMsl, &fbb)
    com_openmeteo_WeatherCurrent.add(rain: rain, &fbb)
    com_openmeteo_WeatherCurrent.add(relativehumidity2m: relativehumidity2m, &fbb)
    com_openmeteo_WeatherCurrent.add(runoff: runoff, &fbb)
    com_openmeteo_WeatherCurrent.add(sensibleHeatflux: sensibleHeatflux, &fbb)
    com_openmeteo_WeatherCurrent.add(shortwaveRadiation: shortwaveRadiation, &fbb)
    com_openmeteo_WeatherCurrent.add(shortwaveRadiationInstant: shortwaveRadiationInstant, &fbb)
    com_openmeteo_WeatherCurrent.add(showers: showers, &fbb)
    com_openmeteo_WeatherCurrent.add(snowDepth: snowDepth, &fbb)
    com_openmeteo_WeatherCurrent.add(snowHeight: snowHeight, &fbb)
    com_openmeteo_WeatherCurrent.add(snowfall: snowfall, &fbb)
    com_openmeteo_WeatherCurrent.add(snowfallHeight: snowfallHeight, &fbb)
    com_openmeteo_WeatherCurrent.add(snowfallWaterEquivalent: snowfallWaterEquivalent, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture0To1cm: soilMoisture0To1cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture0To100cm: soilMoisture0To100cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture0To10cm: soilMoisture0To10cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture0To7cm: soilMoisture0To7cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture100To200cm: soilMoisture100To200cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture100To255cm: soilMoisture100To255cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture10To40cm: soilMoisture10To40cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture1To3cm: soilMoisture1To3cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture27To81cm: soilMoisture27To81cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture28To100cm: soilMoisture28To100cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture3To9cm: soilMoisture3To9cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture40To100cm: soilMoisture40To100cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture7To28cm: soilMoisture7To28cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoisture9To27cm: soilMoisture9To27cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoistureIndex0To100cm: soilMoistureIndex0To100cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoistureIndex0To7cm: soilMoistureIndex0To7cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoistureIndex100To255cm: soilMoistureIndex100To255cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoistureIndex28To100cm: soilMoistureIndex28To100cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilMoistureIndex7To28cm: soilMoistureIndex7To28cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature0To100cm: soilTemperature0To100cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature0To10cm: soilTemperature0To10cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature0To7cm: soilTemperature0To7cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature0cm: soilTemperature0cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature100To200cm: soilTemperature100To200cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature100To255cm: soilTemperature100To255cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature10To40cm: soilTemperature10To40cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature18cm: soilTemperature18cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature28To100cm: soilTemperature28To100cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature40To100cm: soilTemperature40To100cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature54cm: soilTemperature54cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature6cm: soilTemperature6cm, &fbb)
    com_openmeteo_WeatherCurrent.add(soilTemperature7To28cm: soilTemperature7To28cm, &fbb)
    com_openmeteo_WeatherCurrent.add(surfacePressure: surfacePressure, &fbb)
    com_openmeteo_WeatherCurrent.add(surfaceTemperature: surfaceTemperature, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature100m: temperature100m, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature120m: temperature120m, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature150m: temperature150m, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature180m: temperature180m, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature2m: temperature2m, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature20m: temperature20m, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature200m: temperature200m, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature50m: temperature50m, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature40m: temperature40m, &fbb)
    com_openmeteo_WeatherCurrent.add(temperature80m: temperature80m, &fbb)
    com_openmeteo_WeatherCurrent.add(terrestrialRadiation: terrestrialRadiation, &fbb)
    com_openmeteo_WeatherCurrent.add(terrestrialRadiationInstant: terrestrialRadiationInstant, &fbb)
    com_openmeteo_WeatherCurrent.add(totalColumnIntegratedWaterVapour: totalColumnIntegratedWaterVapour, &fbb)
    com_openmeteo_WeatherCurrent.add(updraft: updraft, &fbb)
    com_openmeteo_WeatherCurrent.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_WeatherCurrent.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_WeatherCurrent.add(vaporPressureDeficit: vaporPressureDeficit, &fbb)
    com_openmeteo_WeatherCurrent.add(visibility: visibility, &fbb)
    com_openmeteo_WeatherCurrent.add(weathercode: weathercode, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection100m: winddirection100m, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection10m: winddirection10m, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection120m: winddirection120m, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection150m: winddirection150m, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection180m: winddirection180m, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection200m: winddirection200m, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection20m: winddirection20m, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection40m: winddirection40m, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection50m: winddirection50m, &fbb)
    com_openmeteo_WeatherCurrent.add(winddirection80m: winddirection80m, &fbb)
    com_openmeteo_WeatherCurrent.add(windgusts10m: windgusts10m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed100m: windspeed100m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed10m: windspeed10m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed120m: windspeed120m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed150m: windspeed150m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed180m: windspeed180m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed200m: windspeed200m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed20m: windspeed20m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed40m: windspeed40m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed50m: windspeed50m, &fbb)
    com_openmeteo_WeatherCurrent.add(windspeed80m: windspeed80m, &fbb)
    com_openmeteo_WeatherCurrent.add(wetBulbTemperature2m: wetBulbTemperature2m, &fbb)
    return com_openmeteo_WeatherCurrent.endWeatherCurrent(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.interval.p, fieldName: "interval", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.apparentTemperature.p, fieldName: "apparentTemperature", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.cape.p, fieldName: "cape", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.cloudcover.p, fieldName: "cloudcover", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.cloudcoverHigh.p, fieldName: "cloudcoverHigh", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.cloudcoverLow.p, fieldName: "cloudcoverLow", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.cloudcoverMid.p, fieldName: "cloudcoverMid", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.dewpoint2m.p, fieldName: "dewpoint2m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.diffuseRadiation.p, fieldName: "diffuseRadiation", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.diffuseRadiationInstant.p, fieldName: "diffuseRadiationInstant", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.directNormalIrradiance.p, fieldName: "directNormalIrradiance", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.directNormalIrradianceInstant.p, fieldName: "directNormalIrradianceInstant", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.directRadiation.p, fieldName: "directRadiation", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.directRadiationInstant.p, fieldName: "directRadiationInstant", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.evapotranspiration.p, fieldName: "evapotranspiration", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.freezinglevelHeight.p, fieldName: "freezinglevelHeight", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.growingDegreeDaysBase0Limit50.p, fieldName: "growingDegreeDaysBase0Limit50", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.latentHeatflux.p, fieldName: "latentHeatflux", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.leafWetnessProbability.p, fieldName: "leafWetnessProbability", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.liftedIndex.p, fieldName: "liftedIndex", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.lightningPotential.p, fieldName: "lightningPotential", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.precipitation.p, fieldName: "precipitation", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.precipitationProbability.p, fieldName: "precipitationProbability", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.pressureMsl.p, fieldName: "pressureMsl", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.rain.p, fieldName: "rain", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.relativehumidity2m.p, fieldName: "relativehumidity2m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.runoff.p, fieldName: "runoff", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.sensibleHeatflux.p, fieldName: "sensibleHeatflux", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiation.p, fieldName: "shortwaveRadiation", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationInstant.p, fieldName: "shortwaveRadiationInstant", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.showers.p, fieldName: "showers", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.snowDepth.p, fieldName: "snowDepth", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.snowHeight.p, fieldName: "snowHeight", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.snowfall.p, fieldName: "snowfall", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.snowfallHeight.p, fieldName: "snowfallHeight", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.snowfallWaterEquivalent.p, fieldName: "snowfallWaterEquivalent", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To1cm.p, fieldName: "soilMoisture0To1cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To100cm.p, fieldName: "soilMoisture0To100cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To10cm.p, fieldName: "soilMoisture0To10cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To7cm.p, fieldName: "soilMoisture0To7cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To200cm.p, fieldName: "soilMoisture100To200cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To255cm.p, fieldName: "soilMoisture100To255cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture10To40cm.p, fieldName: "soilMoisture10To40cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture1To3cm.p, fieldName: "soilMoisture1To3cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture27To81cm.p, fieldName: "soilMoisture27To81cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture28To100cm.p, fieldName: "soilMoisture28To100cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture3To9cm.p, fieldName: "soilMoisture3To9cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture40To100cm.p, fieldName: "soilMoisture40To100cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture7To28cm.p, fieldName: "soilMoisture7To28cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture9To27cm.p, fieldName: "soilMoisture9To27cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To100cm.p, fieldName: "soilMoistureIndex0To100cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To7cm.p, fieldName: "soilMoistureIndex0To7cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex100To255cm.p, fieldName: "soilMoistureIndex100To255cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex28To100cm.p, fieldName: "soilMoistureIndex28To100cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex7To28cm.p, fieldName: "soilMoistureIndex7To28cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To100cm.p, fieldName: "soilTemperature0To100cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To10cm.p, fieldName: "soilTemperature0To10cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To7cm.p, fieldName: "soilTemperature0To7cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature0cm.p, fieldName: "soilTemperature0cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To200cm.p, fieldName: "soilTemperature100To200cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To255cm.p, fieldName: "soilTemperature100To255cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature10To40cm.p, fieldName: "soilTemperature10To40cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature18cm.p, fieldName: "soilTemperature18cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature28To100cm.p, fieldName: "soilTemperature28To100cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature40To100cm.p, fieldName: "soilTemperature40To100cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature54cm.p, fieldName: "soilTemperature54cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature6cm.p, fieldName: "soilTemperature6cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature7To28cm.p, fieldName: "soilTemperature7To28cm", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.surfacePressure.p, fieldName: "surfacePressure", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.surfaceTemperature.p, fieldName: "surfaceTemperature", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature100m.p, fieldName: "temperature100m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature120m.p, fieldName: "temperature120m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature150m.p, fieldName: "temperature150m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature180m.p, fieldName: "temperature180m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature2m.p, fieldName: "temperature2m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature20m.p, fieldName: "temperature20m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature200m.p, fieldName: "temperature200m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature50m.p, fieldName: "temperature50m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature40m.p, fieldName: "temperature40m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.temperature80m.p, fieldName: "temperature80m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiation.p, fieldName: "terrestrialRadiation", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiationInstant.p, fieldName: "terrestrialRadiationInstant", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.totalColumnIntegratedWaterVapour.p, fieldName: "totalColumnIntegratedWaterVapour", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.updraft.p, fieldName: "updraft", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.vaporPressureDeficit.p, fieldName: "vaporPressureDeficit", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.visibility.p, fieldName: "visibility", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection100m.p, fieldName: "winddirection100m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection10m.p, fieldName: "winddirection10m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection120m.p, fieldName: "winddirection120m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection150m.p, fieldName: "winddirection150m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection180m.p, fieldName: "winddirection180m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection200m.p, fieldName: "winddirection200m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection20m.p, fieldName: "winddirection20m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection40m.p, fieldName: "winddirection40m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection50m.p, fieldName: "winddirection50m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.winddirection80m.p, fieldName: "winddirection80m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windgusts10m.p, fieldName: "windgusts10m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed100m.p, fieldName: "windspeed100m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed10m.p, fieldName: "windspeed10m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed120m.p, fieldName: "windspeed120m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed150m.p, fieldName: "windspeed150m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed180m.p, fieldName: "windspeed180m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed200m.p, fieldName: "windspeed200m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed20m.p, fieldName: "windspeed20m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed40m.p, fieldName: "windspeed40m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed50m.p, fieldName: "windspeed50m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windspeed80m.p, fieldName: "windspeed80m", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.wetBulbTemperature2m.p, fieldName: "wetBulbTemperature2m", required: false, type: com_openmeteo_ValueAndUnit.self)
    _v.finish()
  }
}

public struct com_openmeteo_WeatherDaily: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case apparentTemperatureMax = 6
    case apparentTemperatureMean = 8
    case apparentTemperatureMin = 10
    case capeMax = 12
    case capeMean = 14
    case capeMin = 16
    case cloudcoverMax = 18
    case cloudcoverMean = 20
    case cloudcoverMin = 22
    case dewpoint2mMax = 24
    case dewpoint2mMean = 26
    case dewpoint2mMin = 28
    case et0FaoEvapotranspiration = 30
    case et0FaoEvapotranspirationSum = 32
    case growingDegreeDaysBase0Limit50 = 34
    case leafWetnessProbabilityMean = 36
    case precipitationHours = 38
    case precipitationProbabilityMax = 40
    case precipitationProbabilityMean = 42
    case precipitationProbabilityMin = 44
    case precipitationSum = 46
    case pressureMslMax = 48
    case pressureMslMean = 50
    case pressureMslMin = 52
    case rainSum = 54
    case relativeHumidity2mMax = 56
    case relativeHumidity2mMean = 58
    case relativeHumidity2mMin = 60
    case shortwaveRadiationSum = 62
    case showersSum = 64
    case snowfallSum = 66
    case snowfallWaterEquivalentSum = 68
    case soilMoisture0To100cmMean = 70
    case soilMoisture0To10cmMean = 72
    case soilMoisture0To7cmMean = 74
    case soilMoisture28To100cmMean = 76
    case soilMoisture7To28cmMean = 78
    case soilMoistureIndex0To100cmMean = 80
    case soilMoistureIndex0To7cmMean = 82
    case soilMoistureIndex100To255cmMean = 84
    case soilMoistureIndex28To100cmMean = 86
    case soilMoistureIndex7To28cmMean = 88
    case soilTemperature0To100cmMean = 90
    case soilTemperature0To7cmMean = 92
    case soilTemperature28To100cmMean = 94
    case soilTemperature7To28cmMean = 96
    case sunrise = 98
    case sunset = 100
    case surfacePressureMax = 102
    case surfacePressureMean = 104
    case surfacePressureMin = 106
    case temperature2mMax = 108
    case temperature2mMean = 110
    case temperature2mMin = 112
    case updraftMax = 114
    case uvIndexClearSkyMax = 116
    case uvIndexMax = 118
    case vaporPressureDeficitMax = 120
    case visibilityMax = 122
    case visibilityMean = 124
    case visibilityMin = 126
    case weathercode = 128
    case winddirection10mDominant = 130
    case windgusts10mMax = 132
    case windgusts10mMean = 134
    case windgusts10mMin = 136
    case windspeed10mMax = 138
    case windspeed10mMean = 140
    case windspeed10mMin = 142
    case wetBulbTemperature2mMax = 144
    case wetBulbTemperature2mMean = 146
    case wetBulbTemperature2mMin = 148
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var apparentTemperatureMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint2mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint2mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint2mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint2mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint2mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint2mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var et0FaoEvapotranspiration: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var et0FaoEvapotranspirationSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspirationSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var growingDegreeDaysBase0Limit50: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var leafWetnessProbabilityMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.leafWetnessProbabilityMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationHours: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationHours.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var rainSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.rainSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativeHumidity2mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativeHumidity2mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativeHumidity2mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativeHumidity2mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativeHumidity2mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativeHumidity2mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiationSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var showersSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.showersSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfallSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfallSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfallWaterEquivalentSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfallWaterEquivalentSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To100cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To100cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To10cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To7cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To7cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture28To100cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture28To100cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture7To28cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture7To28cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To100cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To7cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex100To255cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex28To100cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex7To28cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0To100cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To100cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0To7cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To7cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature28To100cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature28To100cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature7To28cmMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature7To28cmMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hasSunrise: Bool { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? false : true }
  public var sunriseCount: Int32 { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sunrise(at index: Int32) -> Int64 { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? 0 : _accessor.directRead(of: Int64.self, offset: _accessor.vector(at: o) + index * 8) }
  public var sunrise: [Int64] { return _accessor.getVector(at: VTOFFSET.sunrise.v) ?? [] }
  public var hasSunset: Bool { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? false : true }
  public var sunsetCount: Int32 { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sunset(at index: Int32) -> Int64 { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? 0 : _accessor.directRead(of: Int64.self, offset: _accessor.vector(at: o) + index * 8) }
  public var sunset: [Int64] { return _accessor.getVector(at: VTOFFSET.sunset.v) ?? [] }
  public var surfacePressureMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var updraftMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.updraftMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSkyMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSkyMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var vaporPressureDeficitMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.vaporPressureDeficitMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var weathercode: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10mDominant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10mDominant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var wetBulbTemperature2mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.wetBulbTemperature2mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var wetBulbTemperature2mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.wetBulbTemperature2mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var wetBulbTemperature2mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.wetBulbTemperature2mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherDaily(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 73) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(apparentTemperatureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMax, at: VTOFFSET.apparentTemperatureMax.p) }
  public static func add(apparentTemperatureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMean, at: VTOFFSET.apparentTemperatureMean.p) }
  public static func add(apparentTemperatureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMin, at: VTOFFSET.apparentTemperatureMin.p) }
  public static func add(capeMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMax, at: VTOFFSET.capeMax.p) }
  public static func add(capeMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMean, at: VTOFFSET.capeMean.p) }
  public static func add(capeMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMin, at: VTOFFSET.capeMin.p) }
  public static func add(cloudcoverMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMax, at: VTOFFSET.cloudcoverMax.p) }
  public static func add(cloudcoverMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMean, at: VTOFFSET.cloudcoverMean.p) }
  public static func add(cloudcoverMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMin, at: VTOFFSET.cloudcoverMin.p) }
  public static func add(dewpoint2mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint2mMax, at: VTOFFSET.dewpoint2mMax.p) }
  public static func add(dewpoint2mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint2mMean, at: VTOFFSET.dewpoint2mMean.p) }
  public static func add(dewpoint2mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint2mMin, at: VTOFFSET.dewpoint2mMin.p) }
  public static func add(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(et0FaoEvapotranspirationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspirationSum, at: VTOFFSET.et0FaoEvapotranspirationSum.p) }
  public static func add(growingDegreeDaysBase0Limit50: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: growingDegreeDaysBase0Limit50, at: VTOFFSET.growingDegreeDaysBase0Limit50.p) }
  public static func add(leafWetnessProbabilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: leafWetnessProbabilityMean, at: VTOFFSET.leafWetnessProbabilityMean.p) }
  public static func add(precipitationHours: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationHours, at: VTOFFSET.precipitationHours.p) }
  public static func add(precipitationProbabilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMax, at: VTOFFSET.precipitationProbabilityMax.p) }
  public static func add(precipitationProbabilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMean, at: VTOFFSET.precipitationProbabilityMean.p) }
  public static func add(precipitationProbabilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMin, at: VTOFFSET.precipitationProbabilityMin.p) }
  public static func add(precipitationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationSum, at: VTOFFSET.precipitationSum.p) }
  public static func add(pressureMslMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMax, at: VTOFFSET.pressureMslMax.p) }
  public static func add(pressureMslMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMean, at: VTOFFSET.pressureMslMean.p) }
  public static func add(pressureMslMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMin, at: VTOFFSET.pressureMslMin.p) }
  public static func add(rainSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rainSum, at: VTOFFSET.rainSum.p) }
  public static func add(relativeHumidity2mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativeHumidity2mMax, at: VTOFFSET.relativeHumidity2mMax.p) }
  public static func add(relativeHumidity2mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativeHumidity2mMean, at: VTOFFSET.relativeHumidity2mMean.p) }
  public static func add(relativeHumidity2mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativeHumidity2mMin, at: VTOFFSET.relativeHumidity2mMin.p) }
  public static func add(shortwaveRadiationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationSum, at: VTOFFSET.shortwaveRadiationSum.p) }
  public static func add(showersSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showersSum, at: VTOFFSET.showersSum.p) }
  public static func add(snowfallSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfallSum, at: VTOFFSET.snowfallSum.p) }
  public static func add(snowfallWaterEquivalentSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfallWaterEquivalentSum, at: VTOFFSET.snowfallWaterEquivalentSum.p) }
  public static func add(soilMoisture0To100cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To100cmMean, at: VTOFFSET.soilMoisture0To100cmMean.p) }
  public static func add(soilMoisture0To10cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To10cmMean, at: VTOFFSET.soilMoisture0To10cmMean.p) }
  public static func add(soilMoisture0To7cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To7cmMean, at: VTOFFSET.soilMoisture0To7cmMean.p) }
  public static func add(soilMoisture28To100cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture28To100cmMean, at: VTOFFSET.soilMoisture28To100cmMean.p) }
  public static func add(soilMoisture7To28cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture7To28cmMean, at: VTOFFSET.soilMoisture7To28cmMean.p) }
  public static func add(soilMoistureIndex0To100cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To100cmMean, at: VTOFFSET.soilMoistureIndex0To100cmMean.p) }
  public static func add(soilMoistureIndex0To7cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To7cmMean, at: VTOFFSET.soilMoistureIndex0To7cmMean.p) }
  public static func add(soilMoistureIndex100To255cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex100To255cmMean, at: VTOFFSET.soilMoistureIndex100To255cmMean.p) }
  public static func add(soilMoistureIndex28To100cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex28To100cmMean, at: VTOFFSET.soilMoistureIndex28To100cmMean.p) }
  public static func add(soilMoistureIndex7To28cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex7To28cmMean, at: VTOFFSET.soilMoistureIndex7To28cmMean.p) }
  public static func add(soilTemperature0To100cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To100cmMean, at: VTOFFSET.soilTemperature0To100cmMean.p) }
  public static func add(soilTemperature0To7cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To7cmMean, at: VTOFFSET.soilTemperature0To7cmMean.p) }
  public static func add(soilTemperature28To100cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature28To100cmMean, at: VTOFFSET.soilTemperature28To100cmMean.p) }
  public static func add(soilTemperature7To28cmMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature7To28cmMean, at: VTOFFSET.soilTemperature7To28cmMean.p) }
  public static func addVectorOf(sunrise: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunrise, at: VTOFFSET.sunrise.p) }
  public static func addVectorOf(sunset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunset, at: VTOFFSET.sunset.p) }
  public static func add(surfacePressureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMax, at: VTOFFSET.surfacePressureMax.p) }
  public static func add(surfacePressureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMean, at: VTOFFSET.surfacePressureMean.p) }
  public static func add(surfacePressureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMin, at: VTOFFSET.surfacePressureMin.p) }
  public static func add(temperature2mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMax, at: VTOFFSET.temperature2mMax.p) }
  public static func add(temperature2mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMean, at: VTOFFSET.temperature2mMean.p) }
  public static func add(temperature2mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMin, at: VTOFFSET.temperature2mMin.p) }
  public static func add(updraftMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updraftMax, at: VTOFFSET.updraftMax.p) }
  public static func add(uvIndexClearSkyMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSkyMax, at: VTOFFSET.uvIndexClearSkyMax.p) }
  public static func add(uvIndexMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexMax, at: VTOFFSET.uvIndexMax.p) }
  public static func add(vaporPressureDeficitMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vaporPressureDeficitMax, at: VTOFFSET.vaporPressureDeficitMax.p) }
  public static func add(visibilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMax, at: VTOFFSET.visibilityMax.p) }
  public static func add(visibilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMean, at: VTOFFSET.visibilityMean.p) }
  public static func add(visibilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMin, at: VTOFFSET.visibilityMin.p) }
  public static func add(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func add(winddirection10mDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10mDominant, at: VTOFFSET.winddirection10mDominant.p) }
  public static func add(windgusts10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMax, at: VTOFFSET.windgusts10mMax.p) }
  public static func add(windgusts10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMean, at: VTOFFSET.windgusts10mMean.p) }
  public static func add(windgusts10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMin, at: VTOFFSET.windgusts10mMin.p) }
  public static func add(windspeed10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMax, at: VTOFFSET.windspeed10mMax.p) }
  public static func add(windspeed10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMean, at: VTOFFSET.windspeed10mMean.p) }
  public static func add(windspeed10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMin, at: VTOFFSET.windspeed10mMin.p) }
  public static func add(wetBulbTemperature2mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wetBulbTemperature2mMax, at: VTOFFSET.wetBulbTemperature2mMax.p) }
  public static func add(wetBulbTemperature2mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wetBulbTemperature2mMean, at: VTOFFSET.wetBulbTemperature2mMean.p) }
  public static func add(wetBulbTemperature2mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wetBulbTemperature2mMin, at: VTOFFSET.wetBulbTemperature2mMin.p) }
  public static func endWeatherDaily(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createWeatherDaily(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    apparentTemperatureMaxOffset apparentTemperatureMax: Offset = Offset(),
    apparentTemperatureMeanOffset apparentTemperatureMean: Offset = Offset(),
    apparentTemperatureMinOffset apparentTemperatureMin: Offset = Offset(),
    capeMaxOffset capeMax: Offset = Offset(),
    capeMeanOffset capeMean: Offset = Offset(),
    capeMinOffset capeMin: Offset = Offset(),
    cloudcoverMaxOffset cloudcoverMax: Offset = Offset(),
    cloudcoverMeanOffset cloudcoverMean: Offset = Offset(),
    cloudcoverMinOffset cloudcoverMin: Offset = Offset(),
    dewpoint2mMaxOffset dewpoint2mMax: Offset = Offset(),
    dewpoint2mMeanOffset dewpoint2mMean: Offset = Offset(),
    dewpoint2mMinOffset dewpoint2mMin: Offset = Offset(),
    et0FaoEvapotranspirationOffset et0FaoEvapotranspiration: Offset = Offset(),
    et0FaoEvapotranspirationSumOffset et0FaoEvapotranspirationSum: Offset = Offset(),
    growingDegreeDaysBase0Limit50Offset growingDegreeDaysBase0Limit50: Offset = Offset(),
    leafWetnessProbabilityMeanOffset leafWetnessProbabilityMean: Offset = Offset(),
    precipitationHoursOffset precipitationHours: Offset = Offset(),
    precipitationProbabilityMaxOffset precipitationProbabilityMax: Offset = Offset(),
    precipitationProbabilityMeanOffset precipitationProbabilityMean: Offset = Offset(),
    precipitationProbabilityMinOffset precipitationProbabilityMin: Offset = Offset(),
    precipitationSumOffset precipitationSum: Offset = Offset(),
    pressureMslMaxOffset pressureMslMax: Offset = Offset(),
    pressureMslMeanOffset pressureMslMean: Offset = Offset(),
    pressureMslMinOffset pressureMslMin: Offset = Offset(),
    rainSumOffset rainSum: Offset = Offset(),
    relativeHumidity2mMaxOffset relativeHumidity2mMax: Offset = Offset(),
    relativeHumidity2mMeanOffset relativeHumidity2mMean: Offset = Offset(),
    relativeHumidity2mMinOffset relativeHumidity2mMin: Offset = Offset(),
    shortwaveRadiationSumOffset shortwaveRadiationSum: Offset = Offset(),
    showersSumOffset showersSum: Offset = Offset(),
    snowfallSumOffset snowfallSum: Offset = Offset(),
    snowfallWaterEquivalentSumOffset snowfallWaterEquivalentSum: Offset = Offset(),
    soilMoisture0To100cmMeanOffset soilMoisture0To100cmMean: Offset = Offset(),
    soilMoisture0To10cmMeanOffset soilMoisture0To10cmMean: Offset = Offset(),
    soilMoisture0To7cmMeanOffset soilMoisture0To7cmMean: Offset = Offset(),
    soilMoisture28To100cmMeanOffset soilMoisture28To100cmMean: Offset = Offset(),
    soilMoisture7To28cmMeanOffset soilMoisture7To28cmMean: Offset = Offset(),
    soilMoistureIndex0To100cmMeanOffset soilMoistureIndex0To100cmMean: Offset = Offset(),
    soilMoistureIndex0To7cmMeanOffset soilMoistureIndex0To7cmMean: Offset = Offset(),
    soilMoistureIndex100To255cmMeanOffset soilMoistureIndex100To255cmMean: Offset = Offset(),
    soilMoistureIndex28To100cmMeanOffset soilMoistureIndex28To100cmMean: Offset = Offset(),
    soilMoistureIndex7To28cmMeanOffset soilMoistureIndex7To28cmMean: Offset = Offset(),
    soilTemperature0To100cmMeanOffset soilTemperature0To100cmMean: Offset = Offset(),
    soilTemperature0To7cmMeanOffset soilTemperature0To7cmMean: Offset = Offset(),
    soilTemperature28To100cmMeanOffset soilTemperature28To100cmMean: Offset = Offset(),
    soilTemperature7To28cmMeanOffset soilTemperature7To28cmMean: Offset = Offset(),
    sunriseVectorOffset sunrise: Offset = Offset(),
    sunsetVectorOffset sunset: Offset = Offset(),
    surfacePressureMaxOffset surfacePressureMax: Offset = Offset(),
    surfacePressureMeanOffset surfacePressureMean: Offset = Offset(),
    surfacePressureMinOffset surfacePressureMin: Offset = Offset(),
    temperature2mMaxOffset temperature2mMax: Offset = Offset(),
    temperature2mMeanOffset temperature2mMean: Offset = Offset(),
    temperature2mMinOffset temperature2mMin: Offset = Offset(),
    updraftMaxOffset updraftMax: Offset = Offset(),
    uvIndexClearSkyMaxOffset uvIndexClearSkyMax: Offset = Offset(),
    uvIndexMaxOffset uvIndexMax: Offset = Offset(),
    vaporPressureDeficitMaxOffset vaporPressureDeficitMax: Offset = Offset(),
    visibilityMaxOffset visibilityMax: Offset = Offset(),
    visibilityMeanOffset visibilityMean: Offset = Offset(),
    visibilityMinOffset visibilityMin: Offset = Offset(),
    weathercodeOffset weathercode: Offset = Offset(),
    winddirection10mDominantOffset winddirection10mDominant: Offset = Offset(),
    windgusts10mMaxOffset windgusts10mMax: Offset = Offset(),
    windgusts10mMeanOffset windgusts10mMean: Offset = Offset(),
    windgusts10mMinOffset windgusts10mMin: Offset = Offset(),
    windspeed10mMaxOffset windspeed10mMax: Offset = Offset(),
    windspeed10mMeanOffset windspeed10mMean: Offset = Offset(),
    windspeed10mMinOffset windspeed10mMin: Offset = Offset(),
    wetBulbTemperature2mMaxOffset wetBulbTemperature2mMax: Offset = Offset(),
    wetBulbTemperature2mMeanOffset wetBulbTemperature2mMean: Offset = Offset(),
    wetBulbTemperature2mMinOffset wetBulbTemperature2mMin: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_WeatherDaily.startWeatherDaily(&fbb)
    com_openmeteo_WeatherDaily.add(time: time, &fbb)
    com_openmeteo_WeatherDaily.add(apparentTemperatureMax: apparentTemperatureMax, &fbb)
    com_openmeteo_WeatherDaily.add(apparentTemperatureMean: apparentTemperatureMean, &fbb)
    com_openmeteo_WeatherDaily.add(apparentTemperatureMin: apparentTemperatureMin, &fbb)
    com_openmeteo_WeatherDaily.add(capeMax: capeMax, &fbb)
    com_openmeteo_WeatherDaily.add(capeMean: capeMean, &fbb)
    com_openmeteo_WeatherDaily.add(capeMin: capeMin, &fbb)
    com_openmeteo_WeatherDaily.add(cloudcoverMax: cloudcoverMax, &fbb)
    com_openmeteo_WeatherDaily.add(cloudcoverMean: cloudcoverMean, &fbb)
    com_openmeteo_WeatherDaily.add(cloudcoverMin: cloudcoverMin, &fbb)
    com_openmeteo_WeatherDaily.add(dewpoint2mMax: dewpoint2mMax, &fbb)
    com_openmeteo_WeatherDaily.add(dewpoint2mMean: dewpoint2mMean, &fbb)
    com_openmeteo_WeatherDaily.add(dewpoint2mMin: dewpoint2mMin, &fbb)
    com_openmeteo_WeatherDaily.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_WeatherDaily.add(et0FaoEvapotranspirationSum: et0FaoEvapotranspirationSum, &fbb)
    com_openmeteo_WeatherDaily.add(growingDegreeDaysBase0Limit50: growingDegreeDaysBase0Limit50, &fbb)
    com_openmeteo_WeatherDaily.add(leafWetnessProbabilityMean: leafWetnessProbabilityMean, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationHours: precipitationHours, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationProbabilityMax: precipitationProbabilityMax, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationProbabilityMean: precipitationProbabilityMean, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationProbabilityMin: precipitationProbabilityMin, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationSum: precipitationSum, &fbb)
    com_openmeteo_WeatherDaily.add(pressureMslMax: pressureMslMax, &fbb)
    com_openmeteo_WeatherDaily.add(pressureMslMean: pressureMslMean, &fbb)
    com_openmeteo_WeatherDaily.add(pressureMslMin: pressureMslMin, &fbb)
    com_openmeteo_WeatherDaily.add(rainSum: rainSum, &fbb)
    com_openmeteo_WeatherDaily.add(relativeHumidity2mMax: relativeHumidity2mMax, &fbb)
    com_openmeteo_WeatherDaily.add(relativeHumidity2mMean: relativeHumidity2mMean, &fbb)
    com_openmeteo_WeatherDaily.add(relativeHumidity2mMin: relativeHumidity2mMin, &fbb)
    com_openmeteo_WeatherDaily.add(shortwaveRadiationSum: shortwaveRadiationSum, &fbb)
    com_openmeteo_WeatherDaily.add(showersSum: showersSum, &fbb)
    com_openmeteo_WeatherDaily.add(snowfallSum: snowfallSum, &fbb)
    com_openmeteo_WeatherDaily.add(snowfallWaterEquivalentSum: snowfallWaterEquivalentSum, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoisture0To100cmMean: soilMoisture0To100cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoisture0To10cmMean: soilMoisture0To10cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoisture0To7cmMean: soilMoisture0To7cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoisture28To100cmMean: soilMoisture28To100cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoisture7To28cmMean: soilMoisture7To28cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoistureIndex0To100cmMean: soilMoistureIndex0To100cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoistureIndex0To7cmMean: soilMoistureIndex0To7cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoistureIndex100To255cmMean: soilMoistureIndex100To255cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoistureIndex28To100cmMean: soilMoistureIndex28To100cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilMoistureIndex7To28cmMean: soilMoistureIndex7To28cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilTemperature0To100cmMean: soilTemperature0To100cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilTemperature0To7cmMean: soilTemperature0To7cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilTemperature28To100cmMean: soilTemperature28To100cmMean, &fbb)
    com_openmeteo_WeatherDaily.add(soilTemperature7To28cmMean: soilTemperature7To28cmMean, &fbb)
    com_openmeteo_WeatherDaily.addVectorOf(sunrise: sunrise, &fbb)
    com_openmeteo_WeatherDaily.addVectorOf(sunset: sunset, &fbb)
    com_openmeteo_WeatherDaily.add(surfacePressureMax: surfacePressureMax, &fbb)
    com_openmeteo_WeatherDaily.add(surfacePressureMean: surfacePressureMean, &fbb)
    com_openmeteo_WeatherDaily.add(surfacePressureMin: surfacePressureMin, &fbb)
    com_openmeteo_WeatherDaily.add(temperature2mMax: temperature2mMax, &fbb)
    com_openmeteo_WeatherDaily.add(temperature2mMean: temperature2mMean, &fbb)
    com_openmeteo_WeatherDaily.add(temperature2mMin: temperature2mMin, &fbb)
    com_openmeteo_WeatherDaily.add(updraftMax: updraftMax, &fbb)
    com_openmeteo_WeatherDaily.add(uvIndexClearSkyMax: uvIndexClearSkyMax, &fbb)
    com_openmeteo_WeatherDaily.add(uvIndexMax: uvIndexMax, &fbb)
    com_openmeteo_WeatherDaily.add(vaporPressureDeficitMax: vaporPressureDeficitMax, &fbb)
    com_openmeteo_WeatherDaily.add(visibilityMax: visibilityMax, &fbb)
    com_openmeteo_WeatherDaily.add(visibilityMean: visibilityMean, &fbb)
    com_openmeteo_WeatherDaily.add(visibilityMin: visibilityMin, &fbb)
    com_openmeteo_WeatherDaily.add(weathercode: weathercode, &fbb)
    com_openmeteo_WeatherDaily.add(winddirection10mDominant: winddirection10mDominant, &fbb)
    com_openmeteo_WeatherDaily.add(windgusts10mMax: windgusts10mMax, &fbb)
    com_openmeteo_WeatherDaily.add(windgusts10mMean: windgusts10mMean, &fbb)
    com_openmeteo_WeatherDaily.add(windgusts10mMin: windgusts10mMin, &fbb)
    com_openmeteo_WeatherDaily.add(windspeed10mMax: windspeed10mMax, &fbb)
    com_openmeteo_WeatherDaily.add(windspeed10mMean: windspeed10mMean, &fbb)
    com_openmeteo_WeatherDaily.add(windspeed10mMin: windspeed10mMin, &fbb)
    com_openmeteo_WeatherDaily.add(wetBulbTemperature2mMax: wetBulbTemperature2mMax, &fbb)
    com_openmeteo_WeatherDaily.add(wetBulbTemperature2mMean: wetBulbTemperature2mMean, &fbb)
    com_openmeteo_WeatherDaily.add(wetBulbTemperature2mMin: wetBulbTemperature2mMin, &fbb)
    return com_openmeteo_WeatherDaily.endWeatherDaily(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMax.p, fieldName: "apparentTemperatureMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMean.p, fieldName: "apparentTemperatureMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMin.p, fieldName: "apparentTemperatureMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMax.p, fieldName: "capeMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMean.p, fieldName: "capeMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMin.p, fieldName: "capeMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMax.p, fieldName: "cloudcoverMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMean.p, fieldName: "cloudcoverMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMin.p, fieldName: "cloudcoverMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint2mMax.p, fieldName: "dewpoint2mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint2mMean.p, fieldName: "dewpoint2mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint2mMin.p, fieldName: "dewpoint2mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspirationSum.p, fieldName: "et0FaoEvapotranspirationSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.growingDegreeDaysBase0Limit50.p, fieldName: "growingDegreeDaysBase0Limit50", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.leafWetnessProbabilityMean.p, fieldName: "leafWetnessProbabilityMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationHours.p, fieldName: "precipitationHours", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMax.p, fieldName: "precipitationProbabilityMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMean.p, fieldName: "precipitationProbabilityMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMin.p, fieldName: "precipitationProbabilityMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationSum.p, fieldName: "precipitationSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMax.p, fieldName: "pressureMslMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMean.p, fieldName: "pressureMslMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMin.p, fieldName: "pressureMslMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.rainSum.p, fieldName: "rainSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativeHumidity2mMax.p, fieldName: "relativeHumidity2mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativeHumidity2mMean.p, fieldName: "relativeHumidity2mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativeHumidity2mMin.p, fieldName: "relativeHumidity2mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationSum.p, fieldName: "shortwaveRadiationSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.showersSum.p, fieldName: "showersSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfallSum.p, fieldName: "snowfallSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfallWaterEquivalentSum.p, fieldName: "snowfallWaterEquivalentSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To100cmMean.p, fieldName: "soilMoisture0To100cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To10cmMean.p, fieldName: "soilMoisture0To10cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To7cmMean.p, fieldName: "soilMoisture0To7cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture28To100cmMean.p, fieldName: "soilMoisture28To100cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture7To28cmMean.p, fieldName: "soilMoisture7To28cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To100cmMean.p, fieldName: "soilMoistureIndex0To100cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To7cmMean.p, fieldName: "soilMoistureIndex0To7cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex100To255cmMean.p, fieldName: "soilMoistureIndex100To255cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex28To100cmMean.p, fieldName: "soilMoistureIndex28To100cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex7To28cmMean.p, fieldName: "soilMoistureIndex7To28cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To100cmMean.p, fieldName: "soilTemperature0To100cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To7cmMean.p, fieldName: "soilTemperature0To7cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature28To100cmMean.p, fieldName: "soilTemperature28To100cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature7To28cmMean.p, fieldName: "soilTemperature7To28cmMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sunrise.p, fieldName: "sunrise", required: false, type: ForwardOffset<Vector<Int64, Int64>>.self)
    try _v.visit(field: VTOFFSET.sunset.p, fieldName: "sunset", required: false, type: ForwardOffset<Vector<Int64, Int64>>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMax.p, fieldName: "surfacePressureMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMean.p, fieldName: "surfacePressureMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMin.p, fieldName: "surfacePressureMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2mMax.p, fieldName: "temperature2mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2mMean.p, fieldName: "temperature2mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2mMin.p, fieldName: "temperature2mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.updraftMax.p, fieldName: "updraftMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSkyMax.p, fieldName: "uvIndexClearSkyMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexMax.p, fieldName: "uvIndexMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.vaporPressureDeficitMax.p, fieldName: "vaporPressureDeficitMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMax.p, fieldName: "visibilityMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMean.p, fieldName: "visibilityMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMin.p, fieldName: "visibilityMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection10mDominant.p, fieldName: "winddirection10mDominant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMax.p, fieldName: "windgusts10mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMean.p, fieldName: "windgusts10mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMin.p, fieldName: "windgusts10mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMax.p, fieldName: "windspeed10mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMean.p, fieldName: "windspeed10mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMin.p, fieldName: "windspeed10mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.wetBulbTemperature2mMax.p, fieldName: "wetBulbTemperature2mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.wetBulbTemperature2mMean.p, fieldName: "wetBulbTemperature2mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.wetBulbTemperature2mMin.p, fieldName: "wetBulbTemperature2mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_WeatherApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case generationtimeMs = 12
    case utcOffsetSeconds = 14
    case timezone = 16
    case timezoneAbbreviation = 18
    case daily = 20
    case hourly = 22
    case sixHourly = 24
    case minutely15 = 26
    case current = 28
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: com_openmeteo_WeatherModel { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? .undefined : com_openmeteo_WeatherModel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var daily: com_openmeteo_WeatherDaily? { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? nil : com_openmeteo_WeatherDaily(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hourly: com_openmeteo_WeatherHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sixHourly: com_openmeteo_WeatherHourly? { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? nil : com_openmeteo_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var minutely15: com_openmeteo_WeatherHourly? { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? nil : com_openmeteo_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var current: com_openmeteo_WeatherCurrent? { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? nil : com_openmeteo_WeatherCurrent(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 13) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: com_openmeteo_WeatherModel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: model.rawValue, def: 0, at: VTOFFSET.model.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(daily: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: daily, at: VTOFFSET.daily.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func add(sixHourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sixHourly, at: VTOFFSET.sixHourly.p) }
  public static func add(minutely15: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: minutely15, at: VTOFFSET.minutely15.p) }
  public static func add(current: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: current, at: VTOFFSET.current.p) }
  public static func endWeatherApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    model: com_openmeteo_WeatherModel = .undefined,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    dailyOffset daily: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset(),
    sixHourlyOffset sixHourly: Offset = Offset(),
    minutely15Offset minutely15: Offset = Offset(),
    currentOffset current: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_WeatherApi.startWeatherApi(&fbb)
    com_openmeteo_WeatherApi.add(latitude: latitude, &fbb)
    com_openmeteo_WeatherApi.add(longitude: longitude, &fbb)
    com_openmeteo_WeatherApi.add(elevation: elevation, &fbb)
    com_openmeteo_WeatherApi.add(model: model, &fbb)
    com_openmeteo_WeatherApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_WeatherApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_WeatherApi.add(timezone: timezone, &fbb)
    com_openmeteo_WeatherApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_WeatherApi.add(daily: daily, &fbb)
    com_openmeteo_WeatherApi.add(hourly: hourly, &fbb)
    com_openmeteo_WeatherApi.add(sixHourly: sixHourly, &fbb)
    com_openmeteo_WeatherApi.add(minutely15: minutely15, &fbb)
    com_openmeteo_WeatherApi.add(current: current, &fbb)
    return com_openmeteo_WeatherApi.endWeatherApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: com_openmeteo_WeatherModel.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.daily.p, fieldName: "daily", required: false, type: ForwardOffset<com_openmeteo_WeatherDaily>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.sixHourly.p, fieldName: "sixHourly", required: false, type: ForwardOffset<com_openmeteo_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.minutely15.p, fieldName: "minutely15", required: false, type: ForwardOffset<com_openmeteo_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.current.p, fieldName: "current", required: false, type: ForwardOffset<com_openmeteo_WeatherCurrent>.self)
    _v.finish()
  }
}

