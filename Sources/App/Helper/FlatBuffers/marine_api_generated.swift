// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum com_openmeteo_MarineModel: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case bestMatch = 0
  case gwam = 1
  case ewam = 2

  public static var max: com_openmeteo_MarineModel { return .ewam }
  public static var min: com_openmeteo_MarineModel { return .bestMatch }
}


public struct com_openmeteo_MarineHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case waveHeight = 6
    case wavePeriod = 8
    case waveDirection = 10
    case windWaveHeight = 12
    case windWavePeriod = 14
    case windWavePeakPeriod = 16
    case windWaveDirection = 18
    case swellWaveHeight = 20
    case swellWavePeriod = 22
    case swellWavePeakPeriod = 24
    case swellWaveDirection = 26
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var waveHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.waveHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var wavePeriod: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.wavePeriod.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var waveDirection: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.waveDirection.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWaveHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWavePeriod: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeriod.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWavePeakPeriod: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeakPeriod.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWaveDirection: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveDirection.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWaveHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWavePeriod: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeriod.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWavePeakPeriod: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriod.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWaveDirection: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveDirection.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startMarineHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 12) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(waveHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveHeight, at: VTOFFSET.waveHeight.p) }
  public static func add(wavePeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wavePeriod, at: VTOFFSET.wavePeriod.p) }
  public static func add(waveDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveDirection, at: VTOFFSET.waveDirection.p) }
  public static func add(windWaveHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveHeight, at: VTOFFSET.windWaveHeight.p) }
  public static func add(windWavePeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeriod, at: VTOFFSET.windWavePeriod.p) }
  public static func add(windWavePeakPeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeakPeriod, at: VTOFFSET.windWavePeakPeriod.p) }
  public static func add(windWaveDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveDirection, at: VTOFFSET.windWaveDirection.p) }
  public static func add(swellWaveHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveHeight, at: VTOFFSET.swellWaveHeight.p) }
  public static func add(swellWavePeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeriod, at: VTOFFSET.swellWavePeriod.p) }
  public static func add(swellWavePeakPeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeakPeriod, at: VTOFFSET.swellWavePeakPeriod.p) }
  public static func add(swellWaveDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveDirection, at: VTOFFSET.swellWaveDirection.p) }
  public static func endMarineHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createMarineHourly(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    waveHeightOffset waveHeight: Offset = Offset(),
    wavePeriodOffset wavePeriod: Offset = Offset(),
    waveDirectionOffset waveDirection: Offset = Offset(),
    windWaveHeightOffset windWaveHeight: Offset = Offset(),
    windWavePeriodOffset windWavePeriod: Offset = Offset(),
    windWavePeakPeriodOffset windWavePeakPeriod: Offset = Offset(),
    windWaveDirectionOffset windWaveDirection: Offset = Offset(),
    swellWaveHeightOffset swellWaveHeight: Offset = Offset(),
    swellWavePeriodOffset swellWavePeriod: Offset = Offset(),
    swellWavePeakPeriodOffset swellWavePeakPeriod: Offset = Offset(),
    swellWaveDirectionOffset swellWaveDirection: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_MarineHourly.startMarineHourly(&fbb)
    com_openmeteo_MarineHourly.add(time: time, &fbb)
    com_openmeteo_MarineHourly.add(waveHeight: waveHeight, &fbb)
    com_openmeteo_MarineHourly.add(wavePeriod: wavePeriod, &fbb)
    com_openmeteo_MarineHourly.add(waveDirection: waveDirection, &fbb)
    com_openmeteo_MarineHourly.add(windWaveHeight: windWaveHeight, &fbb)
    com_openmeteo_MarineHourly.add(windWavePeriod: windWavePeriod, &fbb)
    com_openmeteo_MarineHourly.add(windWavePeakPeriod: windWavePeakPeriod, &fbb)
    com_openmeteo_MarineHourly.add(windWaveDirection: windWaveDirection, &fbb)
    com_openmeteo_MarineHourly.add(swellWaveHeight: swellWaveHeight, &fbb)
    com_openmeteo_MarineHourly.add(swellWavePeriod: swellWavePeriod, &fbb)
    com_openmeteo_MarineHourly.add(swellWavePeakPeriod: swellWavePeakPeriod, &fbb)
    com_openmeteo_MarineHourly.add(swellWaveDirection: swellWaveDirection, &fbb)
    return com_openmeteo_MarineHourly.endMarineHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.waveHeight.p, fieldName: "waveHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.wavePeriod.p, fieldName: "wavePeriod", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.waveDirection.p, fieldName: "waveDirection", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWaveHeight.p, fieldName: "windWaveHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWavePeriod.p, fieldName: "windWavePeriod", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWavePeakPeriod.p, fieldName: "windWavePeakPeriod", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWaveDirection.p, fieldName: "windWaveDirection", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWaveHeight.p, fieldName: "swellWaveHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWavePeriod.p, fieldName: "swellWavePeriod", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWavePeakPeriod.p, fieldName: "swellWavePeakPeriod", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWaveDirection.p, fieldName: "swellWaveDirection", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_MarineCurrent: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case interval = 6
    case waveHeight = 8
    case wavePeriod = 10
    case waveDirection = 12
    case windWaveHeight = 14
    case windWavePeriod = 16
    case windWavePeakPeriod = 18
    case windWaveDirection = 20
    case swellWaveHeight = 22
    case swellWavePeriod = 24
    case swellWavePeakPeriod = 26
    case swellWaveDirection = 28
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: Int64 { let o = _accessor.offset(VTOFFSET.time.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var interval: Int32 { let o = _accessor.offset(VTOFFSET.interval.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var waveHeight: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.waveHeight.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWaveHeight: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.waveHeight.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var wavePeriod: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.wavePeriod.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWavePeriod: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.wavePeriod.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var waveDirection: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.waveDirection.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWaveDirection: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.waveDirection.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windWaveHeight: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveHeight.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindWaveHeight: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windWaveHeight.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windWavePeriod: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeriod.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindWavePeriod: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windWavePeriod.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windWavePeakPeriod: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeakPeriod.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindWavePeakPeriod: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windWavePeakPeriod.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var windWaveDirection: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveDirection.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableWindWaveDirection: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.windWaveDirection.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var swellWaveHeight: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveHeight.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSwellWaveHeight: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.swellWaveHeight.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var swellWavePeriod: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeriod.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSwellWavePeriod: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.swellWavePeriod.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var swellWavePeakPeriod: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriod.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSwellWavePeakPeriod: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriod.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var swellWaveDirection: com_openmeteo_ValueAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveDirection.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_ValueAndUnit.self, at: o) }
  public var mutableSwellWaveDirection: com_openmeteo_ValueAndUnit_Mutable? { let o = _accessor.offset(VTOFFSET.swellWaveDirection.v); return o == 0 ? nil : com_openmeteo_ValueAndUnit_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public static func startMarineCurrent(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 13) }
  public static func add(time: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: time, def: 0, at: VTOFFSET.time.p) }
  public static func add(interval: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: interval, def: 0, at: VTOFFSET.interval.p) }
  public static func add(waveHeight: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let waveHeight = waveHeight else { return }; fbb.create(struct: waveHeight, position: VTOFFSET.waveHeight.p) }
  public static func add(wavePeriod: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let wavePeriod = wavePeriod else { return }; fbb.create(struct: wavePeriod, position: VTOFFSET.wavePeriod.p) }
  public static func add(waveDirection: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let waveDirection = waveDirection else { return }; fbb.create(struct: waveDirection, position: VTOFFSET.waveDirection.p) }
  public static func add(windWaveHeight: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windWaveHeight = windWaveHeight else { return }; fbb.create(struct: windWaveHeight, position: VTOFFSET.windWaveHeight.p) }
  public static func add(windWavePeriod: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windWavePeriod = windWavePeriod else { return }; fbb.create(struct: windWavePeriod, position: VTOFFSET.windWavePeriod.p) }
  public static func add(windWavePeakPeriod: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windWavePeakPeriod = windWavePeakPeriod else { return }; fbb.create(struct: windWavePeakPeriod, position: VTOFFSET.windWavePeakPeriod.p) }
  public static func add(windWaveDirection: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let windWaveDirection = windWaveDirection else { return }; fbb.create(struct: windWaveDirection, position: VTOFFSET.windWaveDirection.p) }
  public static func add(swellWaveHeight: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let swellWaveHeight = swellWaveHeight else { return }; fbb.create(struct: swellWaveHeight, position: VTOFFSET.swellWaveHeight.p) }
  public static func add(swellWavePeriod: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let swellWavePeriod = swellWavePeriod else { return }; fbb.create(struct: swellWavePeriod, position: VTOFFSET.swellWavePeriod.p) }
  public static func add(swellWavePeakPeriod: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let swellWavePeakPeriod = swellWavePeakPeriod else { return }; fbb.create(struct: swellWavePeakPeriod, position: VTOFFSET.swellWavePeakPeriod.p) }
  public static func add(swellWaveDirection: com_openmeteo_ValueAndUnit?, _ fbb: inout FlatBufferBuilder) { guard let swellWaveDirection = swellWaveDirection else { return }; fbb.create(struct: swellWaveDirection, position: VTOFFSET.swellWaveDirection.p) }
  public static func endMarineCurrent(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineCurrent(
    _ fbb: inout FlatBufferBuilder,
    time: Int64 = 0,
    interval: Int32 = 0,
    waveHeight: com_openmeteo_ValueAndUnit? = nil,
    wavePeriod: com_openmeteo_ValueAndUnit? = nil,
    waveDirection: com_openmeteo_ValueAndUnit? = nil,
    windWaveHeight: com_openmeteo_ValueAndUnit? = nil,
    windWavePeriod: com_openmeteo_ValueAndUnit? = nil,
    windWavePeakPeriod: com_openmeteo_ValueAndUnit? = nil,
    windWaveDirection: com_openmeteo_ValueAndUnit? = nil,
    swellWaveHeight: com_openmeteo_ValueAndUnit? = nil,
    swellWavePeriod: com_openmeteo_ValueAndUnit? = nil,
    swellWavePeakPeriod: com_openmeteo_ValueAndUnit? = nil,
    swellWaveDirection: com_openmeteo_ValueAndUnit? = nil
  ) -> Offset {
    let __start = com_openmeteo_MarineCurrent.startMarineCurrent(&fbb)
    com_openmeteo_MarineCurrent.add(time: time, &fbb)
    com_openmeteo_MarineCurrent.add(interval: interval, &fbb)
    com_openmeteo_MarineCurrent.add(waveHeight: waveHeight, &fbb)
    com_openmeteo_MarineCurrent.add(wavePeriod: wavePeriod, &fbb)
    com_openmeteo_MarineCurrent.add(waveDirection: waveDirection, &fbb)
    com_openmeteo_MarineCurrent.add(windWaveHeight: windWaveHeight, &fbb)
    com_openmeteo_MarineCurrent.add(windWavePeriod: windWavePeriod, &fbb)
    com_openmeteo_MarineCurrent.add(windWavePeakPeriod: windWavePeakPeriod, &fbb)
    com_openmeteo_MarineCurrent.add(windWaveDirection: windWaveDirection, &fbb)
    com_openmeteo_MarineCurrent.add(swellWaveHeight: swellWaveHeight, &fbb)
    com_openmeteo_MarineCurrent.add(swellWavePeriod: swellWavePeriod, &fbb)
    com_openmeteo_MarineCurrent.add(swellWavePeakPeriod: swellWavePeakPeriod, &fbb)
    com_openmeteo_MarineCurrent.add(swellWaveDirection: swellWaveDirection, &fbb)
    return com_openmeteo_MarineCurrent.endMarineCurrent(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.interval.p, fieldName: "interval", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.waveHeight.p, fieldName: "waveHeight", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.wavePeriod.p, fieldName: "wavePeriod", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.waveDirection.p, fieldName: "waveDirection", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windWaveHeight.p, fieldName: "windWaveHeight", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windWavePeriod.p, fieldName: "windWavePeriod", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windWavePeakPeriod.p, fieldName: "windWavePeakPeriod", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.windWaveDirection.p, fieldName: "windWaveDirection", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.swellWaveHeight.p, fieldName: "swellWaveHeight", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.swellWavePeriod.p, fieldName: "swellWavePeriod", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.swellWavePeakPeriod.p, fieldName: "swellWavePeakPeriod", required: false, type: com_openmeteo_ValueAndUnit.self)
    try _v.visit(field: VTOFFSET.swellWaveDirection.p, fieldName: "swellWaveDirection", required: false, type: com_openmeteo_ValueAndUnit.self)
    _v.finish()
  }
}

public struct com_openmeteo_MarineDaily: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case waveHeightMax = 6
    case windWaveHeightMax = 8
    case swellWaveHeightMax = 10
    case waveDirectionDominant = 12
    case windWaveDirectionDominant = 14
    case swellWaveDirectionDominant = 16
    case wavePeriodMax = 18
    case windWavePeriodMax = 20
    case windWavePeakPeriodMax = 22
    case swellWavePeriodMax = 24
    case swellWavePeakPeriodMax = 26
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var waveHeightMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.waveHeightMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWaveHeightMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveHeightMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWaveHeightMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveHeightMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var waveDirectionDominant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.waveDirectionDominant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWaveDirectionDominant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveDirectionDominant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWaveDirectionDominant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveDirectionDominant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var wavePeriodMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.wavePeriodMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWavePeriodMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeriodMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWavePeakPeriodMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeakPeriodMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWavePeriodMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeriodMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWavePeakPeriodMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriodMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startMarineDaily(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 12) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(waveHeightMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveHeightMax, at: VTOFFSET.waveHeightMax.p) }
  public static func add(windWaveHeightMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveHeightMax, at: VTOFFSET.windWaveHeightMax.p) }
  public static func add(swellWaveHeightMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveHeightMax, at: VTOFFSET.swellWaveHeightMax.p) }
  public static func add(waveDirectionDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveDirectionDominant, at: VTOFFSET.waveDirectionDominant.p) }
  public static func add(windWaveDirectionDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveDirectionDominant, at: VTOFFSET.windWaveDirectionDominant.p) }
  public static func add(swellWaveDirectionDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveDirectionDominant, at: VTOFFSET.swellWaveDirectionDominant.p) }
  public static func add(wavePeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wavePeriodMax, at: VTOFFSET.wavePeriodMax.p) }
  public static func add(windWavePeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeriodMax, at: VTOFFSET.windWavePeriodMax.p) }
  public static func add(windWavePeakPeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeakPeriodMax, at: VTOFFSET.windWavePeakPeriodMax.p) }
  public static func add(swellWavePeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeriodMax, at: VTOFFSET.swellWavePeriodMax.p) }
  public static func add(swellWavePeakPeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeakPeriodMax, at: VTOFFSET.swellWavePeakPeriodMax.p) }
  public static func endMarineDaily(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createMarineDaily(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    waveHeightMaxOffset waveHeightMax: Offset = Offset(),
    windWaveHeightMaxOffset windWaveHeightMax: Offset = Offset(),
    swellWaveHeightMaxOffset swellWaveHeightMax: Offset = Offset(),
    waveDirectionDominantOffset waveDirectionDominant: Offset = Offset(),
    windWaveDirectionDominantOffset windWaveDirectionDominant: Offset = Offset(),
    swellWaveDirectionDominantOffset swellWaveDirectionDominant: Offset = Offset(),
    wavePeriodMaxOffset wavePeriodMax: Offset = Offset(),
    windWavePeriodMaxOffset windWavePeriodMax: Offset = Offset(),
    windWavePeakPeriodMaxOffset windWavePeakPeriodMax: Offset = Offset(),
    swellWavePeriodMaxOffset swellWavePeriodMax: Offset = Offset(),
    swellWavePeakPeriodMaxOffset swellWavePeakPeriodMax: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_MarineDaily.startMarineDaily(&fbb)
    com_openmeteo_MarineDaily.add(time: time, &fbb)
    com_openmeteo_MarineDaily.add(waveHeightMax: waveHeightMax, &fbb)
    com_openmeteo_MarineDaily.add(windWaveHeightMax: windWaveHeightMax, &fbb)
    com_openmeteo_MarineDaily.add(swellWaveHeightMax: swellWaveHeightMax, &fbb)
    com_openmeteo_MarineDaily.add(waveDirectionDominant: waveDirectionDominant, &fbb)
    com_openmeteo_MarineDaily.add(windWaveDirectionDominant: windWaveDirectionDominant, &fbb)
    com_openmeteo_MarineDaily.add(swellWaveDirectionDominant: swellWaveDirectionDominant, &fbb)
    com_openmeteo_MarineDaily.add(wavePeriodMax: wavePeriodMax, &fbb)
    com_openmeteo_MarineDaily.add(windWavePeriodMax: windWavePeriodMax, &fbb)
    com_openmeteo_MarineDaily.add(windWavePeakPeriodMax: windWavePeakPeriodMax, &fbb)
    com_openmeteo_MarineDaily.add(swellWavePeriodMax: swellWavePeriodMax, &fbb)
    com_openmeteo_MarineDaily.add(swellWavePeakPeriodMax: swellWavePeakPeriodMax, &fbb)
    return com_openmeteo_MarineDaily.endMarineDaily(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.waveHeightMax.p, fieldName: "waveHeightMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWaveHeightMax.p, fieldName: "windWaveHeightMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWaveHeightMax.p, fieldName: "swellWaveHeightMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.waveDirectionDominant.p, fieldName: "waveDirectionDominant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWaveDirectionDominant.p, fieldName: "windWaveDirectionDominant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWaveDirectionDominant.p, fieldName: "swellWaveDirectionDominant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.wavePeriodMax.p, fieldName: "wavePeriodMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWavePeriodMax.p, fieldName: "windWavePeriodMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWavePeakPeriodMax.p, fieldName: "windWavePeakPeriodMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWavePeriodMax.p, fieldName: "swellWavePeriodMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWavePeakPeriodMax.p, fieldName: "swellWavePeakPeriodMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_MarineApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case generationtimeMs = 12
    case utcOffsetSeconds = 14
    case timezone = 16
    case timezoneAbbreviation = 18
    case daily = 20
    case hourly = 22
    case current = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: com_openmeteo_MarineModel { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? .bestMatch : com_openmeteo_MarineModel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .bestMatch }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var daily: com_openmeteo_MarineDaily? { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? nil : com_openmeteo_MarineDaily(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hourly: com_openmeteo_MarineHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_MarineHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var current: com_openmeteo_MarineCurrent? { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? nil : com_openmeteo_MarineCurrent(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startMarineApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: com_openmeteo_MarineModel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: model.rawValue, def: 0, at: VTOFFSET.model.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(daily: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: daily, at: VTOFFSET.daily.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func add(current: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: current, at: VTOFFSET.current.p) }
  public static func endMarineApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    model: com_openmeteo_MarineModel = .bestMatch,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    dailyOffset daily: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset(),
    currentOffset current: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_MarineApi.startMarineApi(&fbb)
    com_openmeteo_MarineApi.add(latitude: latitude, &fbb)
    com_openmeteo_MarineApi.add(longitude: longitude, &fbb)
    com_openmeteo_MarineApi.add(elevation: elevation, &fbb)
    com_openmeteo_MarineApi.add(model: model, &fbb)
    com_openmeteo_MarineApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_MarineApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_MarineApi.add(timezone: timezone, &fbb)
    com_openmeteo_MarineApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_MarineApi.add(daily: daily, &fbb)
    com_openmeteo_MarineApi.add(hourly: hourly, &fbb)
    com_openmeteo_MarineApi.add(current: current, &fbb)
    return com_openmeteo_MarineApi.endMarineApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: com_openmeteo_MarineModel.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.daily.p, fieldName: "daily", required: false, type: ForwardOffset<com_openmeteo_MarineDaily>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_MarineHourly>.self)
    try _v.visit(field: VTOFFSET.current.p, fieldName: "current", required: false, type: ForwardOffset<com_openmeteo_MarineCurrent>.self)
    _v.finish()
  }
}

