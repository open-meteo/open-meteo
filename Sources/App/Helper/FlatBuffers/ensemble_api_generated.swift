// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum com_openmeteo_EnsembleModel: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case undefined = 0
  case iconSeamless = 1
  case iconGlobal = 2
  case iconEu = 3
  case iconD2 = 4
  case ecmwfIfs04 = 5
  case gemGlobal = 6
  case gfsSeamless = 7
  case gfs025 = 8
  case gfs05 = 9

  public static var max: com_openmeteo_EnsembleModel { return .gfs05 }
  public static var min: com_openmeteo_EnsembleModel { return .undefined }
}


public struct com_openmeteo_EnsembleHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case apparentTemperature = 6
    case cape = 8
    case cloudcover = 10
    case dewpoint2m = 12
    case diffuseRadiation = 14
    case diffuseRadiationInstant = 16
    case directNormalIrradiance = 18
    case directNormalIrradianceInstant = 20
    case directRadiation = 22
    case directRadiationInstant = 24
    case et0FaoEvapotranspiration = 26
    case freezinglevelHeight = 28
    case isDay = 30
    case precipitation = 32
    case pressureMsl = 34
    case rain = 36
    case relativehumidity2m = 38
    case shortwaveRadiation = 40
    case shortwaveRadiationInstant = 42
    case snowDepth = 44
    case snowfall = 46
    case soilMoisture0To10cm = 48
    case soilMoisture100To200cm = 50
    case soilMoisture10To40cm = 52
    case soilMoisture40To100cm = 54
    case soilTemperature0To10cm = 56
    case soilTemperature100To200cm = 58
    case soilTemperature10To40cm = 60
    case soilTemperature40To100cm = 62
    case surfacePressure = 64
    case surfaceTemperature = 66
    case temperature120m = 68
    case temperature2m = 70
    case temperature80m = 72
    case uvIndex = 74
    case uvIndexClearSky = 76
    case vaporPressureDeficit = 78
    case visibility = 80
    case winddirection10m = 82
    case winddirection120m = 84
    case winddirection80m = 86
    case windgusts10m = 88
    case windspeed10m = 90
    case windspeed120m = 92
    case windspeed80m = 94
    case weathercode = 96
    case pressureLevelTemperature = 98
    case pressureLevelDewpoint = 100
    case pressureLevelRelativehumidity = 102
    case pressureLevelCloudcover = 104
    case pressureLevelWindspeed = 106
    case pressureLevelWinddirection = 108
    case pressureLevelVerticalVelocity = 110
    case pressureLevelGeopotentialHeight = 112
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var apparentTemperature: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cape: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint2m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiation: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiationInstant: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradiance: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradianceInstant: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiation: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiationInstant: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var et0FaoEvapotranspiration: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var freezinglevelHeight: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var isDay: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitation: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMsl: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var rain: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity2m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiation: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiationInstant: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowDepth: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfall: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To10cm: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture100To200cm: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture10To40cm: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture40To100cm: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0To10cm: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature100To200cm: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature10To40cm: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature40To100cm: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressure: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfaceTemperature: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.surfaceTemperature.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature120m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.temperature2m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature80m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndex: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSky: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var vaporPressureDeficit: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibility: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection120m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection80m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed120m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed80m: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var weathercode: com_openmeteo_ValuesUnitAndMember? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_ValuesUnitAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelTemperature: com_openmeteo_ValuesUnitPressureLevelAndMember? { let o = _accessor.offset(VTOFFSET.pressureLevelTemperature.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevelAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelDewpoint: com_openmeteo_ValuesUnitPressureLevelAndMember? { let o = _accessor.offset(VTOFFSET.pressureLevelDewpoint.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevelAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelRelativehumidity: com_openmeteo_ValuesUnitPressureLevelAndMember? { let o = _accessor.offset(VTOFFSET.pressureLevelRelativehumidity.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevelAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelCloudcover: com_openmeteo_ValuesUnitPressureLevelAndMember? { let o = _accessor.offset(VTOFFSET.pressureLevelCloudcover.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevelAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelWindspeed: com_openmeteo_ValuesUnitPressureLevelAndMember? { let o = _accessor.offset(VTOFFSET.pressureLevelWindspeed.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevelAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelWinddirection: com_openmeteo_ValuesUnitPressureLevelAndMember? { let o = _accessor.offset(VTOFFSET.pressureLevelWinddirection.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevelAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelVerticalVelocity: com_openmeteo_ValuesUnitPressureLevelAndMember? { let o = _accessor.offset(VTOFFSET.pressureLevelVerticalVelocity.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevelAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelGeopotentialHeight: com_openmeteo_ValuesUnitPressureLevelAndMember? { let o = _accessor.offset(VTOFFSET.pressureLevelGeopotentialHeight.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevelAndMember(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startEnsembleHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 55) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(apparentTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperature, at: VTOFFSET.apparentTemperature.p) }
  public static func add(cape: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cape, at: VTOFFSET.cape.p) }
  public static func add(cloudcover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover, at: VTOFFSET.cloudcover.p) }
  public static func add(dewpoint2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint2m, at: VTOFFSET.dewpoint2m.p) }
  public static func add(diffuseRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiation, at: VTOFFSET.diffuseRadiation.p) }
  public static func add(diffuseRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiationInstant, at: VTOFFSET.diffuseRadiationInstant.p) }
  public static func add(directNormalIrradiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradiance, at: VTOFFSET.directNormalIrradiance.p) }
  public static func add(directNormalIrradianceInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradianceInstant, at: VTOFFSET.directNormalIrradianceInstant.p) }
  public static func add(directRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiation, at: VTOFFSET.directRadiation.p) }
  public static func add(directRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiationInstant, at: VTOFFSET.directRadiationInstant.p) }
  public static func add(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(freezinglevelHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: freezinglevelHeight, at: VTOFFSET.freezinglevelHeight.p) }
  public static func add(isDay: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: isDay, at: VTOFFSET.isDay.p) }
  public static func add(precipitation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitation, at: VTOFFSET.precipitation.p) }
  public static func add(pressureMsl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMsl, at: VTOFFSET.pressureMsl.p) }
  public static func add(rain: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rain, at: VTOFFSET.rain.p) }
  public static func add(relativehumidity2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity2m, at: VTOFFSET.relativehumidity2m.p) }
  public static func add(shortwaveRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiation, at: VTOFFSET.shortwaveRadiation.p) }
  public static func add(shortwaveRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationInstant, at: VTOFFSET.shortwaveRadiationInstant.p) }
  public static func add(snowDepth: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowDepth, at: VTOFFSET.snowDepth.p) }
  public static func add(snowfall: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfall, at: VTOFFSET.snowfall.p) }
  public static func add(soilMoisture0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To10cm, at: VTOFFSET.soilMoisture0To10cm.p) }
  public static func add(soilMoisture100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture100To200cm, at: VTOFFSET.soilMoisture100To200cm.p) }
  public static func add(soilMoisture10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture10To40cm, at: VTOFFSET.soilMoisture10To40cm.p) }
  public static func add(soilMoisture40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture40To100cm, at: VTOFFSET.soilMoisture40To100cm.p) }
  public static func add(soilTemperature0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To10cm, at: VTOFFSET.soilTemperature0To10cm.p) }
  public static func add(soilTemperature100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature100To200cm, at: VTOFFSET.soilTemperature100To200cm.p) }
  public static func add(soilTemperature10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature10To40cm, at: VTOFFSET.soilTemperature10To40cm.p) }
  public static func add(soilTemperature40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature40To100cm, at: VTOFFSET.soilTemperature40To100cm.p) }
  public static func add(surfacePressure: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressure, at: VTOFFSET.surfacePressure.p) }
  public static func add(surfaceTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfaceTemperature, at: VTOFFSET.surfaceTemperature.p) }
  public static func add(temperature120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature120m, at: VTOFFSET.temperature120m.p) }
  public static func add(temperature2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2m, at: VTOFFSET.temperature2m.p) }
  public static func add(temperature80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature80m, at: VTOFFSET.temperature80m.p) }
  public static func add(uvIndex: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndex, at: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSky, at: VTOFFSET.uvIndexClearSky.p) }
  public static func add(vaporPressureDeficit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vaporPressureDeficit, at: VTOFFSET.vaporPressureDeficit.p) }
  public static func add(visibility: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibility, at: VTOFFSET.visibility.p) }
  public static func add(winddirection10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10m, at: VTOFFSET.winddirection10m.p) }
  public static func add(winddirection120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection120m, at: VTOFFSET.winddirection120m.p) }
  public static func add(winddirection80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection80m, at: VTOFFSET.winddirection80m.p) }
  public static func add(windgusts10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10m, at: VTOFFSET.windgusts10m.p) }
  public static func add(windspeed10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10m, at: VTOFFSET.windspeed10m.p) }
  public static func add(windspeed120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed120m, at: VTOFFSET.windspeed120m.p) }
  public static func add(windspeed80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed80m, at: VTOFFSET.windspeed80m.p) }
  public static func add(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func add(pressureLevelTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelTemperature, at: VTOFFSET.pressureLevelTemperature.p) }
  public static func add(pressureLevelDewpoint: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelDewpoint, at: VTOFFSET.pressureLevelDewpoint.p) }
  public static func add(pressureLevelRelativehumidity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelRelativehumidity, at: VTOFFSET.pressureLevelRelativehumidity.p) }
  public static func add(pressureLevelCloudcover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelCloudcover, at: VTOFFSET.pressureLevelCloudcover.p) }
  public static func add(pressureLevelWindspeed: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelWindspeed, at: VTOFFSET.pressureLevelWindspeed.p) }
  public static func add(pressureLevelWinddirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelWinddirection, at: VTOFFSET.pressureLevelWinddirection.p) }
  public static func add(pressureLevelVerticalVelocity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelVerticalVelocity, at: VTOFFSET.pressureLevelVerticalVelocity.p) }
  public static func add(pressureLevelGeopotentialHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelGeopotentialHeight, at: VTOFFSET.pressureLevelGeopotentialHeight.p) }
  public static func endEnsembleHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createEnsembleHourly(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    apparentTemperatureOffset apparentTemperature: Offset = Offset(),
    capeOffset cape: Offset = Offset(),
    cloudcoverOffset cloudcover: Offset = Offset(),
    dewpoint2mOffset dewpoint2m: Offset = Offset(),
    diffuseRadiationOffset diffuseRadiation: Offset = Offset(),
    diffuseRadiationInstantOffset diffuseRadiationInstant: Offset = Offset(),
    directNormalIrradianceOffset directNormalIrradiance: Offset = Offset(),
    directNormalIrradianceInstantOffset directNormalIrradianceInstant: Offset = Offset(),
    directRadiationOffset directRadiation: Offset = Offset(),
    directRadiationInstantOffset directRadiationInstant: Offset = Offset(),
    et0FaoEvapotranspirationOffset et0FaoEvapotranspiration: Offset = Offset(),
    freezinglevelHeightOffset freezinglevelHeight: Offset = Offset(),
    isDayOffset isDay: Offset = Offset(),
    precipitationOffset precipitation: Offset = Offset(),
    pressureMslOffset pressureMsl: Offset = Offset(),
    rainOffset rain: Offset = Offset(),
    relativehumidity2mOffset relativehumidity2m: Offset = Offset(),
    shortwaveRadiationOffset shortwaveRadiation: Offset = Offset(),
    shortwaveRadiationInstantOffset shortwaveRadiationInstant: Offset = Offset(),
    snowDepthOffset snowDepth: Offset = Offset(),
    snowfallOffset snowfall: Offset = Offset(),
    soilMoisture0To10cmOffset soilMoisture0To10cm: Offset = Offset(),
    soilMoisture100To200cmOffset soilMoisture100To200cm: Offset = Offset(),
    soilMoisture10To40cmOffset soilMoisture10To40cm: Offset = Offset(),
    soilMoisture40To100cmOffset soilMoisture40To100cm: Offset = Offset(),
    soilTemperature0To10cmOffset soilTemperature0To10cm: Offset = Offset(),
    soilTemperature100To200cmOffset soilTemperature100To200cm: Offset = Offset(),
    soilTemperature10To40cmOffset soilTemperature10To40cm: Offset = Offset(),
    soilTemperature40To100cmOffset soilTemperature40To100cm: Offset = Offset(),
    surfacePressureOffset surfacePressure: Offset = Offset(),
    surfaceTemperatureOffset surfaceTemperature: Offset = Offset(),
    temperature120mOffset temperature120m: Offset = Offset(),
    temperature2mOffset temperature2m: Offset = Offset(),
    temperature80mOffset temperature80m: Offset = Offset(),
    uvIndexOffset uvIndex: Offset = Offset(),
    uvIndexClearSkyOffset uvIndexClearSky: Offset = Offset(),
    vaporPressureDeficitOffset vaporPressureDeficit: Offset = Offset(),
    visibilityOffset visibility: Offset = Offset(),
    winddirection10mOffset winddirection10m: Offset = Offset(),
    winddirection120mOffset winddirection120m: Offset = Offset(),
    winddirection80mOffset winddirection80m: Offset = Offset(),
    windgusts10mOffset windgusts10m: Offset = Offset(),
    windspeed10mOffset windspeed10m: Offset = Offset(),
    windspeed120mOffset windspeed120m: Offset = Offset(),
    windspeed80mOffset windspeed80m: Offset = Offset(),
    weathercodeOffset weathercode: Offset = Offset(),
    pressureLevelTemperatureOffset pressureLevelTemperature: Offset = Offset(),
    pressureLevelDewpointOffset pressureLevelDewpoint: Offset = Offset(),
    pressureLevelRelativehumidityOffset pressureLevelRelativehumidity: Offset = Offset(),
    pressureLevelCloudcoverOffset pressureLevelCloudcover: Offset = Offset(),
    pressureLevelWindspeedOffset pressureLevelWindspeed: Offset = Offset(),
    pressureLevelWinddirectionOffset pressureLevelWinddirection: Offset = Offset(),
    pressureLevelVerticalVelocityOffset pressureLevelVerticalVelocity: Offset = Offset(),
    pressureLevelGeopotentialHeightOffset pressureLevelGeopotentialHeight: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_EnsembleHourly.startEnsembleHourly(&fbb)
    com_openmeteo_EnsembleHourly.add(time: time, &fbb)
    com_openmeteo_EnsembleHourly.add(apparentTemperature: apparentTemperature, &fbb)
    com_openmeteo_EnsembleHourly.add(cape: cape, &fbb)
    com_openmeteo_EnsembleHourly.add(cloudcover: cloudcover, &fbb)
    com_openmeteo_EnsembleHourly.add(dewpoint2m: dewpoint2m, &fbb)
    com_openmeteo_EnsembleHourly.add(diffuseRadiation: diffuseRadiation, &fbb)
    com_openmeteo_EnsembleHourly.add(diffuseRadiationInstant: diffuseRadiationInstant, &fbb)
    com_openmeteo_EnsembleHourly.add(directNormalIrradiance: directNormalIrradiance, &fbb)
    com_openmeteo_EnsembleHourly.add(directNormalIrradianceInstant: directNormalIrradianceInstant, &fbb)
    com_openmeteo_EnsembleHourly.add(directRadiation: directRadiation, &fbb)
    com_openmeteo_EnsembleHourly.add(directRadiationInstant: directRadiationInstant, &fbb)
    com_openmeteo_EnsembleHourly.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_EnsembleHourly.add(freezinglevelHeight: freezinglevelHeight, &fbb)
    com_openmeteo_EnsembleHourly.add(isDay: isDay, &fbb)
    com_openmeteo_EnsembleHourly.add(precipitation: precipitation, &fbb)
    com_openmeteo_EnsembleHourly.add(pressureMsl: pressureMsl, &fbb)
    com_openmeteo_EnsembleHourly.add(rain: rain, &fbb)
    com_openmeteo_EnsembleHourly.add(relativehumidity2m: relativehumidity2m, &fbb)
    com_openmeteo_EnsembleHourly.add(shortwaveRadiation: shortwaveRadiation, &fbb)
    com_openmeteo_EnsembleHourly.add(shortwaveRadiationInstant: shortwaveRadiationInstant, &fbb)
    com_openmeteo_EnsembleHourly.add(snowDepth: snowDepth, &fbb)
    com_openmeteo_EnsembleHourly.add(snowfall: snowfall, &fbb)
    com_openmeteo_EnsembleHourly.add(soilMoisture0To10cm: soilMoisture0To10cm, &fbb)
    com_openmeteo_EnsembleHourly.add(soilMoisture100To200cm: soilMoisture100To200cm, &fbb)
    com_openmeteo_EnsembleHourly.add(soilMoisture10To40cm: soilMoisture10To40cm, &fbb)
    com_openmeteo_EnsembleHourly.add(soilMoisture40To100cm: soilMoisture40To100cm, &fbb)
    com_openmeteo_EnsembleHourly.add(soilTemperature0To10cm: soilTemperature0To10cm, &fbb)
    com_openmeteo_EnsembleHourly.add(soilTemperature100To200cm: soilTemperature100To200cm, &fbb)
    com_openmeteo_EnsembleHourly.add(soilTemperature10To40cm: soilTemperature10To40cm, &fbb)
    com_openmeteo_EnsembleHourly.add(soilTemperature40To100cm: soilTemperature40To100cm, &fbb)
    com_openmeteo_EnsembleHourly.add(surfacePressure: surfacePressure, &fbb)
    com_openmeteo_EnsembleHourly.add(surfaceTemperature: surfaceTemperature, &fbb)
    com_openmeteo_EnsembleHourly.add(temperature120m: temperature120m, &fbb)
    com_openmeteo_EnsembleHourly.add(temperature2m: temperature2m, &fbb)
    com_openmeteo_EnsembleHourly.add(temperature80m: temperature80m, &fbb)
    com_openmeteo_EnsembleHourly.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_EnsembleHourly.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_EnsembleHourly.add(vaporPressureDeficit: vaporPressureDeficit, &fbb)
    com_openmeteo_EnsembleHourly.add(visibility: visibility, &fbb)
    com_openmeteo_EnsembleHourly.add(winddirection10m: winddirection10m, &fbb)
    com_openmeteo_EnsembleHourly.add(winddirection120m: winddirection120m, &fbb)
    com_openmeteo_EnsembleHourly.add(winddirection80m: winddirection80m, &fbb)
    com_openmeteo_EnsembleHourly.add(windgusts10m: windgusts10m, &fbb)
    com_openmeteo_EnsembleHourly.add(windspeed10m: windspeed10m, &fbb)
    com_openmeteo_EnsembleHourly.add(windspeed120m: windspeed120m, &fbb)
    com_openmeteo_EnsembleHourly.add(windspeed80m: windspeed80m, &fbb)
    com_openmeteo_EnsembleHourly.add(weathercode: weathercode, &fbb)
    com_openmeteo_EnsembleHourly.add(pressureLevelTemperature: pressureLevelTemperature, &fbb)
    com_openmeteo_EnsembleHourly.add(pressureLevelDewpoint: pressureLevelDewpoint, &fbb)
    com_openmeteo_EnsembleHourly.add(pressureLevelRelativehumidity: pressureLevelRelativehumidity, &fbb)
    com_openmeteo_EnsembleHourly.add(pressureLevelCloudcover: pressureLevelCloudcover, &fbb)
    com_openmeteo_EnsembleHourly.add(pressureLevelWindspeed: pressureLevelWindspeed, &fbb)
    com_openmeteo_EnsembleHourly.add(pressureLevelWinddirection: pressureLevelWinddirection, &fbb)
    com_openmeteo_EnsembleHourly.add(pressureLevelVerticalVelocity: pressureLevelVerticalVelocity, &fbb)
    com_openmeteo_EnsembleHourly.add(pressureLevelGeopotentialHeight: pressureLevelGeopotentialHeight, &fbb)
    return com_openmeteo_EnsembleHourly.endEnsembleHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.apparentTemperature.p, fieldName: "apparentTemperature", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.cape.p, fieldName: "cape", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.cloudcover.p, fieldName: "cloudcover", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.dewpoint2m.p, fieldName: "dewpoint2m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiation.p, fieldName: "diffuseRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiationInstant.p, fieldName: "diffuseRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradiance.p, fieldName: "directNormalIrradiance", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradianceInstant.p, fieldName: "directNormalIrradianceInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.directRadiation.p, fieldName: "directRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.directRadiationInstant.p, fieldName: "directRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.freezinglevelHeight.p, fieldName: "freezinglevelHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.precipitation.p, fieldName: "precipitation", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.pressureMsl.p, fieldName: "pressureMsl", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.rain.p, fieldName: "rain", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.relativehumidity2m.p, fieldName: "relativehumidity2m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiation.p, fieldName: "shortwaveRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationInstant.p, fieldName: "shortwaveRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.snowDepth.p, fieldName: "snowDepth", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.snowfall.p, fieldName: "snowfall", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To10cm.p, fieldName: "soilMoisture0To10cm", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To200cm.p, fieldName: "soilMoisture100To200cm", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.soilMoisture10To40cm.p, fieldName: "soilMoisture10To40cm", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.soilMoisture40To100cm.p, fieldName: "soilMoisture40To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To10cm.p, fieldName: "soilTemperature0To10cm", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To200cm.p, fieldName: "soilTemperature100To200cm", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.soilTemperature10To40cm.p, fieldName: "soilTemperature10To40cm", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.soilTemperature40To100cm.p, fieldName: "soilTemperature40To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.surfacePressure.p, fieldName: "surfacePressure", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.surfaceTemperature.p, fieldName: "surfaceTemperature", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.temperature120m.p, fieldName: "temperature120m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.temperature2m.p, fieldName: "temperature2m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.temperature80m.p, fieldName: "temperature80m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.vaporPressureDeficit.p, fieldName: "vaporPressureDeficit", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.visibility.p, fieldName: "visibility", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.winddirection10m.p, fieldName: "winddirection10m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.winddirection120m.p, fieldName: "winddirection120m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.winddirection80m.p, fieldName: "winddirection80m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.windgusts10m.p, fieldName: "windgusts10m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.windspeed10m.p, fieldName: "windspeed10m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.windspeed120m.p, fieldName: "windspeed120m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.windspeed80m.p, fieldName: "windspeed80m", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitAndMember>.self)
    try _v.visit(field: VTOFFSET.pressureLevelTemperature.p, fieldName: "pressureLevelTemperature", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevelAndMember>.self)
    try _v.visit(field: VTOFFSET.pressureLevelDewpoint.p, fieldName: "pressureLevelDewpoint", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevelAndMember>.self)
    try _v.visit(field: VTOFFSET.pressureLevelRelativehumidity.p, fieldName: "pressureLevelRelativehumidity", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevelAndMember>.self)
    try _v.visit(field: VTOFFSET.pressureLevelCloudcover.p, fieldName: "pressureLevelCloudcover", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevelAndMember>.self)
    try _v.visit(field: VTOFFSET.pressureLevelWindspeed.p, fieldName: "pressureLevelWindspeed", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevelAndMember>.self)
    try _v.visit(field: VTOFFSET.pressureLevelWinddirection.p, fieldName: "pressureLevelWinddirection", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevelAndMember>.self)
    try _v.visit(field: VTOFFSET.pressureLevelVerticalVelocity.p, fieldName: "pressureLevelVerticalVelocity", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevelAndMember>.self)
    try _v.visit(field: VTOFFSET.pressureLevelGeopotentialHeight.p, fieldName: "pressureLevelGeopotentialHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevelAndMember>.self)
    _v.finish()
  }
}

public struct com_openmeteo_EnsembleApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case generationtimeMs = 12
    case utcOffsetSeconds = 14
    case timezone = 16
    case timezoneAbbreviation = 18
    case hourly = 20
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: com_openmeteo_EnsembleModel { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? .undefined : com_openmeteo_EnsembleModel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var hourly: com_openmeteo_EnsembleHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_EnsembleHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startEnsembleApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 9) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: com_openmeteo_EnsembleModel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: model.rawValue, def: 0, at: VTOFFSET.model.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func endEnsembleApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEnsembleApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    model: com_openmeteo_EnsembleModel = .undefined,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_EnsembleApi.startEnsembleApi(&fbb)
    com_openmeteo_EnsembleApi.add(latitude: latitude, &fbb)
    com_openmeteo_EnsembleApi.add(longitude: longitude, &fbb)
    com_openmeteo_EnsembleApi.add(elevation: elevation, &fbb)
    com_openmeteo_EnsembleApi.add(model: model, &fbb)
    com_openmeteo_EnsembleApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_EnsembleApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_EnsembleApi.add(timezone: timezone, &fbb)
    com_openmeteo_EnsembleApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_EnsembleApi.add(hourly: hourly, &fbb)
    return com_openmeteo_EnsembleApi.endEnsembleApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: com_openmeteo_EnsembleModel.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_EnsembleHourly>.self)
    _v.finish()
  }
}

