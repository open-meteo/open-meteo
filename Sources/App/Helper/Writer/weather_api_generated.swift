// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum com_openmeteo_api_result_WeatherModel: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case undefined = 0
  case bestMatch = 1
  case gfsSeamless = 2
  case gfsGlobal = 3
  case gfsHrrr = 4
  case meteofranceSeamless = 5
  case meteofranceArpegeWorld = 6
  case meteofranceArpegeEurope = 7
  case meteofranceAromeFrance = 8
  case meteofranceAromeFranceHd = 9
  case jmaSeamless = 10
  case jmaMsm = 11
  case jmsGsm = 12
  case jmaGsm = 13
  case gemSeamless = 14
  case gemGlobal = 15
  case gemRegional = 16
  case gemHrdpsContinental = 17
  case iconSeamless = 18
  case iconGlobal = 19
  case iconEu = 20
  case iconD2 = 21
  case ecmwfIfs04 = 22
  case metnoNordic = 23
  case era5 = 24
  case cerra = 25
  case era5Land = 26
  case ecmwfIfs = 27
  case noaaCfs = 28

  public static var max: com_openmeteo_api_result_WeatherModel { return .noaaCfs }
  public static var min: com_openmeteo_api_result_WeatherModel { return .undefined }
}


public struct com_openmeteo_api_result_CurrentWeather: NativeStruct, Verifiable, FlatbuffersInitializable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }

  private var _time: Int64
  private var _temperature: Float32
  private var _weathercode: Float32
  private var _windspeed: Float32
  private var _winddirection: Float32
  private var _isDay: Float32
  private let padding0__: UInt32 = 0

  public init(_ bb: ByteBuffer, o: Int32) {
    let _accessor = Struct(bb: bb, position: o)
    _time = _accessor.readBuffer(of: Int64.self, at: 0)
    _temperature = _accessor.readBuffer(of: Float32.self, at: 8)
    _weathercode = _accessor.readBuffer(of: Float32.self, at: 12)
    _windspeed = _accessor.readBuffer(of: Float32.self, at: 16)
    _winddirection = _accessor.readBuffer(of: Float32.self, at: 20)
    _isDay = _accessor.readBuffer(of: Float32.self, at: 24)
  }

  public init(time: Int64, temperature: Float32, weathercode: Float32, windspeed: Float32, winddirection: Float32, isDay: Float32) {
    _time = time
    _temperature = temperature
    _weathercode = weathercode
    _windspeed = windspeed
    _winddirection = winddirection
    _isDay = isDay
  }

  public init() {
    _time = 0
    _temperature = 0.0
    _weathercode = 0.0
    _windspeed = 0.0
    _winddirection = 0.0
    _isDay = 0.0
  }

  public var time: Int64 { _time }
  public var temperature: Float32 { _temperature }
  public var weathercode: Float32 { _weathercode }
  public var windspeed: Float32 { _windspeed }
  public var winddirection: Float32 { _winddirection }
  public var isDay: Float32 { _isDay }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    try verifier.inBuffer(position: position, of: com_openmeteo_api_result_CurrentWeather.self)
  }
}

public struct com_openmeteo_api_result_CurrentWeather_Mutable: FlatBufferObject {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Struct

  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Struct(bb: bb, position: o) }

  public var time: Int64 { return _accessor.readBuffer(of: Int64.self, at: 0) }
  public var temperature: Float32 { return _accessor.readBuffer(of: Float32.self, at: 8) }
  public var weathercode: Float32 { return _accessor.readBuffer(of: Float32.self, at: 12) }
  public var windspeed: Float32 { return _accessor.readBuffer(of: Float32.self, at: 16) }
  public var winddirection: Float32 { return _accessor.readBuffer(of: Float32.self, at: 20) }
  public var isDay: Float32 { return _accessor.readBuffer(of: Float32.self, at: 24) }
}

public struct com_openmeteo_api_result_WeatherHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case temperture2m = 4
    case cloudcover = 6
    case cloudcoverLow = 8
    case cloudcoverMid = 10
    case cloudcoverHigh = 12
    case pressureMsl = 14
    case relativehumidity2m = 16
    case precipitation = 18
    case precipitationProbability = 20
    case weathercode = 22
    case temperature80m = 24
    case temperature120m = 26
    case temperature180m = 28
    case soilTemperature0cm = 30
    case soilTemperature6cm = 32
    case soilTemperature18cm = 34
    case soilTemperature54cm = 36
    case soilMoisture01cm = 38
    case soilMoisture13cm = 40
    case soilMoisture39cm = 42
    case soilMoisture927cm = 44
    case soilMoisture2781cm = 46
    case snowDepth = 48
    case snowHeight = 50
    case sensibleHeatflux = 52
    case latentHeatflux = 54
    case showers = 56
    case rain = 58
    case windgusts10m = 60
    case freezinglevelHeight = 62
    case dewpoint2m = 64
    case diffuseRadiation = 66
    case directRadiation = 68
    case apparentTemperature = 70
    case windspeed10m = 72
    case winddirection10m = 74
    case windspeed80m = 76
    case winddirection80m = 78
    case windspeed120m = 80
    case winddirection120m = 82
    case windspeed180m = 84
    case winddirection180m = 86
    case directNormalIrradiance = 88
    case evapotranspiration = 90
    case et0FaoEvapotranspiration = 92
    case vaporPressureDeficit = 94
    case shortwaveRadiation = 96
    case snowfall = 98
    case surfacePressure = 100
    case terrestrialRadiation = 102
    case terrestrialRadiationInstant = 104
    case shortwaveRadiationInstant = 106
    case diffuseRadiationInstant = 108
    case directRadiationInstant = 110
    case directNormalIrradianceInstant = 112
    case visibility = 114
    case cape = 116
    case uvIndex = 118
    case uvIndexClearSky = 120
    case isDay = 122
    case soilTemperature0To10cm = 124
    case soilTemperature10To40cm = 126
    case soilTemperature40To100cm = 128
    case soilTemperature100To200cm = 130
    case soilMoisture0To10cm = 132
    case soilMoisture10To40cm = 134
    case soilMoisture40To100cm = 136
    case soilMoisture100To200cm = 138
    case growingDegreeDaysBase0Limit50 = 140
    case leafWetnessProbability = 142
    case soilMoistureIndex0To7cm = 144
    case soilMoistureIndex7To28cm = 146
    case soilMoistureIndex28To100cm = 148
    case soilMoistureIndex100To255cm = 150
    case soilMoistureIndex0To100cm = 152
    case lightningPotential = 154
    case temperatureHpa = 156
    case geopotentialHeightHpa = 158
    case relativehumidityHpa = 160
    case windspeedHpa = 162
    case winddirectionHpa = 164
    case dewpointHpa = 166
    case cloudcoverHpa = 168
    case verticalVelocityHpa = 170
    case growingDegreeDays = 172
    case tiltedDirectRadiation = 174
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasTemperture2m: Bool { let o = _accessor.offset(VTOFFSET.temperture2m.v); return o == 0 ? false : true }
  public var temperture2mCount: Int32 { let o = _accessor.offset(VTOFFSET.temperture2m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func temperture2m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.temperture2m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var temperture2m: [Float32] { return _accessor.getVector(at: VTOFFSET.temperture2m.v) ?? [] }
  public var hasCloudcover: Bool { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? false : true }
  public var cloudcoverCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudcover(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var cloudcover: [Float32] { return _accessor.getVector(at: VTOFFSET.cloudcover.v) ?? [] }
  public var hasCloudcoverLow: Bool { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? false : true }
  public var cloudcoverLowCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudcoverLow(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var cloudcoverLow: [Float32] { return _accessor.getVector(at: VTOFFSET.cloudcoverLow.v) ?? [] }
  public var hasCloudcoverMid: Bool { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? false : true }
  public var cloudcoverMidCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudcoverMid(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var cloudcoverMid: [Float32] { return _accessor.getVector(at: VTOFFSET.cloudcoverMid.v) ?? [] }
  public var hasCloudcoverHigh: Bool { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? false : true }
  public var cloudcoverHighCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudcoverHigh(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var cloudcoverHigh: [Float32] { return _accessor.getVector(at: VTOFFSET.cloudcoverHigh.v) ?? [] }
  public var hasPressureMsl: Bool { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? false : true }
  public var pressureMslCount: Int32 { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func pressureMsl(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var pressureMsl: [Float32] { return _accessor.getVector(at: VTOFFSET.pressureMsl.v) ?? [] }
  public var hasRelativehumidity2m: Bool { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? false : true }
  public var relativehumidity2mCount: Int32 { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func relativehumidity2m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var relativehumidity2m: [Float32] { return _accessor.getVector(at: VTOFFSET.relativehumidity2m.v) ?? [] }
  public var hasPrecipitation: Bool { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? false : true }
  public var precipitationCount: Int32 { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func precipitation(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var precipitation: [Float32] { return _accessor.getVector(at: VTOFFSET.precipitation.v) ?? [] }
  public var hasPrecipitationProbability: Bool { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? false : true }
  public var precipitationProbabilityCount: Int32 { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func precipitationProbability(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var precipitationProbability: [Float32] { return _accessor.getVector(at: VTOFFSET.precipitationProbability.v) ?? [] }
  public var hasWeathercode: Bool { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? false : true }
  public var weathercodeCount: Int32 { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func weathercode(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var weathercode: [Float32] { return _accessor.getVector(at: VTOFFSET.weathercode.v) ?? [] }
  public var hasTemperature80m: Bool { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? false : true }
  public var temperature80mCount: Int32 { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func temperature80m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var temperature80m: [Float32] { return _accessor.getVector(at: VTOFFSET.temperature80m.v) ?? [] }
  public var hasTemperature120m: Bool { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? false : true }
  public var temperature120mCount: Int32 { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func temperature120m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var temperature120m: [Float32] { return _accessor.getVector(at: VTOFFSET.temperature120m.v) ?? [] }
  public var hasTemperature180m: Bool { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? false : true }
  public var temperature180mCount: Int32 { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func temperature180m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var temperature180m: [Float32] { return _accessor.getVector(at: VTOFFSET.temperature180m.v) ?? [] }
  public var hasSoilTemperature0cm: Bool { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? false : true }
  public var soilTemperature0cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilTemperature0cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilTemperature0cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilTemperature0cm.v) ?? [] }
  public var hasSoilTemperature6cm: Bool { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? false : true }
  public var soilTemperature6cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilTemperature6cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilTemperature6cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilTemperature6cm.v) ?? [] }
  public var hasSoilTemperature18cm: Bool { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? false : true }
  public var soilTemperature18cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilTemperature18cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilTemperature18cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilTemperature18cm.v) ?? [] }
  public var hasSoilTemperature54cm: Bool { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? false : true }
  public var soilTemperature54cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilTemperature54cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilTemperature54cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilTemperature54cm.v) ?? [] }
  public var hasSoilMoisture01cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoisture01cm.v); return o == 0 ? false : true }
  public var soilMoisture01cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoisture01cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoisture01cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoisture01cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoisture01cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoisture01cm.v) ?? [] }
  public var hasSoilMoisture13cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoisture13cm.v); return o == 0 ? false : true }
  public var soilMoisture13cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoisture13cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoisture13cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoisture13cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoisture13cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoisture13cm.v) ?? [] }
  public var hasSoilMoisture39cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoisture39cm.v); return o == 0 ? false : true }
  public var soilMoisture39cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoisture39cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoisture39cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoisture39cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoisture39cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoisture39cm.v) ?? [] }
  public var hasSoilMoisture927cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoisture927cm.v); return o == 0 ? false : true }
  public var soilMoisture927cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoisture927cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoisture927cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoisture927cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoisture927cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoisture927cm.v) ?? [] }
  public var hasSoilMoisture2781cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoisture2781cm.v); return o == 0 ? false : true }
  public var soilMoisture2781cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoisture2781cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoisture2781cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoisture2781cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoisture2781cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoisture2781cm.v) ?? [] }
  public var hasSnowDepth: Bool { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? false : true }
  public var snowDepthCount: Int32 { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func snowDepth(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var snowDepth: [Float32] { return _accessor.getVector(at: VTOFFSET.snowDepth.v) ?? [] }
  public var hasSnowHeight: Bool { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? false : true }
  public var snowHeightCount: Int32 { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func snowHeight(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var snowHeight: [Float32] { return _accessor.getVector(at: VTOFFSET.snowHeight.v) ?? [] }
  public var hasSensibleHeatflux: Bool { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? false : true }
  public var sensibleHeatfluxCount: Int32 { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sensibleHeatflux(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var sensibleHeatflux: [Float32] { return _accessor.getVector(at: VTOFFSET.sensibleHeatflux.v) ?? [] }
  public var hasLatentHeatflux: Bool { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? false : true }
  public var latentHeatfluxCount: Int32 { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func latentHeatflux(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var latentHeatflux: [Float32] { return _accessor.getVector(at: VTOFFSET.latentHeatflux.v) ?? [] }
  public var hasShowers: Bool { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? false : true }
  public var showersCount: Int32 { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func showers(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var showers: [Float32] { return _accessor.getVector(at: VTOFFSET.showers.v) ?? [] }
  public var hasRain: Bool { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? false : true }
  public var rainCount: Int32 { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rain(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var rain: [Float32] { return _accessor.getVector(at: VTOFFSET.rain.v) ?? [] }
  public var hasWindgusts10m: Bool { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? false : true }
  public var windgusts10mCount: Int32 { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windgusts10m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windgusts10m: [Float32] { return _accessor.getVector(at: VTOFFSET.windgusts10m.v) ?? [] }
  public var hasFreezinglevelHeight: Bool { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? false : true }
  public var freezinglevelHeightCount: Int32 { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func freezinglevelHeight(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var freezinglevelHeight: [Float32] { return _accessor.getVector(at: VTOFFSET.freezinglevelHeight.v) ?? [] }
  public var hasDewpoint2m: Bool { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? false : true }
  public var dewpoint2mCount: Int32 { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func dewpoint2m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var dewpoint2m: [Float32] { return _accessor.getVector(at: VTOFFSET.dewpoint2m.v) ?? [] }
  public var hasDiffuseRadiation: Bool { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? false : true }
  public var diffuseRadiationCount: Int32 { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func diffuseRadiation(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var diffuseRadiation: [Float32] { return _accessor.getVector(at: VTOFFSET.diffuseRadiation.v) ?? [] }
  public var hasDirectRadiation: Bool { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? false : true }
  public var directRadiationCount: Int32 { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func directRadiation(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var directRadiation: [Float32] { return _accessor.getVector(at: VTOFFSET.directRadiation.v) ?? [] }
  public var hasApparentTemperature: Bool { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? false : true }
  public var apparentTemperatureCount: Int32 { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func apparentTemperature(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var apparentTemperature: [Float32] { return _accessor.getVector(at: VTOFFSET.apparentTemperature.v) ?? [] }
  public var hasWindspeed10m: Bool { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? false : true }
  public var windspeed10mCount: Int32 { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windspeed10m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windspeed10m: [Float32] { return _accessor.getVector(at: VTOFFSET.windspeed10m.v) ?? [] }
  public var hasWinddirection10m: Bool { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? false : true }
  public var winddirection10mCount: Int32 { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func winddirection10m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var winddirection10m: [Float32] { return _accessor.getVector(at: VTOFFSET.winddirection10m.v) ?? [] }
  public var hasWindspeed80m: Bool { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? false : true }
  public var windspeed80mCount: Int32 { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windspeed80m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windspeed80m: [Float32] { return _accessor.getVector(at: VTOFFSET.windspeed80m.v) ?? [] }
  public var hasWinddirection80m: Bool { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? false : true }
  public var winddirection80mCount: Int32 { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func winddirection80m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var winddirection80m: [Float32] { return _accessor.getVector(at: VTOFFSET.winddirection80m.v) ?? [] }
  public var hasWindspeed120m: Bool { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? false : true }
  public var windspeed120mCount: Int32 { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windspeed120m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windspeed120m: [Float32] { return _accessor.getVector(at: VTOFFSET.windspeed120m.v) ?? [] }
  public var hasWinddirection120m: Bool { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? false : true }
  public var winddirection120mCount: Int32 { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func winddirection120m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var winddirection120m: [Float32] { return _accessor.getVector(at: VTOFFSET.winddirection120m.v) ?? [] }
  public var hasWindspeed180m: Bool { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? false : true }
  public var windspeed180mCount: Int32 { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windspeed180m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windspeed180m: [Float32] { return _accessor.getVector(at: VTOFFSET.windspeed180m.v) ?? [] }
  public var hasWinddirection180m: Bool { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? false : true }
  public var winddirection180mCount: Int32 { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func winddirection180m(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var winddirection180m: [Float32] { return _accessor.getVector(at: VTOFFSET.winddirection180m.v) ?? [] }
  public var hasDirectNormalIrradiance: Bool { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? false : true }
  public var directNormalIrradianceCount: Int32 { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func directNormalIrradiance(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var directNormalIrradiance: [Float32] { return _accessor.getVector(at: VTOFFSET.directNormalIrradiance.v) ?? [] }
  public var hasEvapotranspiration: Bool { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? false : true }
  public var evapotranspirationCount: Int32 { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func evapotranspiration(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var evapotranspiration: [Float32] { return _accessor.getVector(at: VTOFFSET.evapotranspiration.v) ?? [] }
  public var hasEt0FaoEvapotranspiration: Bool { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? false : true }
  public var et0FaoEvapotranspirationCount: Int32 { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func et0FaoEvapotranspiration(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var et0FaoEvapotranspiration: [Float32] { return _accessor.getVector(at: VTOFFSET.et0FaoEvapotranspiration.v) ?? [] }
  public var hasVaporPressureDeficit: Bool { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? false : true }
  public var vaporPressureDeficitCount: Int32 { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func vaporPressureDeficit(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var vaporPressureDeficit: [Float32] { return _accessor.getVector(at: VTOFFSET.vaporPressureDeficit.v) ?? [] }
  public var hasShortwaveRadiation: Bool { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? false : true }
  public var shortwaveRadiationCount: Int32 { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func shortwaveRadiation(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var shortwaveRadiation: [Float32] { return _accessor.getVector(at: VTOFFSET.shortwaveRadiation.v) ?? [] }
  public var hasSnowfall: Bool { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? false : true }
  public var snowfallCount: Int32 { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func snowfall(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var snowfall: [Float32] { return _accessor.getVector(at: VTOFFSET.snowfall.v) ?? [] }
  public var hasSurfacePressure: Bool { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? false : true }
  public var surfacePressureCount: Int32 { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func surfacePressure(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var surfacePressure: [Float32] { return _accessor.getVector(at: VTOFFSET.surfacePressure.v) ?? [] }
  public var hasTerrestrialRadiation: Bool { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? false : true }
  public var terrestrialRadiationCount: Int32 { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func terrestrialRadiation(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var terrestrialRadiation: [Float32] { return _accessor.getVector(at: VTOFFSET.terrestrialRadiation.v) ?? [] }
  public var hasTerrestrialRadiationInstant: Bool { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? false : true }
  public var terrestrialRadiationInstantCount: Int32 { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func terrestrialRadiationInstant(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var terrestrialRadiationInstant: [Float32] { return _accessor.getVector(at: VTOFFSET.terrestrialRadiationInstant.v) ?? [] }
  public var hasShortwaveRadiationInstant: Bool { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? false : true }
  public var shortwaveRadiationInstantCount: Int32 { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func shortwaveRadiationInstant(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var shortwaveRadiationInstant: [Float32] { return _accessor.getVector(at: VTOFFSET.shortwaveRadiationInstant.v) ?? [] }
  public var hasDiffuseRadiationInstant: Bool { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? false : true }
  public var diffuseRadiationInstantCount: Int32 { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func diffuseRadiationInstant(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var diffuseRadiationInstant: [Float32] { return _accessor.getVector(at: VTOFFSET.diffuseRadiationInstant.v) ?? [] }
  public var hasDirectRadiationInstant: Bool { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? false : true }
  public var directRadiationInstantCount: Int32 { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func directRadiationInstant(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var directRadiationInstant: [Float32] { return _accessor.getVector(at: VTOFFSET.directRadiationInstant.v) ?? [] }
  public var hasDirectNormalIrradianceInstant: Bool { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? false : true }
  public var directNormalIrradianceInstantCount: Int32 { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func directNormalIrradianceInstant(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var directNormalIrradianceInstant: [Float32] { return _accessor.getVector(at: VTOFFSET.directNormalIrradianceInstant.v) ?? [] }
  public var hasVisibility: Bool { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? false : true }
  public var visibilityCount: Int32 { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func visibility(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var visibility: [Float32] { return _accessor.getVector(at: VTOFFSET.visibility.v) ?? [] }
  public var hasCape: Bool { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? false : true }
  public var capeCount: Int32 { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cape(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var cape: [Float32] { return _accessor.getVector(at: VTOFFSET.cape.v) ?? [] }
  public var hasUvIndex: Bool { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? false : true }
  public var uvIndexCount: Int32 { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func uvIndex(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var uvIndex: [Float32] { return _accessor.getVector(at: VTOFFSET.uvIndex.v) ?? [] }
  public var hasUvIndexClearSky: Bool { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? false : true }
  public var uvIndexClearSkyCount: Int32 { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func uvIndexClearSky(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var uvIndexClearSky: [Float32] { return _accessor.getVector(at: VTOFFSET.uvIndexClearSky.v) ?? [] }
  public var hasIsDay: Bool { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? false : true }
  public var isDayCount: Int32 { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func isDay(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var isDay: [Float32] { return _accessor.getVector(at: VTOFFSET.isDay.v) ?? [] }
  public var hasSoilTemperature0To10cm: Bool { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? false : true }
  public var soilTemperature0To10cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilTemperature0To10cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilTemperature0To10cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilTemperature0To10cm.v) ?? [] }
  public var hasSoilTemperature10To40cm: Bool { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? false : true }
  public var soilTemperature10To40cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilTemperature10To40cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilTemperature10To40cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilTemperature10To40cm.v) ?? [] }
  public var hasSoilTemperature40To100cm: Bool { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? false : true }
  public var soilTemperature40To100cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilTemperature40To100cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilTemperature40To100cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilTemperature40To100cm.v) ?? [] }
  public var hasSoilTemperature100To200cm: Bool { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? false : true }
  public var soilTemperature100To200cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilTemperature100To200cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilTemperature100To200cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilTemperature100To200cm.v) ?? [] }
  public var hasSoilMoisture0To10cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? false : true }
  public var soilMoisture0To10cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoisture0To10cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoisture0To10cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoisture0To10cm.v) ?? [] }
  public var hasSoilMoisture10To40cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? false : true }
  public var soilMoisture10To40cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoisture10To40cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoisture10To40cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoisture10To40cm.v) ?? [] }
  public var hasSoilMoisture40To100cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? false : true }
  public var soilMoisture40To100cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoisture40To100cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoisture40To100cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoisture40To100cm.v) ?? [] }
  public var hasSoilMoisture100To200cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? false : true }
  public var soilMoisture100To200cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoisture100To200cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoisture100To200cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoisture100To200cm.v) ?? [] }
  public var hasGrowingDegreeDaysBase0Limit50: Bool { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? false : true }
  public var growingDegreeDaysBase0Limit50Count: Int32 { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func growingDegreeDaysBase0Limit50(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var growingDegreeDaysBase0Limit50: [Float32] { return _accessor.getVector(at: VTOFFSET.growingDegreeDaysBase0Limit50.v) ?? [] }
  public var hasLeafWetnessProbability: Bool { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? false : true }
  public var leafWetnessProbabilityCount: Int32 { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func leafWetnessProbability(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var leafWetnessProbability: [Float32] { return _accessor.getVector(at: VTOFFSET.leafWetnessProbability.v) ?? [] }
  public var hasSoilMoistureIndex0To7cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? false : true }
  public var soilMoistureIndex0To7cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoistureIndex0To7cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoistureIndex0To7cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoistureIndex0To7cm.v) ?? [] }
  public var hasSoilMoistureIndex7To28cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? false : true }
  public var soilMoistureIndex7To28cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoistureIndex7To28cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoistureIndex7To28cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoistureIndex7To28cm.v) ?? [] }
  public var hasSoilMoistureIndex28To100cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? false : true }
  public var soilMoistureIndex28To100cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoistureIndex28To100cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoistureIndex28To100cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoistureIndex28To100cm.v) ?? [] }
  public var hasSoilMoistureIndex100To255cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? false : true }
  public var soilMoistureIndex100To255cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoistureIndex100To255cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoistureIndex100To255cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoistureIndex100To255cm.v) ?? [] }
  public var hasSoilMoistureIndex0To100cm: Bool { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? false : true }
  public var soilMoistureIndex0To100cmCount: Int32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func soilMoistureIndex0To100cm(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var soilMoistureIndex0To100cm: [Float32] { return _accessor.getVector(at: VTOFFSET.soilMoistureIndex0To100cm.v) ?? [] }
  public var hasLightningPotential: Bool { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? false : true }
  public var lightningPotentialCount: Int32 { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func lightningPotential(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var lightningPotential: [Float32] { return _accessor.getVector(at: VTOFFSET.lightningPotential.v) ?? [] }
  public var hasTemperatureHpa: Bool { let o = _accessor.offset(VTOFFSET.temperatureHpa.v); return o == 0 ? false : true }
  public var temperatureHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.temperatureHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func temperatureHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.temperatureHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasGeopotentialHeightHpa: Bool { let o = _accessor.offset(VTOFFSET.geopotentialHeightHpa.v); return o == 0 ? false : true }
  public var geopotentialHeightHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.geopotentialHeightHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func geopotentialHeightHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.geopotentialHeightHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasRelativehumidityHpa: Bool { let o = _accessor.offset(VTOFFSET.relativehumidityHpa.v); return o == 0 ? false : true }
  public var relativehumidityHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.relativehumidityHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func relativehumidityHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.relativehumidityHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasWindspeedHpa: Bool { let o = _accessor.offset(VTOFFSET.windspeedHpa.v); return o == 0 ? false : true }
  public var windspeedHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.windspeedHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windspeedHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.windspeedHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasWinddirectionHpa: Bool { let o = _accessor.offset(VTOFFSET.winddirectionHpa.v); return o == 0 ? false : true }
  public var winddirectionHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.winddirectionHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func winddirectionHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.winddirectionHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasDewpointHpa: Bool { let o = _accessor.offset(VTOFFSET.dewpointHpa.v); return o == 0 ? false : true }
  public var dewpointHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.dewpointHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func dewpointHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.dewpointHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasCloudcoverHpa: Bool { let o = _accessor.offset(VTOFFSET.cloudcoverHpa.v); return o == 0 ? false : true }
  public var cloudcoverHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudcoverHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudcoverHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.cloudcoverHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasVerticalVelocityHpa: Bool { let o = _accessor.offset(VTOFFSET.verticalVelocityHpa.v); return o == 0 ? false : true }
  public var verticalVelocityHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.verticalVelocityHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func verticalVelocityHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.verticalVelocityHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var growingDegreeDays: com_openmeteo_api_result_Gdd? { let o = _accessor.offset(VTOFFSET.growingDegreeDays.v); return o == 0 ? nil : com_openmeteo_api_result_Gdd(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var tiltedDirectRadiation: com_openmeteo_api_result_Tilted? { let o = _accessor.offset(VTOFFSET.tiltedDirectRadiation.v); return o == 0 ? nil : com_openmeteo_api_result_Tilted(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 86) }
  public static func addVectorOf(temperture2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperture2m, at: VTOFFSET.temperture2m.p) }
  public static func addVectorOf(cloudcover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover, at: VTOFFSET.cloudcover.p) }
  public static func addVectorOf(cloudcoverLow: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverLow, at: VTOFFSET.cloudcoverLow.p) }
  public static func addVectorOf(cloudcoverMid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMid, at: VTOFFSET.cloudcoverMid.p) }
  public static func addVectorOf(cloudcoverHigh: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverHigh, at: VTOFFSET.cloudcoverHigh.p) }
  public static func addVectorOf(pressureMsl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMsl, at: VTOFFSET.pressureMsl.p) }
  public static func addVectorOf(relativehumidity2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity2m, at: VTOFFSET.relativehumidity2m.p) }
  public static func addVectorOf(precipitation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitation, at: VTOFFSET.precipitation.p) }
  public static func addVectorOf(precipitationProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbability, at: VTOFFSET.precipitationProbability.p) }
  public static func addVectorOf(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func addVectorOf(temperature80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature80m, at: VTOFFSET.temperature80m.p) }
  public static func addVectorOf(temperature120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature120m, at: VTOFFSET.temperature120m.p) }
  public static func addVectorOf(temperature180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature180m, at: VTOFFSET.temperature180m.p) }
  public static func addVectorOf(soilTemperature0cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0cm, at: VTOFFSET.soilTemperature0cm.p) }
  public static func addVectorOf(soilTemperature6cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature6cm, at: VTOFFSET.soilTemperature6cm.p) }
  public static func addVectorOf(soilTemperature18cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature18cm, at: VTOFFSET.soilTemperature18cm.p) }
  public static func addVectorOf(soilTemperature54cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature54cm, at: VTOFFSET.soilTemperature54cm.p) }
  public static func addVectorOf(soilMoisture01cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture01cm, at: VTOFFSET.soilMoisture01cm.p) }
  public static func addVectorOf(soilMoisture13cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture13cm, at: VTOFFSET.soilMoisture13cm.p) }
  public static func addVectorOf(soilMoisture39cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture39cm, at: VTOFFSET.soilMoisture39cm.p) }
  public static func addVectorOf(soilMoisture927cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture927cm, at: VTOFFSET.soilMoisture927cm.p) }
  public static func addVectorOf(soilMoisture2781cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture2781cm, at: VTOFFSET.soilMoisture2781cm.p) }
  public static func addVectorOf(snowDepth: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowDepth, at: VTOFFSET.snowDepth.p) }
  public static func addVectorOf(snowHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowHeight, at: VTOFFSET.snowHeight.p) }
  public static func addVectorOf(sensibleHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sensibleHeatflux, at: VTOFFSET.sensibleHeatflux.p) }
  public static func addVectorOf(latentHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: latentHeatflux, at: VTOFFSET.latentHeatflux.p) }
  public static func addVectorOf(showers: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showers, at: VTOFFSET.showers.p) }
  public static func addVectorOf(rain: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rain, at: VTOFFSET.rain.p) }
  public static func addVectorOf(windgusts10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10m, at: VTOFFSET.windgusts10m.p) }
  public static func addVectorOf(freezinglevelHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: freezinglevelHeight, at: VTOFFSET.freezinglevelHeight.p) }
  public static func addVectorOf(dewpoint2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint2m, at: VTOFFSET.dewpoint2m.p) }
  public static func addVectorOf(diffuseRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiation, at: VTOFFSET.diffuseRadiation.p) }
  public static func addVectorOf(directRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiation, at: VTOFFSET.directRadiation.p) }
  public static func addVectorOf(apparentTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperature, at: VTOFFSET.apparentTemperature.p) }
  public static func addVectorOf(windspeed10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10m, at: VTOFFSET.windspeed10m.p) }
  public static func addVectorOf(winddirection10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10m, at: VTOFFSET.winddirection10m.p) }
  public static func addVectorOf(windspeed80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed80m, at: VTOFFSET.windspeed80m.p) }
  public static func addVectorOf(winddirection80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection80m, at: VTOFFSET.winddirection80m.p) }
  public static func addVectorOf(windspeed120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed120m, at: VTOFFSET.windspeed120m.p) }
  public static func addVectorOf(winddirection120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection120m, at: VTOFFSET.winddirection120m.p) }
  public static func addVectorOf(windspeed180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed180m, at: VTOFFSET.windspeed180m.p) }
  public static func addVectorOf(winddirection180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection180m, at: VTOFFSET.winddirection180m.p) }
  public static func addVectorOf(directNormalIrradiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradiance, at: VTOFFSET.directNormalIrradiance.p) }
  public static func addVectorOf(evapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: evapotranspiration, at: VTOFFSET.evapotranspiration.p) }
  public static func addVectorOf(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func addVectorOf(vaporPressureDeficit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vaporPressureDeficit, at: VTOFFSET.vaporPressureDeficit.p) }
  public static func addVectorOf(shortwaveRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiation, at: VTOFFSET.shortwaveRadiation.p) }
  public static func addVectorOf(snowfall: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfall, at: VTOFFSET.snowfall.p) }
  public static func addVectorOf(surfacePressure: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressure, at: VTOFFSET.surfacePressure.p) }
  public static func addVectorOf(terrestrialRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiation, at: VTOFFSET.terrestrialRadiation.p) }
  public static func addVectorOf(terrestrialRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiationInstant, at: VTOFFSET.terrestrialRadiationInstant.p) }
  public static func addVectorOf(shortwaveRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationInstant, at: VTOFFSET.shortwaveRadiationInstant.p) }
  public static func addVectorOf(diffuseRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiationInstant, at: VTOFFSET.diffuseRadiationInstant.p) }
  public static func addVectorOf(directRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiationInstant, at: VTOFFSET.directRadiationInstant.p) }
  public static func addVectorOf(directNormalIrradianceInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradianceInstant, at: VTOFFSET.directNormalIrradianceInstant.p) }
  public static func addVectorOf(visibility: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibility, at: VTOFFSET.visibility.p) }
  public static func addVectorOf(cape: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cape, at: VTOFFSET.cape.p) }
  public static func addVectorOf(uvIndex: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndex, at: VTOFFSET.uvIndex.p) }
  public static func addVectorOf(uvIndexClearSky: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSky, at: VTOFFSET.uvIndexClearSky.p) }
  public static func addVectorOf(isDay: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: isDay, at: VTOFFSET.isDay.p) }
  public static func addVectorOf(soilTemperature0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To10cm, at: VTOFFSET.soilTemperature0To10cm.p) }
  public static func addVectorOf(soilTemperature10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature10To40cm, at: VTOFFSET.soilTemperature10To40cm.p) }
  public static func addVectorOf(soilTemperature40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature40To100cm, at: VTOFFSET.soilTemperature40To100cm.p) }
  public static func addVectorOf(soilTemperature100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature100To200cm, at: VTOFFSET.soilTemperature100To200cm.p) }
  public static func addVectorOf(soilMoisture0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To10cm, at: VTOFFSET.soilMoisture0To10cm.p) }
  public static func addVectorOf(soilMoisture10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture10To40cm, at: VTOFFSET.soilMoisture10To40cm.p) }
  public static func addVectorOf(soilMoisture40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture40To100cm, at: VTOFFSET.soilMoisture40To100cm.p) }
  public static func addVectorOf(soilMoisture100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture100To200cm, at: VTOFFSET.soilMoisture100To200cm.p) }
  public static func addVectorOf(growingDegreeDaysBase0Limit50: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: growingDegreeDaysBase0Limit50, at: VTOFFSET.growingDegreeDaysBase0Limit50.p) }
  public static func addVectorOf(leafWetnessProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: leafWetnessProbability, at: VTOFFSET.leafWetnessProbability.p) }
  public static func addVectorOf(soilMoistureIndex0To7cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To7cm, at: VTOFFSET.soilMoistureIndex0To7cm.p) }
  public static func addVectorOf(soilMoistureIndex7To28cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex7To28cm, at: VTOFFSET.soilMoistureIndex7To28cm.p) }
  public static func addVectorOf(soilMoistureIndex28To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex28To100cm, at: VTOFFSET.soilMoistureIndex28To100cm.p) }
  public static func addVectorOf(soilMoistureIndex100To255cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex100To255cm, at: VTOFFSET.soilMoistureIndex100To255cm.p) }
  public static func addVectorOf(soilMoistureIndex0To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To100cm, at: VTOFFSET.soilMoistureIndex0To100cm.p) }
  public static func addVectorOf(lightningPotential: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lightningPotential, at: VTOFFSET.lightningPotential.p) }
  public static func addVectorOf(temperatureHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperatureHpa, at: VTOFFSET.temperatureHpa.p) }
  public static func addVectorOf(geopotentialHeightHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeightHpa, at: VTOFFSET.geopotentialHeightHpa.p) }
  public static func addVectorOf(relativehumidityHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidityHpa, at: VTOFFSET.relativehumidityHpa.p) }
  public static func addVectorOf(windspeedHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeedHpa, at: VTOFFSET.windspeedHpa.p) }
  public static func addVectorOf(winddirectionHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirectionHpa, at: VTOFFSET.winddirectionHpa.p) }
  public static func addVectorOf(dewpointHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpointHpa, at: VTOFFSET.dewpointHpa.p) }
  public static func addVectorOf(cloudcoverHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverHpa, at: VTOFFSET.cloudcoverHpa.p) }
  public static func addVectorOf(verticalVelocityHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocityHpa, at: VTOFFSET.verticalVelocityHpa.p) }
  public static func add(growingDegreeDays: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: growingDegreeDays, at: VTOFFSET.growingDegreeDays.p) }
  public static func add(tiltedDirectRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tiltedDirectRadiation, at: VTOFFSET.tiltedDirectRadiation.p) }
  public static func endWeatherHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherHourly(
    _ fbb: inout FlatBufferBuilder,
    temperture2mVectorOffset temperture2m: Offset = Offset(),
    cloudcoverVectorOffset cloudcover: Offset = Offset(),
    cloudcoverLowVectorOffset cloudcoverLow: Offset = Offset(),
    cloudcoverMidVectorOffset cloudcoverMid: Offset = Offset(),
    cloudcoverHighVectorOffset cloudcoverHigh: Offset = Offset(),
    pressureMslVectorOffset pressureMsl: Offset = Offset(),
    relativehumidity2mVectorOffset relativehumidity2m: Offset = Offset(),
    precipitationVectorOffset precipitation: Offset = Offset(),
    precipitationProbabilityVectorOffset precipitationProbability: Offset = Offset(),
    weathercodeVectorOffset weathercode: Offset = Offset(),
    temperature80mVectorOffset temperature80m: Offset = Offset(),
    temperature120mVectorOffset temperature120m: Offset = Offset(),
    temperature180mVectorOffset temperature180m: Offset = Offset(),
    soilTemperature0cmVectorOffset soilTemperature0cm: Offset = Offset(),
    soilTemperature6cmVectorOffset soilTemperature6cm: Offset = Offset(),
    soilTemperature18cmVectorOffset soilTemperature18cm: Offset = Offset(),
    soilTemperature54cmVectorOffset soilTemperature54cm: Offset = Offset(),
    soilMoisture01cmVectorOffset soilMoisture01cm: Offset = Offset(),
    soilMoisture13cmVectorOffset soilMoisture13cm: Offset = Offset(),
    soilMoisture39cmVectorOffset soilMoisture39cm: Offset = Offset(),
    soilMoisture927cmVectorOffset soilMoisture927cm: Offset = Offset(),
    soilMoisture2781cmVectorOffset soilMoisture2781cm: Offset = Offset(),
    snowDepthVectorOffset snowDepth: Offset = Offset(),
    snowHeightVectorOffset snowHeight: Offset = Offset(),
    sensibleHeatfluxVectorOffset sensibleHeatflux: Offset = Offset(),
    latentHeatfluxVectorOffset latentHeatflux: Offset = Offset(),
    showersVectorOffset showers: Offset = Offset(),
    rainVectorOffset rain: Offset = Offset(),
    windgusts10mVectorOffset windgusts10m: Offset = Offset(),
    freezinglevelHeightVectorOffset freezinglevelHeight: Offset = Offset(),
    dewpoint2mVectorOffset dewpoint2m: Offset = Offset(),
    diffuseRadiationVectorOffset diffuseRadiation: Offset = Offset(),
    directRadiationVectorOffset directRadiation: Offset = Offset(),
    apparentTemperatureVectorOffset apparentTemperature: Offset = Offset(),
    windspeed10mVectorOffset windspeed10m: Offset = Offset(),
    winddirection10mVectorOffset winddirection10m: Offset = Offset(),
    windspeed80mVectorOffset windspeed80m: Offset = Offset(),
    winddirection80mVectorOffset winddirection80m: Offset = Offset(),
    windspeed120mVectorOffset windspeed120m: Offset = Offset(),
    winddirection120mVectorOffset winddirection120m: Offset = Offset(),
    windspeed180mVectorOffset windspeed180m: Offset = Offset(),
    winddirection180mVectorOffset winddirection180m: Offset = Offset(),
    directNormalIrradianceVectorOffset directNormalIrradiance: Offset = Offset(),
    evapotranspirationVectorOffset evapotranspiration: Offset = Offset(),
    et0FaoEvapotranspirationVectorOffset et0FaoEvapotranspiration: Offset = Offset(),
    vaporPressureDeficitVectorOffset vaporPressureDeficit: Offset = Offset(),
    shortwaveRadiationVectorOffset shortwaveRadiation: Offset = Offset(),
    snowfallVectorOffset snowfall: Offset = Offset(),
    surfacePressureVectorOffset surfacePressure: Offset = Offset(),
    terrestrialRadiationVectorOffset terrestrialRadiation: Offset = Offset(),
    terrestrialRadiationInstantVectorOffset terrestrialRadiationInstant: Offset = Offset(),
    shortwaveRadiationInstantVectorOffset shortwaveRadiationInstant: Offset = Offset(),
    diffuseRadiationInstantVectorOffset diffuseRadiationInstant: Offset = Offset(),
    directRadiationInstantVectorOffset directRadiationInstant: Offset = Offset(),
    directNormalIrradianceInstantVectorOffset directNormalIrradianceInstant: Offset = Offset(),
    visibilityVectorOffset visibility: Offset = Offset(),
    capeVectorOffset cape: Offset = Offset(),
    uvIndexVectorOffset uvIndex: Offset = Offset(),
    uvIndexClearSkyVectorOffset uvIndexClearSky: Offset = Offset(),
    isDayVectorOffset isDay: Offset = Offset(),
    soilTemperature0To10cmVectorOffset soilTemperature0To10cm: Offset = Offset(),
    soilTemperature10To40cmVectorOffset soilTemperature10To40cm: Offset = Offset(),
    soilTemperature40To100cmVectorOffset soilTemperature40To100cm: Offset = Offset(),
    soilTemperature100To200cmVectorOffset soilTemperature100To200cm: Offset = Offset(),
    soilMoisture0To10cmVectorOffset soilMoisture0To10cm: Offset = Offset(),
    soilMoisture10To40cmVectorOffset soilMoisture10To40cm: Offset = Offset(),
    soilMoisture40To100cmVectorOffset soilMoisture40To100cm: Offset = Offset(),
    soilMoisture100To200cmVectorOffset soilMoisture100To200cm: Offset = Offset(),
    growingDegreeDaysBase0Limit50VectorOffset growingDegreeDaysBase0Limit50: Offset = Offset(),
    leafWetnessProbabilityVectorOffset leafWetnessProbability: Offset = Offset(),
    soilMoistureIndex0To7cmVectorOffset soilMoistureIndex0To7cm: Offset = Offset(),
    soilMoistureIndex7To28cmVectorOffset soilMoistureIndex7To28cm: Offset = Offset(),
    soilMoistureIndex28To100cmVectorOffset soilMoistureIndex28To100cm: Offset = Offset(),
    soilMoistureIndex100To255cmVectorOffset soilMoistureIndex100To255cm: Offset = Offset(),
    soilMoistureIndex0To100cmVectorOffset soilMoistureIndex0To100cm: Offset = Offset(),
    lightningPotentialVectorOffset lightningPotential: Offset = Offset(),
    temperatureHpaVectorOffset temperatureHpa: Offset = Offset(),
    geopotentialHeightHpaVectorOffset geopotentialHeightHpa: Offset = Offset(),
    relativehumidityHpaVectorOffset relativehumidityHpa: Offset = Offset(),
    windspeedHpaVectorOffset windspeedHpa: Offset = Offset(),
    winddirectionHpaVectorOffset winddirectionHpa: Offset = Offset(),
    dewpointHpaVectorOffset dewpointHpa: Offset = Offset(),
    cloudcoverHpaVectorOffset cloudcoverHpa: Offset = Offset(),
    verticalVelocityHpaVectorOffset verticalVelocityHpa: Offset = Offset(),
    growingDegreeDaysOffset growingDegreeDays: Offset = Offset(),
    tiltedDirectRadiationOffset tiltedDirectRadiation: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_WeatherHourly.startWeatherHourly(&fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(temperture2m: temperture2m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(cloudcover: cloudcover, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(cloudcoverLow: cloudcoverLow, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(cloudcoverMid: cloudcoverMid, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(cloudcoverHigh: cloudcoverHigh, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(pressureMsl: pressureMsl, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(relativehumidity2m: relativehumidity2m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(precipitation: precipitation, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(precipitationProbability: precipitationProbability, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(weathercode: weathercode, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(temperature80m: temperature80m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(temperature120m: temperature120m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(temperature180m: temperature180m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilTemperature0cm: soilTemperature0cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilTemperature6cm: soilTemperature6cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilTemperature18cm: soilTemperature18cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilTemperature54cm: soilTemperature54cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoisture01cm: soilMoisture01cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoisture13cm: soilMoisture13cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoisture39cm: soilMoisture39cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoisture927cm: soilMoisture927cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoisture2781cm: soilMoisture2781cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(snowDepth: snowDepth, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(snowHeight: snowHeight, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(sensibleHeatflux: sensibleHeatflux, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(latentHeatflux: latentHeatflux, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(showers: showers, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(rain: rain, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(windgusts10m: windgusts10m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(freezinglevelHeight: freezinglevelHeight, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(dewpoint2m: dewpoint2m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(diffuseRadiation: diffuseRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(directRadiation: directRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(apparentTemperature: apparentTemperature, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(windspeed10m: windspeed10m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(winddirection10m: winddirection10m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(windspeed80m: windspeed80m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(winddirection80m: winddirection80m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(windspeed120m: windspeed120m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(winddirection120m: winddirection120m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(windspeed180m: windspeed180m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(winddirection180m: winddirection180m, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(directNormalIrradiance: directNormalIrradiance, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(evapotranspiration: evapotranspiration, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(vaporPressureDeficit: vaporPressureDeficit, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(shortwaveRadiation: shortwaveRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(snowfall: snowfall, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(surfacePressure: surfacePressure, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(terrestrialRadiation: terrestrialRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(terrestrialRadiationInstant: terrestrialRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(shortwaveRadiationInstant: shortwaveRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(diffuseRadiationInstant: diffuseRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(directRadiationInstant: directRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(directNormalIrradianceInstant: directNormalIrradianceInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(visibility: visibility, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(cape: cape, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(uvIndex: uvIndex, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(isDay: isDay, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilTemperature0To10cm: soilTemperature0To10cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilTemperature10To40cm: soilTemperature10To40cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilTemperature40To100cm: soilTemperature40To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilTemperature100To200cm: soilTemperature100To200cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoisture0To10cm: soilMoisture0To10cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoisture10To40cm: soilMoisture10To40cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoisture40To100cm: soilMoisture40To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoisture100To200cm: soilMoisture100To200cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(growingDegreeDaysBase0Limit50: growingDegreeDaysBase0Limit50, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(leafWetnessProbability: leafWetnessProbability, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoistureIndex0To7cm: soilMoistureIndex0To7cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoistureIndex7To28cm: soilMoistureIndex7To28cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoistureIndex28To100cm: soilMoistureIndex28To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoistureIndex100To255cm: soilMoistureIndex100To255cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(soilMoistureIndex0To100cm: soilMoistureIndex0To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(lightningPotential: lightningPotential, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(temperatureHpa: temperatureHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(geopotentialHeightHpa: geopotentialHeightHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(relativehumidityHpa: relativehumidityHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(windspeedHpa: windspeedHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(winddirectionHpa: winddirectionHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(dewpointHpa: dewpointHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(cloudcoverHpa: cloudcoverHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(verticalVelocityHpa: verticalVelocityHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(growingDegreeDays: growingDegreeDays, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(tiltedDirectRadiation: tiltedDirectRadiation, &fbb)
    return com_openmeteo_api_result_WeatherHourly.endWeatherHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.temperture2m.p, fieldName: "temperture2m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.cloudcover.p, fieldName: "cloudcover", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.cloudcoverLow.p, fieldName: "cloudcoverLow", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMid.p, fieldName: "cloudcoverMid", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.cloudcoverHigh.p, fieldName: "cloudcoverHigh", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.pressureMsl.p, fieldName: "pressureMsl", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.relativehumidity2m.p, fieldName: "relativehumidity2m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.precipitation.p, fieldName: "precipitation", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.precipitationProbability.p, fieldName: "precipitationProbability", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.temperature80m.p, fieldName: "temperature80m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.temperature120m.p, fieldName: "temperature120m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.temperature180m.p, fieldName: "temperature180m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0cm.p, fieldName: "soilTemperature0cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilTemperature6cm.p, fieldName: "soilTemperature6cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilTemperature18cm.p, fieldName: "soilTemperature18cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilTemperature54cm.p, fieldName: "soilTemperature54cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoisture01cm.p, fieldName: "soilMoisture01cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoisture13cm.p, fieldName: "soilMoisture13cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoisture39cm.p, fieldName: "soilMoisture39cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoisture927cm.p, fieldName: "soilMoisture927cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoisture2781cm.p, fieldName: "soilMoisture2781cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.snowDepth.p, fieldName: "snowDepth", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.snowHeight.p, fieldName: "snowHeight", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.sensibleHeatflux.p, fieldName: "sensibleHeatflux", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.latentHeatflux.p, fieldName: "latentHeatflux", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.showers.p, fieldName: "showers", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.rain.p, fieldName: "rain", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windgusts10m.p, fieldName: "windgusts10m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.freezinglevelHeight.p, fieldName: "freezinglevelHeight", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.dewpoint2m.p, fieldName: "dewpoint2m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiation.p, fieldName: "diffuseRadiation", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.directRadiation.p, fieldName: "directRadiation", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.apparentTemperature.p, fieldName: "apparentTemperature", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windspeed10m.p, fieldName: "windspeed10m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.winddirection10m.p, fieldName: "winddirection10m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windspeed80m.p, fieldName: "windspeed80m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.winddirection80m.p, fieldName: "winddirection80m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windspeed120m.p, fieldName: "windspeed120m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.winddirection120m.p, fieldName: "winddirection120m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windspeed180m.p, fieldName: "windspeed180m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.winddirection180m.p, fieldName: "winddirection180m", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradiance.p, fieldName: "directNormalIrradiance", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.evapotranspiration.p, fieldName: "evapotranspiration", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.vaporPressureDeficit.p, fieldName: "vaporPressureDeficit", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiation.p, fieldName: "shortwaveRadiation", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.snowfall.p, fieldName: "snowfall", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.surfacePressure.p, fieldName: "surfacePressure", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiation.p, fieldName: "terrestrialRadiation", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiationInstant.p, fieldName: "terrestrialRadiationInstant", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationInstant.p, fieldName: "shortwaveRadiationInstant", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiationInstant.p, fieldName: "diffuseRadiationInstant", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.directRadiationInstant.p, fieldName: "directRadiationInstant", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradianceInstant.p, fieldName: "directNormalIrradianceInstant", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.visibility.p, fieldName: "visibility", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.cape.p, fieldName: "cape", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To10cm.p, fieldName: "soilTemperature0To10cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilTemperature10To40cm.p, fieldName: "soilTemperature10To40cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilTemperature40To100cm.p, fieldName: "soilTemperature40To100cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To200cm.p, fieldName: "soilTemperature100To200cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To10cm.p, fieldName: "soilMoisture0To10cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoisture10To40cm.p, fieldName: "soilMoisture10To40cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoisture40To100cm.p, fieldName: "soilMoisture40To100cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To200cm.p, fieldName: "soilMoisture100To200cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.growingDegreeDaysBase0Limit50.p, fieldName: "growingDegreeDaysBase0Limit50", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.leafWetnessProbability.p, fieldName: "leafWetnessProbability", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To7cm.p, fieldName: "soilMoistureIndex0To7cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex7To28cm.p, fieldName: "soilMoistureIndex7To28cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex28To100cm.p, fieldName: "soilMoistureIndex28To100cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex100To255cm.p, fieldName: "soilMoistureIndex100To255cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To100cm.p, fieldName: "soilMoistureIndex0To100cm", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.lightningPotential.p, fieldName: "lightningPotential", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.temperatureHpa.p, fieldName: "temperatureHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeightHpa.p, fieldName: "geopotentialHeightHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.relativehumidityHpa.p, fieldName: "relativehumidityHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.windspeedHpa.p, fieldName: "windspeedHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.winddirectionHpa.p, fieldName: "winddirectionHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.dewpointHpa.p, fieldName: "dewpointHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.cloudcoverHpa.p, fieldName: "cloudcoverHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.verticalVelocityHpa.p, fieldName: "verticalVelocityHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.growingDegreeDays.p, fieldName: "growingDegreeDays", required: false, type: ForwardOffset<com_openmeteo_api_result_Gdd>.self)
    try _v.visit(field: VTOFFSET.tiltedDirectRadiation.p, fieldName: "tiltedDirectRadiation", required: false, type: ForwardOffset<com_openmeteo_api_result_Tilted>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_WeatherHourlyUnit: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case temperture2m = 4
    case cloudcover = 6
    case cloudcoverLow = 8
    case cloudcoverMid = 10
    case cloudcoverHigh = 12
    case pressureMsl = 14
    case relativehumidity2m = 16
    case precipitation = 18
    case precipitationProbability = 20
    case weathercode = 22
    case temperature80m = 24
    case temperature120m = 26
    case temperature180m = 28
    case soilTemperature0cm = 30
    case soilTemperature6cm = 32
    case soilTemperature18cm = 34
    case soilTemperature54cm = 36
    case soilMoisture01cm = 38
    case soilMoisture13cm = 40
    case soilMoisture39cm = 42
    case soilMoisture927cm = 44
    case soilMoisture2781cm = 46
    case snowDepth = 48
    case snowHeight = 50
    case sensibleHeatflux = 52
    case latentHeatflux = 54
    case showers = 56
    case rain = 58
    case windgusts10m = 60
    case freezinglevelHeight = 62
    case dewpoint2m = 64
    case diffuseRadiation = 66
    case directRadiation = 68
    case apparentTemperature = 70
    case windspeed10m = 72
    case winddirection10m = 74
    case windspeed80m = 76
    case winddirection80m = 78
    case windspeed120m = 80
    case winddirection120m = 82
    case windspeed180m = 84
    case winddirection180m = 86
    case directNormalIrradiance = 88
    case evapotranspiration = 90
    case et0FaoEvapotranspiration = 92
    case vaporPressureDeficit = 94
    case shortwaveRadiation = 96
    case snowfall = 98
    case surfacePressure = 100
    case terrestrialRadiation = 102
    case terrestrialRadiationInstant = 104
    case shortwaveRadiationInstant = 106
    case diffuseRadiationInstant = 108
    case directRadiationInstant = 110
    case directNormalIrradianceInstant = 112
    case visibility = 114
    case cape = 116
    case uvIndex = 118
    case uvIndexClearSky = 120
    case isDay = 122
    case soilTemperature0To10cm = 124
    case soilTemperature10To40cm = 126
    case soilTemperature40To100cm = 128
    case soilTemperature100To200cm = 130
    case soilMoisture0To10cm = 132
    case soilMoisture10To40cm = 134
    case soilMoisture40To100cm = 136
    case soilMoisture100To200cm = 138
    case growingDegreeDaysBase0Limit50 = 140
    case leafWetnessProbability = 142
    case soilMoistureIndex0To7cm = 144
    case soilMoistureIndex7To28cm = 146
    case soilMoistureIndex28To100cm = 148
    case soilMoistureIndex100To255cm = 150
    case soilMoistureIndex0To100cm = 152
    case lightningPotential = 154
    case temperatureHpa = 156
    case geopotentialHeightHpa = 158
    case relativehumidityHpa = 160
    case windspeedHpa = 162
    case winddirectionHpa = 164
    case dewpointHpa = 166
    case cloudcoverHpa = 168
    case verticalVelocityHpa = 170
    case growingDegreeDays = 172
    case tiltedDirectRadiation = 174
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var temperture2m: SiUnit { let o = _accessor.offset(VTOFFSET.temperture2m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var cloudcover: SiUnit { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var cloudcoverLow: SiUnit { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var cloudcoverMid: SiUnit { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var cloudcoverHigh: SiUnit { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var pressureMsl: SiUnit { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var relativehumidity2m: SiUnit { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var precipitation: SiUnit { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var precipitationProbability: SiUnit { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var weathercode: SiUnit { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var temperature80m: SiUnit { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var temperature120m: SiUnit { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var temperature180m: SiUnit { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilTemperature0cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilTemperature6cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilTemperature18cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilTemperature54cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoisture01cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoisture01cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoisture13cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoisture13cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoisture39cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoisture39cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoisture927cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoisture927cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoisture2781cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoisture2781cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var snowDepth: SiUnit { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var snowHeight: SiUnit { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var sensibleHeatflux: SiUnit { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var latentHeatflux: SiUnit { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var showers: SiUnit { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var rain: SiUnit { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windgusts10m: SiUnit { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var freezinglevelHeight: SiUnit { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var dewpoint2m: SiUnit { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var diffuseRadiation: SiUnit { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var directRadiation: SiUnit { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var apparentTemperature: SiUnit { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windspeed10m: SiUnit { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var winddirection10m: SiUnit { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windspeed80m: SiUnit { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var winddirection80m: SiUnit { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windspeed120m: SiUnit { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var winddirection120m: SiUnit { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windspeed180m: SiUnit { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var winddirection180m: SiUnit { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var directNormalIrradiance: SiUnit { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var evapotranspiration: SiUnit { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var et0FaoEvapotranspiration: SiUnit { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var vaporPressureDeficit: SiUnit { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var shortwaveRadiation: SiUnit { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var snowfall: SiUnit { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var surfacePressure: SiUnit { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var terrestrialRadiation: SiUnit { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var terrestrialRadiationInstant: SiUnit { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var shortwaveRadiationInstant: SiUnit { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var diffuseRadiationInstant: SiUnit { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var directRadiationInstant: SiUnit { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var directNormalIrradianceInstant: SiUnit { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var visibility: SiUnit { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var cape: SiUnit { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var uvIndex: SiUnit { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var uvIndexClearSky: SiUnit { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var isDay: SiUnit { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilTemperature0To10cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilTemperature10To40cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilTemperature40To100cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilTemperature100To200cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoisture0To10cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoisture10To40cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoisture40To100cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoisture100To200cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var growingDegreeDaysBase0Limit50: SiUnit { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var leafWetnessProbability: SiUnit { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoistureIndex0To7cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoistureIndex7To28cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoistureIndex28To100cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoistureIndex100To255cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var soilMoistureIndex0To100cm: SiUnit { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var lightningPotential: SiUnit { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var temperatureHpa: SiUnit { let o = _accessor.offset(VTOFFSET.temperatureHpa.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var geopotentialHeightHpa: SiUnit { let o = _accessor.offset(VTOFFSET.geopotentialHeightHpa.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var relativehumidityHpa: SiUnit { let o = _accessor.offset(VTOFFSET.relativehumidityHpa.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windspeedHpa: SiUnit { let o = _accessor.offset(VTOFFSET.windspeedHpa.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var winddirectionHpa: SiUnit { let o = _accessor.offset(VTOFFSET.winddirectionHpa.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var dewpointHpa: SiUnit { let o = _accessor.offset(VTOFFSET.dewpointHpa.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var cloudcoverHpa: SiUnit { let o = _accessor.offset(VTOFFSET.cloudcoverHpa.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var verticalVelocityHpa: SiUnit { let o = _accessor.offset(VTOFFSET.verticalVelocityHpa.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var growingDegreeDays: SiUnit { let o = _accessor.offset(VTOFFSET.growingDegreeDays.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var tiltedDirectRadiation: SiUnit { let o = _accessor.offset(VTOFFSET.tiltedDirectRadiation.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public static func startWeatherHourlyUnit(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 86) }
  public static func add(temperture2m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: temperture2m.rawValue, def: 0, at: VTOFFSET.temperture2m.p) }
  public static func add(cloudcover: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cloudcover.rawValue, def: 0, at: VTOFFSET.cloudcover.p) }
  public static func add(cloudcoverLow: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cloudcoverLow.rawValue, def: 0, at: VTOFFSET.cloudcoverLow.p) }
  public static func add(cloudcoverMid: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cloudcoverMid.rawValue, def: 0, at: VTOFFSET.cloudcoverMid.p) }
  public static func add(cloudcoverHigh: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cloudcoverHigh.rawValue, def: 0, at: VTOFFSET.cloudcoverHigh.p) }
  public static func add(pressureMsl: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pressureMsl.rawValue, def: 0, at: VTOFFSET.pressureMsl.p) }
  public static func add(relativehumidity2m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relativehumidity2m.rawValue, def: 0, at: VTOFFSET.relativehumidity2m.p) }
  public static func add(precipitation: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: precipitation.rawValue, def: 0, at: VTOFFSET.precipitation.p) }
  public static func add(precipitationProbability: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: precipitationProbability.rawValue, def: 0, at: VTOFFSET.precipitationProbability.p) }
  public static func add(weathercode: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: weathercode.rawValue, def: 0, at: VTOFFSET.weathercode.p) }
  public static func add(temperature80m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: temperature80m.rawValue, def: 0, at: VTOFFSET.temperature80m.p) }
  public static func add(temperature120m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: temperature120m.rawValue, def: 0, at: VTOFFSET.temperature120m.p) }
  public static func add(temperature180m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: temperature180m.rawValue, def: 0, at: VTOFFSET.temperature180m.p) }
  public static func add(soilTemperature0cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilTemperature0cm.rawValue, def: 0, at: VTOFFSET.soilTemperature0cm.p) }
  public static func add(soilTemperature6cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilTemperature6cm.rawValue, def: 0, at: VTOFFSET.soilTemperature6cm.p) }
  public static func add(soilTemperature18cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilTemperature18cm.rawValue, def: 0, at: VTOFFSET.soilTemperature18cm.p) }
  public static func add(soilTemperature54cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilTemperature54cm.rawValue, def: 0, at: VTOFFSET.soilTemperature54cm.p) }
  public static func add(soilMoisture01cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture01cm.rawValue, def: 0, at: VTOFFSET.soilMoisture01cm.p) }
  public static func add(soilMoisture13cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture13cm.rawValue, def: 0, at: VTOFFSET.soilMoisture13cm.p) }
  public static func add(soilMoisture39cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture39cm.rawValue, def: 0, at: VTOFFSET.soilMoisture39cm.p) }
  public static func add(soilMoisture927cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture927cm.rawValue, def: 0, at: VTOFFSET.soilMoisture927cm.p) }
  public static func add(soilMoisture2781cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture2781cm.rawValue, def: 0, at: VTOFFSET.soilMoisture2781cm.p) }
  public static func add(snowDepth: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: snowDepth.rawValue, def: 0, at: VTOFFSET.snowDepth.p) }
  public static func add(snowHeight: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: snowHeight.rawValue, def: 0, at: VTOFFSET.snowHeight.p) }
  public static func add(sensibleHeatflux: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: sensibleHeatflux.rawValue, def: 0, at: VTOFFSET.sensibleHeatflux.p) }
  public static func add(latentHeatflux: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latentHeatflux.rawValue, def: 0, at: VTOFFSET.latentHeatflux.p) }
  public static func add(showers: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: showers.rawValue, def: 0, at: VTOFFSET.showers.p) }
  public static func add(rain: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: rain.rawValue, def: 0, at: VTOFFSET.rain.p) }
  public static func add(windgusts10m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windgusts10m.rawValue, def: 0, at: VTOFFSET.windgusts10m.p) }
  public static func add(freezinglevelHeight: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: freezinglevelHeight.rawValue, def: 0, at: VTOFFSET.freezinglevelHeight.p) }
  public static func add(dewpoint2m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dewpoint2m.rawValue, def: 0, at: VTOFFSET.dewpoint2m.p) }
  public static func add(diffuseRadiation: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: diffuseRadiation.rawValue, def: 0, at: VTOFFSET.diffuseRadiation.p) }
  public static func add(directRadiation: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: directRadiation.rawValue, def: 0, at: VTOFFSET.directRadiation.p) }
  public static func add(apparentTemperature: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: apparentTemperature.rawValue, def: 0, at: VTOFFSET.apparentTemperature.p) }
  public static func add(windspeed10m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windspeed10m.rawValue, def: 0, at: VTOFFSET.windspeed10m.p) }
  public static func add(winddirection10m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: winddirection10m.rawValue, def: 0, at: VTOFFSET.winddirection10m.p) }
  public static func add(windspeed80m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windspeed80m.rawValue, def: 0, at: VTOFFSET.windspeed80m.p) }
  public static func add(winddirection80m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: winddirection80m.rawValue, def: 0, at: VTOFFSET.winddirection80m.p) }
  public static func add(windspeed120m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windspeed120m.rawValue, def: 0, at: VTOFFSET.windspeed120m.p) }
  public static func add(winddirection120m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: winddirection120m.rawValue, def: 0, at: VTOFFSET.winddirection120m.p) }
  public static func add(windspeed180m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windspeed180m.rawValue, def: 0, at: VTOFFSET.windspeed180m.p) }
  public static func add(winddirection180m: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: winddirection180m.rawValue, def: 0, at: VTOFFSET.winddirection180m.p) }
  public static func add(directNormalIrradiance: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: directNormalIrradiance.rawValue, def: 0, at: VTOFFSET.directNormalIrradiance.p) }
  public static func add(evapotranspiration: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: evapotranspiration.rawValue, def: 0, at: VTOFFSET.evapotranspiration.p) }
  public static func add(et0FaoEvapotranspiration: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: et0FaoEvapotranspiration.rawValue, def: 0, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(vaporPressureDeficit: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: vaporPressureDeficit.rawValue, def: 0, at: VTOFFSET.vaporPressureDeficit.p) }
  public static func add(shortwaveRadiation: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: shortwaveRadiation.rawValue, def: 0, at: VTOFFSET.shortwaveRadiation.p) }
  public static func add(snowfall: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: snowfall.rawValue, def: 0, at: VTOFFSET.snowfall.p) }
  public static func add(surfacePressure: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: surfacePressure.rawValue, def: 0, at: VTOFFSET.surfacePressure.p) }
  public static func add(terrestrialRadiation: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: terrestrialRadiation.rawValue, def: 0, at: VTOFFSET.terrestrialRadiation.p) }
  public static func add(terrestrialRadiationInstant: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: terrestrialRadiationInstant.rawValue, def: 0, at: VTOFFSET.terrestrialRadiationInstant.p) }
  public static func add(shortwaveRadiationInstant: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: shortwaveRadiationInstant.rawValue, def: 0, at: VTOFFSET.shortwaveRadiationInstant.p) }
  public static func add(diffuseRadiationInstant: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: diffuseRadiationInstant.rawValue, def: 0, at: VTOFFSET.diffuseRadiationInstant.p) }
  public static func add(directRadiationInstant: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: directRadiationInstant.rawValue, def: 0, at: VTOFFSET.directRadiationInstant.p) }
  public static func add(directNormalIrradianceInstant: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: directNormalIrradianceInstant.rawValue, def: 0, at: VTOFFSET.directNormalIrradianceInstant.p) }
  public static func add(visibility: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: visibility.rawValue, def: 0, at: VTOFFSET.visibility.p) }
  public static func add(cape: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cape.rawValue, def: 0, at: VTOFFSET.cape.p) }
  public static func add(uvIndex: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uvIndex.rawValue, def: 0, at: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: uvIndexClearSky.rawValue, def: 0, at: VTOFFSET.uvIndexClearSky.p) }
  public static func add(isDay: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: isDay.rawValue, def: 0, at: VTOFFSET.isDay.p) }
  public static func add(soilTemperature0To10cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilTemperature0To10cm.rawValue, def: 0, at: VTOFFSET.soilTemperature0To10cm.p) }
  public static func add(soilTemperature10To40cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilTemperature10To40cm.rawValue, def: 0, at: VTOFFSET.soilTemperature10To40cm.p) }
  public static func add(soilTemperature40To100cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilTemperature40To100cm.rawValue, def: 0, at: VTOFFSET.soilTemperature40To100cm.p) }
  public static func add(soilTemperature100To200cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilTemperature100To200cm.rawValue, def: 0, at: VTOFFSET.soilTemperature100To200cm.p) }
  public static func add(soilMoisture0To10cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture0To10cm.rawValue, def: 0, at: VTOFFSET.soilMoisture0To10cm.p) }
  public static func add(soilMoisture10To40cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture10To40cm.rawValue, def: 0, at: VTOFFSET.soilMoisture10To40cm.p) }
  public static func add(soilMoisture40To100cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture40To100cm.rawValue, def: 0, at: VTOFFSET.soilMoisture40To100cm.p) }
  public static func add(soilMoisture100To200cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoisture100To200cm.rawValue, def: 0, at: VTOFFSET.soilMoisture100To200cm.p) }
  public static func add(growingDegreeDaysBase0Limit50: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: growingDegreeDaysBase0Limit50.rawValue, def: 0, at: VTOFFSET.growingDegreeDaysBase0Limit50.p) }
  public static func add(leafWetnessProbability: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: leafWetnessProbability.rawValue, def: 0, at: VTOFFSET.leafWetnessProbability.p) }
  public static func add(soilMoistureIndex0To7cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoistureIndex0To7cm.rawValue, def: 0, at: VTOFFSET.soilMoistureIndex0To7cm.p) }
  public static func add(soilMoistureIndex7To28cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoistureIndex7To28cm.rawValue, def: 0, at: VTOFFSET.soilMoistureIndex7To28cm.p) }
  public static func add(soilMoistureIndex28To100cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoistureIndex28To100cm.rawValue, def: 0, at: VTOFFSET.soilMoistureIndex28To100cm.p) }
  public static func add(soilMoistureIndex100To255cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoistureIndex100To255cm.rawValue, def: 0, at: VTOFFSET.soilMoistureIndex100To255cm.p) }
  public static func add(soilMoistureIndex0To100cm: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: soilMoistureIndex0To100cm.rawValue, def: 0, at: VTOFFSET.soilMoistureIndex0To100cm.p) }
  public static func add(lightningPotential: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: lightningPotential.rawValue, def: 0, at: VTOFFSET.lightningPotential.p) }
  public static func add(temperatureHpa: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: temperatureHpa.rawValue, def: 0, at: VTOFFSET.temperatureHpa.p) }
  public static func add(geopotentialHeightHpa: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: geopotentialHeightHpa.rawValue, def: 0, at: VTOFFSET.geopotentialHeightHpa.p) }
  public static func add(relativehumidityHpa: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: relativehumidityHpa.rawValue, def: 0, at: VTOFFSET.relativehumidityHpa.p) }
  public static func add(windspeedHpa: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windspeedHpa.rawValue, def: 0, at: VTOFFSET.windspeedHpa.p) }
  public static func add(winddirectionHpa: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: winddirectionHpa.rawValue, def: 0, at: VTOFFSET.winddirectionHpa.p) }
  public static func add(dewpointHpa: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: dewpointHpa.rawValue, def: 0, at: VTOFFSET.dewpointHpa.p) }
  public static func add(cloudcoverHpa: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: cloudcoverHpa.rawValue, def: 0, at: VTOFFSET.cloudcoverHpa.p) }
  public static func add(verticalVelocityHpa: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: verticalVelocityHpa.rawValue, def: 0, at: VTOFFSET.verticalVelocityHpa.p) }
  public static func add(growingDegreeDays: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: growingDegreeDays.rawValue, def: 0, at: VTOFFSET.growingDegreeDays.p) }
  public static func add(tiltedDirectRadiation: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tiltedDirectRadiation.rawValue, def: 0, at: VTOFFSET.tiltedDirectRadiation.p) }
  public static func endWeatherHourlyUnit(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherHourlyUnit(
    _ fbb: inout FlatBufferBuilder,
    temperture2m: SiUnit = .undefined,
    cloudcover: SiUnit = .undefined,
    cloudcoverLow: SiUnit = .undefined,
    cloudcoverMid: SiUnit = .undefined,
    cloudcoverHigh: SiUnit = .undefined,
    pressureMsl: SiUnit = .undefined,
    relativehumidity2m: SiUnit = .undefined,
    precipitation: SiUnit = .undefined,
    precipitationProbability: SiUnit = .undefined,
    weathercode: SiUnit = .undefined,
    temperature80m: SiUnit = .undefined,
    temperature120m: SiUnit = .undefined,
    temperature180m: SiUnit = .undefined,
    soilTemperature0cm: SiUnit = .undefined,
    soilTemperature6cm: SiUnit = .undefined,
    soilTemperature18cm: SiUnit = .undefined,
    soilTemperature54cm: SiUnit = .undefined,
    soilMoisture01cm: SiUnit = .undefined,
    soilMoisture13cm: SiUnit = .undefined,
    soilMoisture39cm: SiUnit = .undefined,
    soilMoisture927cm: SiUnit = .undefined,
    soilMoisture2781cm: SiUnit = .undefined,
    snowDepth: SiUnit = .undefined,
    snowHeight: SiUnit = .undefined,
    sensibleHeatflux: SiUnit = .undefined,
    latentHeatflux: SiUnit = .undefined,
    showers: SiUnit = .undefined,
    rain: SiUnit = .undefined,
    windgusts10m: SiUnit = .undefined,
    freezinglevelHeight: SiUnit = .undefined,
    dewpoint2m: SiUnit = .undefined,
    diffuseRadiation: SiUnit = .undefined,
    directRadiation: SiUnit = .undefined,
    apparentTemperature: SiUnit = .undefined,
    windspeed10m: SiUnit = .undefined,
    winddirection10m: SiUnit = .undefined,
    windspeed80m: SiUnit = .undefined,
    winddirection80m: SiUnit = .undefined,
    windspeed120m: SiUnit = .undefined,
    winddirection120m: SiUnit = .undefined,
    windspeed180m: SiUnit = .undefined,
    winddirection180m: SiUnit = .undefined,
    directNormalIrradiance: SiUnit = .undefined,
    evapotranspiration: SiUnit = .undefined,
    et0FaoEvapotranspiration: SiUnit = .undefined,
    vaporPressureDeficit: SiUnit = .undefined,
    shortwaveRadiation: SiUnit = .undefined,
    snowfall: SiUnit = .undefined,
    surfacePressure: SiUnit = .undefined,
    terrestrialRadiation: SiUnit = .undefined,
    terrestrialRadiationInstant: SiUnit = .undefined,
    shortwaveRadiationInstant: SiUnit = .undefined,
    diffuseRadiationInstant: SiUnit = .undefined,
    directRadiationInstant: SiUnit = .undefined,
    directNormalIrradianceInstant: SiUnit = .undefined,
    visibility: SiUnit = .undefined,
    cape: SiUnit = .undefined,
    uvIndex: SiUnit = .undefined,
    uvIndexClearSky: SiUnit = .undefined,
    isDay: SiUnit = .undefined,
    soilTemperature0To10cm: SiUnit = .undefined,
    soilTemperature10To40cm: SiUnit = .undefined,
    soilTemperature40To100cm: SiUnit = .undefined,
    soilTemperature100To200cm: SiUnit = .undefined,
    soilMoisture0To10cm: SiUnit = .undefined,
    soilMoisture10To40cm: SiUnit = .undefined,
    soilMoisture40To100cm: SiUnit = .undefined,
    soilMoisture100To200cm: SiUnit = .undefined,
    growingDegreeDaysBase0Limit50: SiUnit = .undefined,
    leafWetnessProbability: SiUnit = .undefined,
    soilMoistureIndex0To7cm: SiUnit = .undefined,
    soilMoistureIndex7To28cm: SiUnit = .undefined,
    soilMoistureIndex28To100cm: SiUnit = .undefined,
    soilMoistureIndex100To255cm: SiUnit = .undefined,
    soilMoistureIndex0To100cm: SiUnit = .undefined,
    lightningPotential: SiUnit = .undefined,
    temperatureHpa: SiUnit = .undefined,
    geopotentialHeightHpa: SiUnit = .undefined,
    relativehumidityHpa: SiUnit = .undefined,
    windspeedHpa: SiUnit = .undefined,
    winddirectionHpa: SiUnit = .undefined,
    dewpointHpa: SiUnit = .undefined,
    cloudcoverHpa: SiUnit = .undefined,
    verticalVelocityHpa: SiUnit = .undefined,
    growingDegreeDays: SiUnit = .undefined,
    tiltedDirectRadiation: SiUnit = .undefined
  ) -> Offset {
    let __start = com_openmeteo_api_result_WeatherHourlyUnit.startWeatherHourlyUnit(&fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(temperture2m: temperture2m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(cloudcover: cloudcover, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(cloudcoverLow: cloudcoverLow, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(cloudcoverMid: cloudcoverMid, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(cloudcoverHigh: cloudcoverHigh, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(pressureMsl: pressureMsl, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(relativehumidity2m: relativehumidity2m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(precipitation: precipitation, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(precipitationProbability: precipitationProbability, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(weathercode: weathercode, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(temperature80m: temperature80m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(temperature120m: temperature120m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(temperature180m: temperature180m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilTemperature0cm: soilTemperature0cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilTemperature6cm: soilTemperature6cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilTemperature18cm: soilTemperature18cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilTemperature54cm: soilTemperature54cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoisture01cm: soilMoisture01cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoisture13cm: soilMoisture13cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoisture39cm: soilMoisture39cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoisture927cm: soilMoisture927cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoisture2781cm: soilMoisture2781cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(snowDepth: snowDepth, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(snowHeight: snowHeight, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(sensibleHeatflux: sensibleHeatflux, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(latentHeatflux: latentHeatflux, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(showers: showers, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(rain: rain, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(windgusts10m: windgusts10m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(freezinglevelHeight: freezinglevelHeight, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(dewpoint2m: dewpoint2m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(diffuseRadiation: diffuseRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(directRadiation: directRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(apparentTemperature: apparentTemperature, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(windspeed10m: windspeed10m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(winddirection10m: winddirection10m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(windspeed80m: windspeed80m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(winddirection80m: winddirection80m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(windspeed120m: windspeed120m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(winddirection120m: winddirection120m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(windspeed180m: windspeed180m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(winddirection180m: winddirection180m, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(directNormalIrradiance: directNormalIrradiance, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(evapotranspiration: evapotranspiration, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(vaporPressureDeficit: vaporPressureDeficit, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(shortwaveRadiation: shortwaveRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(snowfall: snowfall, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(surfacePressure: surfacePressure, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(terrestrialRadiation: terrestrialRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(terrestrialRadiationInstant: terrestrialRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(shortwaveRadiationInstant: shortwaveRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(diffuseRadiationInstant: diffuseRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(directRadiationInstant: directRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(directNormalIrradianceInstant: directNormalIrradianceInstant, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(visibility: visibility, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(cape: cape, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(isDay: isDay, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilTemperature0To10cm: soilTemperature0To10cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilTemperature10To40cm: soilTemperature10To40cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilTemperature40To100cm: soilTemperature40To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilTemperature100To200cm: soilTemperature100To200cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoisture0To10cm: soilMoisture0To10cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoisture10To40cm: soilMoisture10To40cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoisture40To100cm: soilMoisture40To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoisture100To200cm: soilMoisture100To200cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(growingDegreeDaysBase0Limit50: growingDegreeDaysBase0Limit50, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(leafWetnessProbability: leafWetnessProbability, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoistureIndex0To7cm: soilMoistureIndex0To7cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoistureIndex7To28cm: soilMoistureIndex7To28cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoistureIndex28To100cm: soilMoistureIndex28To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoistureIndex100To255cm: soilMoistureIndex100To255cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(soilMoistureIndex0To100cm: soilMoistureIndex0To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(lightningPotential: lightningPotential, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(temperatureHpa: temperatureHpa, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(geopotentialHeightHpa: geopotentialHeightHpa, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(relativehumidityHpa: relativehumidityHpa, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(windspeedHpa: windspeedHpa, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(winddirectionHpa: winddirectionHpa, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(dewpointHpa: dewpointHpa, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(cloudcoverHpa: cloudcoverHpa, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(verticalVelocityHpa: verticalVelocityHpa, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(growingDegreeDays: growingDegreeDays, &fbb)
    com_openmeteo_api_result_WeatherHourlyUnit.add(tiltedDirectRadiation: tiltedDirectRadiation, &fbb)
    return com_openmeteo_api_result_WeatherHourlyUnit.endWeatherHourlyUnit(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.temperture2m.p, fieldName: "temperture2m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.cloudcover.p, fieldName: "cloudcover", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.cloudcoverLow.p, fieldName: "cloudcoverLow", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.cloudcoverMid.p, fieldName: "cloudcoverMid", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.cloudcoverHigh.p, fieldName: "cloudcoverHigh", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.pressureMsl.p, fieldName: "pressureMsl", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.relativehumidity2m.p, fieldName: "relativehumidity2m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.precipitation.p, fieldName: "precipitation", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.precipitationProbability.p, fieldName: "precipitationProbability", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.temperature80m.p, fieldName: "temperature80m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.temperature120m.p, fieldName: "temperature120m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.temperature180m.p, fieldName: "temperature180m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature0cm.p, fieldName: "soilTemperature0cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature6cm.p, fieldName: "soilTemperature6cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature18cm.p, fieldName: "soilTemperature18cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature54cm.p, fieldName: "soilTemperature54cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture01cm.p, fieldName: "soilMoisture01cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture13cm.p, fieldName: "soilMoisture13cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture39cm.p, fieldName: "soilMoisture39cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture927cm.p, fieldName: "soilMoisture927cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture2781cm.p, fieldName: "soilMoisture2781cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.snowDepth.p, fieldName: "snowDepth", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.snowHeight.p, fieldName: "snowHeight", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.sensibleHeatflux.p, fieldName: "sensibleHeatflux", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.latentHeatflux.p, fieldName: "latentHeatflux", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.showers.p, fieldName: "showers", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.rain.p, fieldName: "rain", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windgusts10m.p, fieldName: "windgusts10m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.freezinglevelHeight.p, fieldName: "freezinglevelHeight", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.dewpoint2m.p, fieldName: "dewpoint2m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.diffuseRadiation.p, fieldName: "diffuseRadiation", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.directRadiation.p, fieldName: "directRadiation", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.apparentTemperature.p, fieldName: "apparentTemperature", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windspeed10m.p, fieldName: "windspeed10m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.winddirection10m.p, fieldName: "winddirection10m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windspeed80m.p, fieldName: "windspeed80m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.winddirection80m.p, fieldName: "winddirection80m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windspeed120m.p, fieldName: "windspeed120m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.winddirection120m.p, fieldName: "winddirection120m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windspeed180m.p, fieldName: "windspeed180m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.winddirection180m.p, fieldName: "winddirection180m", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.directNormalIrradiance.p, fieldName: "directNormalIrradiance", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.evapotranspiration.p, fieldName: "evapotranspiration", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.vaporPressureDeficit.p, fieldName: "vaporPressureDeficit", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiation.p, fieldName: "shortwaveRadiation", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.snowfall.p, fieldName: "snowfall", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.surfacePressure.p, fieldName: "surfacePressure", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiation.p, fieldName: "terrestrialRadiation", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiationInstant.p, fieldName: "terrestrialRadiationInstant", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationInstant.p, fieldName: "shortwaveRadiationInstant", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.diffuseRadiationInstant.p, fieldName: "diffuseRadiationInstant", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.directRadiationInstant.p, fieldName: "directRadiationInstant", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.directNormalIrradianceInstant.p, fieldName: "directNormalIrradianceInstant", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.visibility.p, fieldName: "visibility", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.cape.p, fieldName: "cape", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To10cm.p, fieldName: "soilTemperature0To10cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature10To40cm.p, fieldName: "soilTemperature10To40cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature40To100cm.p, fieldName: "soilTemperature40To100cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To200cm.p, fieldName: "soilTemperature100To200cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To10cm.p, fieldName: "soilMoisture0To10cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture10To40cm.p, fieldName: "soilMoisture10To40cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture40To100cm.p, fieldName: "soilMoisture40To100cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To200cm.p, fieldName: "soilMoisture100To200cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.growingDegreeDaysBase0Limit50.p, fieldName: "growingDegreeDaysBase0Limit50", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.leafWetnessProbability.p, fieldName: "leafWetnessProbability", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To7cm.p, fieldName: "soilMoistureIndex0To7cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex7To28cm.p, fieldName: "soilMoistureIndex7To28cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex28To100cm.p, fieldName: "soilMoistureIndex28To100cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex100To255cm.p, fieldName: "soilMoistureIndex100To255cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To100cm.p, fieldName: "soilMoistureIndex0To100cm", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.lightningPotential.p, fieldName: "lightningPotential", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.temperatureHpa.p, fieldName: "temperatureHpa", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.geopotentialHeightHpa.p, fieldName: "geopotentialHeightHpa", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.relativehumidityHpa.p, fieldName: "relativehumidityHpa", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windspeedHpa.p, fieldName: "windspeedHpa", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.winddirectionHpa.p, fieldName: "winddirectionHpa", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.dewpointHpa.p, fieldName: "dewpointHpa", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.cloudcoverHpa.p, fieldName: "cloudcoverHpa", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.verticalVelocityHpa.p, fieldName: "verticalVelocityHpa", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.growingDegreeDays.p, fieldName: "growingDegreeDays", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.tiltedDirectRadiation.p, fieldName: "tiltedDirectRadiation", required: false, type: SiUnit.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_PressureValues: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case pressureLevel = 4
    case values = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var pressureLevel: Int16 { let o = _accessor.offset(VTOFFSET.pressureLevel.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int16.self, at: o) }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public static func startPressureValues(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(pressureLevel: Int16, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pressureLevel, def: 0, at: VTOFFSET.pressureLevel.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endPressureValues(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPressureValues(
    _ fbb: inout FlatBufferBuilder,
    pressureLevel: Int16 = 0,
    valuesVectorOffset values: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_PressureValues.startPressureValues(&fbb)
    com_openmeteo_api_result_PressureValues.add(pressureLevel: pressureLevel, &fbb)
    com_openmeteo_api_result_PressureValues.addVectorOf(values: values, &fbb)
    return com_openmeteo_api_result_PressureValues.endPressureValues(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.pressureLevel.p, fieldName: "pressureLevel", required: false, type: Int16.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_Gdd: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case limit = 4
    case base = 6
    case values = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var limit: Float32 { let o = _accessor.offset(VTOFFSET.limit.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var base: Float32 { let o = _accessor.offset(VTOFFSET.base.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public static func startGdd(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(limit: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: limit, def: 0.0, at: VTOFFSET.limit.p) }
  public static func add(base: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: base, def: 0.0, at: VTOFFSET.base.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endGdd(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGdd(
    _ fbb: inout FlatBufferBuilder,
    limit: Float32 = 0.0,
    base: Float32 = 0.0,
    valuesVectorOffset values: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_Gdd.startGdd(&fbb)
    com_openmeteo_api_result_Gdd.add(limit: limit, &fbb)
    com_openmeteo_api_result_Gdd.add(base: base, &fbb)
    com_openmeteo_api_result_Gdd.addVectorOf(values: values, &fbb)
    return com_openmeteo_api_result_Gdd.endGdd(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.limit.p, fieldName: "limit", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.base.p, fieldName: "base", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_Tilted: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case tilt = 4
    case azimuth = 6
    case values = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var tilt: Float32 { let o = _accessor.offset(VTOFFSET.tilt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var azimuth: Float32 { let o = _accessor.offset(VTOFFSET.azimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public static func startTilted(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(tilt: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tilt, def: 0.0, at: VTOFFSET.tilt.p) }
  public static func add(azimuth: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuth, def: 0.0, at: VTOFFSET.azimuth.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endTilted(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createTilted(
    _ fbb: inout FlatBufferBuilder,
    tilt: Float32 = 0.0,
    azimuth: Float32 = 0.0,
    valuesVectorOffset values: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_Tilted.startTilted(&fbb)
    com_openmeteo_api_result_Tilted.add(tilt: tilt, &fbb)
    com_openmeteo_api_result_Tilted.add(azimuth: azimuth, &fbb)
    com_openmeteo_api_result_Tilted.addVectorOf(values: values, &fbb)
    return com_openmeteo_api_result_Tilted.endTilted(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.tilt.p, fieldName: "tilt", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.azimuth.p, fieldName: "azimuth", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_WeatherDaily: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case temperature2mMax = 4
    case temperature2mMin = 6
    case temperature2mMean = 8
    case apparentTemperatureMax = 10
    case apparentTemperatureMin = 12
    case apparentTemperatureMean = 14
    case precipitationSum = 16
    case precipitationProbabilityMax = 18
    case precipitationProbabilityMin = 20
    case precipitationProbabilityMean = 22
    case snowfallSum = 24
    case rainSum = 26
    case showersSum = 28
    case weathercode = 30
    case shortwaveRadiationSum = 32
    case windspeed10mMax = 34
    case windspeed10mMin = 36
    case windspeed10mMean = 38
    case windgusts10mMax = 40
    case windgusts10mMin = 42
    case windgusts10mMean = 44
    case winddirection10mDominant = 46
    case precipitationHours = 48
    case sunrise = 50
    case sunset = 52
    case et0FaoEvapotranspiration = 54
    case visibilityMax = 56
    case visibilityMin = 58
    case visibilityMean = 60
    case pressureMslMax = 62
    case pressureMslMin = 64
    case pressureMslMean = 66
    case surfacePressureMax = 68
    case surfacePressureMin = 70
    case surfacePressureMean = 72
    case capeMax = 74
    case capeMin = 76
    case capeMean = 78
    case cloudcoverMax = 80
    case cloudcoverMin = 82
    case cloudcoverMean = 84
    case uvIndexMax = 86
    case uvIndexClearSkyMax = 88
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasTemperature2mMax: Bool { let o = _accessor.offset(VTOFFSET.temperature2mMax.v); return o == 0 ? false : true }
  public var temperature2mMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.temperature2mMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func temperature2mMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.temperature2mMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var temperature2mMax: [Float32] { return _accessor.getVector(at: VTOFFSET.temperature2mMax.v) ?? [] }
  public var hasTemperature2mMin: Bool { let o = _accessor.offset(VTOFFSET.temperature2mMin.v); return o == 0 ? false : true }
  public var temperature2mMinCount: Int32 { let o = _accessor.offset(VTOFFSET.temperature2mMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func temperature2mMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.temperature2mMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var temperature2mMin: [Float32] { return _accessor.getVector(at: VTOFFSET.temperature2mMin.v) ?? [] }
  public var hasTemperature2mMean: Bool { let o = _accessor.offset(VTOFFSET.temperature2mMean.v); return o == 0 ? false : true }
  public var temperature2mMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.temperature2mMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func temperature2mMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.temperature2mMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var temperature2mMean: [Float32] { return _accessor.getVector(at: VTOFFSET.temperature2mMean.v) ?? [] }
  public var hasApparentTemperatureMax: Bool { let o = _accessor.offset(VTOFFSET.apparentTemperatureMax.v); return o == 0 ? false : true }
  public var apparentTemperatureMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.apparentTemperatureMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func apparentTemperatureMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.apparentTemperatureMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var apparentTemperatureMax: [Float32] { return _accessor.getVector(at: VTOFFSET.apparentTemperatureMax.v) ?? [] }
  public var hasApparentTemperatureMin: Bool { let o = _accessor.offset(VTOFFSET.apparentTemperatureMin.v); return o == 0 ? false : true }
  public var apparentTemperatureMinCount: Int32 { let o = _accessor.offset(VTOFFSET.apparentTemperatureMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func apparentTemperatureMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.apparentTemperatureMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var apparentTemperatureMin: [Float32] { return _accessor.getVector(at: VTOFFSET.apparentTemperatureMin.v) ?? [] }
  public var hasApparentTemperatureMean: Bool { let o = _accessor.offset(VTOFFSET.apparentTemperatureMean.v); return o == 0 ? false : true }
  public var apparentTemperatureMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.apparentTemperatureMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func apparentTemperatureMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.apparentTemperatureMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var apparentTemperatureMean: [Float32] { return _accessor.getVector(at: VTOFFSET.apparentTemperatureMean.v) ?? [] }
  public var hasPrecipitationSum: Bool { let o = _accessor.offset(VTOFFSET.precipitationSum.v); return o == 0 ? false : true }
  public var precipitationSumCount: Int32 { let o = _accessor.offset(VTOFFSET.precipitationSum.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func precipitationSum(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.precipitationSum.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var precipitationSum: [Float32] { return _accessor.getVector(at: VTOFFSET.precipitationSum.v) ?? [] }
  public var hasPrecipitationProbabilityMax: Bool { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMax.v); return o == 0 ? false : true }
  public var precipitationProbabilityMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func precipitationProbabilityMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var precipitationProbabilityMax: [Float32] { return _accessor.getVector(at: VTOFFSET.precipitationProbabilityMax.v) ?? [] }
  public var hasPrecipitationProbabilityMin: Bool { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMin.v); return o == 0 ? false : true }
  public var precipitationProbabilityMinCount: Int32 { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func precipitationProbabilityMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var precipitationProbabilityMin: [Float32] { return _accessor.getVector(at: VTOFFSET.precipitationProbabilityMin.v) ?? [] }
  public var hasPrecipitationProbabilityMean: Bool { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMean.v); return o == 0 ? false : true }
  public var precipitationProbabilityMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func precipitationProbabilityMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var precipitationProbabilityMean: [Float32] { return _accessor.getVector(at: VTOFFSET.precipitationProbabilityMean.v) ?? [] }
  public var hasSnowfallSum: Bool { let o = _accessor.offset(VTOFFSET.snowfallSum.v); return o == 0 ? false : true }
  public var snowfallSumCount: Int32 { let o = _accessor.offset(VTOFFSET.snowfallSum.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func snowfallSum(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.snowfallSum.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var snowfallSum: [Float32] { return _accessor.getVector(at: VTOFFSET.snowfallSum.v) ?? [] }
  public var hasRainSum: Bool { let o = _accessor.offset(VTOFFSET.rainSum.v); return o == 0 ? false : true }
  public var rainSumCount: Int32 { let o = _accessor.offset(VTOFFSET.rainSum.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func rainSum(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.rainSum.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var rainSum: [Float32] { return _accessor.getVector(at: VTOFFSET.rainSum.v) ?? [] }
  public var hasShowersSum: Bool { let o = _accessor.offset(VTOFFSET.showersSum.v); return o == 0 ? false : true }
  public var showersSumCount: Int32 { let o = _accessor.offset(VTOFFSET.showersSum.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func showersSum(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.showersSum.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var showersSum: [Float32] { return _accessor.getVector(at: VTOFFSET.showersSum.v) ?? [] }
  public var hasWeathercode: Bool { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? false : true }
  public var weathercodeCount: Int32 { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func weathercode(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var weathercode: [Float32] { return _accessor.getVector(at: VTOFFSET.weathercode.v) ?? [] }
  public var hasShortwaveRadiationSum: Bool { let o = _accessor.offset(VTOFFSET.shortwaveRadiationSum.v); return o == 0 ? false : true }
  public var shortwaveRadiationSumCount: Int32 { let o = _accessor.offset(VTOFFSET.shortwaveRadiationSum.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func shortwaveRadiationSum(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.shortwaveRadiationSum.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var shortwaveRadiationSum: [Float32] { return _accessor.getVector(at: VTOFFSET.shortwaveRadiationSum.v) ?? [] }
  public var hasWindspeed10mMax: Bool { let o = _accessor.offset(VTOFFSET.windspeed10mMax.v); return o == 0 ? false : true }
  public var windspeed10mMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.windspeed10mMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windspeed10mMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windspeed10mMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windspeed10mMax: [Float32] { return _accessor.getVector(at: VTOFFSET.windspeed10mMax.v) ?? [] }
  public var hasWindspeed10mMin: Bool { let o = _accessor.offset(VTOFFSET.windspeed10mMin.v); return o == 0 ? false : true }
  public var windspeed10mMinCount: Int32 { let o = _accessor.offset(VTOFFSET.windspeed10mMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windspeed10mMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windspeed10mMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windspeed10mMin: [Float32] { return _accessor.getVector(at: VTOFFSET.windspeed10mMin.v) ?? [] }
  public var hasWindspeed10mMean: Bool { let o = _accessor.offset(VTOFFSET.windspeed10mMean.v); return o == 0 ? false : true }
  public var windspeed10mMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.windspeed10mMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windspeed10mMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windspeed10mMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windspeed10mMean: [Float32] { return _accessor.getVector(at: VTOFFSET.windspeed10mMean.v) ?? [] }
  public var hasWindgusts10mMax: Bool { let o = _accessor.offset(VTOFFSET.windgusts10mMax.v); return o == 0 ? false : true }
  public var windgusts10mMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.windgusts10mMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windgusts10mMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windgusts10mMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windgusts10mMax: [Float32] { return _accessor.getVector(at: VTOFFSET.windgusts10mMax.v) ?? [] }
  public var hasWindgusts10mMin: Bool { let o = _accessor.offset(VTOFFSET.windgusts10mMin.v); return o == 0 ? false : true }
  public var windgusts10mMinCount: Int32 { let o = _accessor.offset(VTOFFSET.windgusts10mMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windgusts10mMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windgusts10mMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windgusts10mMin: [Float32] { return _accessor.getVector(at: VTOFFSET.windgusts10mMin.v) ?? [] }
  public var hasWindgusts10mMean: Bool { let o = _accessor.offset(VTOFFSET.windgusts10mMean.v); return o == 0 ? false : true }
  public var windgusts10mMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.windgusts10mMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windgusts10mMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windgusts10mMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windgusts10mMean: [Float32] { return _accessor.getVector(at: VTOFFSET.windgusts10mMean.v) ?? [] }
  public var hasWinddirection10mDominant: Bool { let o = _accessor.offset(VTOFFSET.winddirection10mDominant.v); return o == 0 ? false : true }
  public var winddirection10mDominantCount: Int32 { let o = _accessor.offset(VTOFFSET.winddirection10mDominant.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func winddirection10mDominant(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.winddirection10mDominant.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var winddirection10mDominant: [Float32] { return _accessor.getVector(at: VTOFFSET.winddirection10mDominant.v) ?? [] }
  public var hasPrecipitationHours: Bool { let o = _accessor.offset(VTOFFSET.precipitationHours.v); return o == 0 ? false : true }
  public var precipitationHoursCount: Int32 { let o = _accessor.offset(VTOFFSET.precipitationHours.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func precipitationHours(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.precipitationHours.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var precipitationHours: [Float32] { return _accessor.getVector(at: VTOFFSET.precipitationHours.v) ?? [] }
  public var hasSunrise: Bool { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? false : true }
  public var sunriseCount: Int32 { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sunrise(at index: Int32) -> Int64 { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? 0 : _accessor.directRead(of: Int64.self, offset: _accessor.vector(at: o) + index * 8) }
  public var sunrise: [Int64] { return _accessor.getVector(at: VTOFFSET.sunrise.v) ?? [] }
  public var hasSunset: Bool { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? false : true }
  public var sunsetCount: Int32 { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sunset(at index: Int32) -> Int64 { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? 0 : _accessor.directRead(of: Int64.self, offset: _accessor.vector(at: o) + index * 8) }
  public var sunset: [Int64] { return _accessor.getVector(at: VTOFFSET.sunset.v) ?? [] }
  public var hasEt0FaoEvapotranspiration: Bool { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? false : true }
  public var et0FaoEvapotranspirationCount: Int32 { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func et0FaoEvapotranspiration(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var et0FaoEvapotranspiration: [Float32] { return _accessor.getVector(at: VTOFFSET.et0FaoEvapotranspiration.v) ?? [] }
  public var hasVisibilityMax: Bool { let o = _accessor.offset(VTOFFSET.visibilityMax.v); return o == 0 ? false : true }
  public var visibilityMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.visibilityMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func visibilityMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.visibilityMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var visibilityMax: [Float32] { return _accessor.getVector(at: VTOFFSET.visibilityMax.v) ?? [] }
  public var hasVisibilityMin: Bool { let o = _accessor.offset(VTOFFSET.visibilityMin.v); return o == 0 ? false : true }
  public var visibilityMinCount: Int32 { let o = _accessor.offset(VTOFFSET.visibilityMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func visibilityMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.visibilityMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var visibilityMin: [Float32] { return _accessor.getVector(at: VTOFFSET.visibilityMin.v) ?? [] }
  public var hasVisibilityMean: Bool { let o = _accessor.offset(VTOFFSET.visibilityMean.v); return o == 0 ? false : true }
  public var visibilityMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.visibilityMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func visibilityMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.visibilityMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var visibilityMean: [Float32] { return _accessor.getVector(at: VTOFFSET.visibilityMean.v) ?? [] }
  public var hasPressureMslMax: Bool { let o = _accessor.offset(VTOFFSET.pressureMslMax.v); return o == 0 ? false : true }
  public var pressureMslMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.pressureMslMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func pressureMslMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.pressureMslMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var pressureMslMax: [Float32] { return _accessor.getVector(at: VTOFFSET.pressureMslMax.v) ?? [] }
  public var hasPressureMslMin: Bool { let o = _accessor.offset(VTOFFSET.pressureMslMin.v); return o == 0 ? false : true }
  public var pressureMslMinCount: Int32 { let o = _accessor.offset(VTOFFSET.pressureMslMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func pressureMslMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.pressureMslMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var pressureMslMin: [Float32] { return _accessor.getVector(at: VTOFFSET.pressureMslMin.v) ?? [] }
  public var hasPressureMslMean: Bool { let o = _accessor.offset(VTOFFSET.pressureMslMean.v); return o == 0 ? false : true }
  public var pressureMslMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.pressureMslMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func pressureMslMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.pressureMslMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var pressureMslMean: [Float32] { return _accessor.getVector(at: VTOFFSET.pressureMslMean.v) ?? [] }
  public var hasSurfacePressureMax: Bool { let o = _accessor.offset(VTOFFSET.surfacePressureMax.v); return o == 0 ? false : true }
  public var surfacePressureMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.surfacePressureMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func surfacePressureMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.surfacePressureMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var surfacePressureMax: [Float32] { return _accessor.getVector(at: VTOFFSET.surfacePressureMax.v) ?? [] }
  public var hasSurfacePressureMin: Bool { let o = _accessor.offset(VTOFFSET.surfacePressureMin.v); return o == 0 ? false : true }
  public var surfacePressureMinCount: Int32 { let o = _accessor.offset(VTOFFSET.surfacePressureMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func surfacePressureMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.surfacePressureMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var surfacePressureMin: [Float32] { return _accessor.getVector(at: VTOFFSET.surfacePressureMin.v) ?? [] }
  public var hasSurfacePressureMean: Bool { let o = _accessor.offset(VTOFFSET.surfacePressureMean.v); return o == 0 ? false : true }
  public var surfacePressureMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.surfacePressureMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func surfacePressureMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.surfacePressureMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var surfacePressureMean: [Float32] { return _accessor.getVector(at: VTOFFSET.surfacePressureMean.v) ?? [] }
  public var hasCapeMax: Bool { let o = _accessor.offset(VTOFFSET.capeMax.v); return o == 0 ? false : true }
  public var capeMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.capeMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func capeMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.capeMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var capeMax: [Float32] { return _accessor.getVector(at: VTOFFSET.capeMax.v) ?? [] }
  public var hasCapeMin: Bool { let o = _accessor.offset(VTOFFSET.capeMin.v); return o == 0 ? false : true }
  public var capeMinCount: Int32 { let o = _accessor.offset(VTOFFSET.capeMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func capeMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.capeMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var capeMin: [Float32] { return _accessor.getVector(at: VTOFFSET.capeMin.v) ?? [] }
  public var hasCapeMean: Bool { let o = _accessor.offset(VTOFFSET.capeMean.v); return o == 0 ? false : true }
  public var capeMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.capeMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func capeMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.capeMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var capeMean: [Float32] { return _accessor.getVector(at: VTOFFSET.capeMean.v) ?? [] }
  public var hasCloudcoverMax: Bool { let o = _accessor.offset(VTOFFSET.cloudcoverMax.v); return o == 0 ? false : true }
  public var cloudcoverMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudcoverMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudcoverMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.cloudcoverMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var cloudcoverMax: [Float32] { return _accessor.getVector(at: VTOFFSET.cloudcoverMax.v) ?? [] }
  public var hasCloudcoverMin: Bool { let o = _accessor.offset(VTOFFSET.cloudcoverMin.v); return o == 0 ? false : true }
  public var cloudcoverMinCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudcoverMin.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudcoverMin(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.cloudcoverMin.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var cloudcoverMin: [Float32] { return _accessor.getVector(at: VTOFFSET.cloudcoverMin.v) ?? [] }
  public var hasCloudcoverMean: Bool { let o = _accessor.offset(VTOFFSET.cloudcoverMean.v); return o == 0 ? false : true }
  public var cloudcoverMeanCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudcoverMean.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudcoverMean(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.cloudcoverMean.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var cloudcoverMean: [Float32] { return _accessor.getVector(at: VTOFFSET.cloudcoverMean.v) ?? [] }
  public var hasUvIndexMax: Bool { let o = _accessor.offset(VTOFFSET.uvIndexMax.v); return o == 0 ? false : true }
  public var uvIndexMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.uvIndexMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func uvIndexMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.uvIndexMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var uvIndexMax: [Float32] { return _accessor.getVector(at: VTOFFSET.uvIndexMax.v) ?? [] }
  public var hasUvIndexClearSkyMax: Bool { let o = _accessor.offset(VTOFFSET.uvIndexClearSkyMax.v); return o == 0 ? false : true }
  public var uvIndexClearSkyMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.uvIndexClearSkyMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func uvIndexClearSkyMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.uvIndexClearSkyMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var uvIndexClearSkyMax: [Float32] { return _accessor.getVector(at: VTOFFSET.uvIndexClearSkyMax.v) ?? [] }
  public static func startWeatherDaily(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 43) }
  public static func addVectorOf(temperature2mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMax, at: VTOFFSET.temperature2mMax.p) }
  public static func addVectorOf(temperature2mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMin, at: VTOFFSET.temperature2mMin.p) }
  public static func addVectorOf(temperature2mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMean, at: VTOFFSET.temperature2mMean.p) }
  public static func addVectorOf(apparentTemperatureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMax, at: VTOFFSET.apparentTemperatureMax.p) }
  public static func addVectorOf(apparentTemperatureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMin, at: VTOFFSET.apparentTemperatureMin.p) }
  public static func addVectorOf(apparentTemperatureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMean, at: VTOFFSET.apparentTemperatureMean.p) }
  public static func addVectorOf(precipitationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationSum, at: VTOFFSET.precipitationSum.p) }
  public static func addVectorOf(precipitationProbabilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMax, at: VTOFFSET.precipitationProbabilityMax.p) }
  public static func addVectorOf(precipitationProbabilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMin, at: VTOFFSET.precipitationProbabilityMin.p) }
  public static func addVectorOf(precipitationProbabilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMean, at: VTOFFSET.precipitationProbabilityMean.p) }
  public static func addVectorOf(snowfallSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfallSum, at: VTOFFSET.snowfallSum.p) }
  public static func addVectorOf(rainSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rainSum, at: VTOFFSET.rainSum.p) }
  public static func addVectorOf(showersSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showersSum, at: VTOFFSET.showersSum.p) }
  public static func addVectorOf(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func addVectorOf(shortwaveRadiationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationSum, at: VTOFFSET.shortwaveRadiationSum.p) }
  public static func addVectorOf(windspeed10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMax, at: VTOFFSET.windspeed10mMax.p) }
  public static func addVectorOf(windspeed10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMin, at: VTOFFSET.windspeed10mMin.p) }
  public static func addVectorOf(windspeed10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMean, at: VTOFFSET.windspeed10mMean.p) }
  public static func addVectorOf(windgusts10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMax, at: VTOFFSET.windgusts10mMax.p) }
  public static func addVectorOf(windgusts10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMin, at: VTOFFSET.windgusts10mMin.p) }
  public static func addVectorOf(windgusts10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMean, at: VTOFFSET.windgusts10mMean.p) }
  public static func addVectorOf(winddirection10mDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10mDominant, at: VTOFFSET.winddirection10mDominant.p) }
  public static func addVectorOf(precipitationHours: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationHours, at: VTOFFSET.precipitationHours.p) }
  public static func addVectorOf(sunrise: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunrise, at: VTOFFSET.sunrise.p) }
  public static func addVectorOf(sunset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunset, at: VTOFFSET.sunset.p) }
  public static func addVectorOf(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func addVectorOf(visibilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMax, at: VTOFFSET.visibilityMax.p) }
  public static func addVectorOf(visibilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMin, at: VTOFFSET.visibilityMin.p) }
  public static func addVectorOf(visibilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMean, at: VTOFFSET.visibilityMean.p) }
  public static func addVectorOf(pressureMslMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMax, at: VTOFFSET.pressureMslMax.p) }
  public static func addVectorOf(pressureMslMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMin, at: VTOFFSET.pressureMslMin.p) }
  public static func addVectorOf(pressureMslMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMean, at: VTOFFSET.pressureMslMean.p) }
  public static func addVectorOf(surfacePressureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMax, at: VTOFFSET.surfacePressureMax.p) }
  public static func addVectorOf(surfacePressureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMin, at: VTOFFSET.surfacePressureMin.p) }
  public static func addVectorOf(surfacePressureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMean, at: VTOFFSET.surfacePressureMean.p) }
  public static func addVectorOf(capeMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMax, at: VTOFFSET.capeMax.p) }
  public static func addVectorOf(capeMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMin, at: VTOFFSET.capeMin.p) }
  public static func addVectorOf(capeMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMean, at: VTOFFSET.capeMean.p) }
  public static func addVectorOf(cloudcoverMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMax, at: VTOFFSET.cloudcoverMax.p) }
  public static func addVectorOf(cloudcoverMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMin, at: VTOFFSET.cloudcoverMin.p) }
  public static func addVectorOf(cloudcoverMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMean, at: VTOFFSET.cloudcoverMean.p) }
  public static func addVectorOf(uvIndexMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexMax, at: VTOFFSET.uvIndexMax.p) }
  public static func addVectorOf(uvIndexClearSkyMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSkyMax, at: VTOFFSET.uvIndexClearSkyMax.p) }
  public static func endWeatherDaily(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherDaily(
    _ fbb: inout FlatBufferBuilder,
    temperature2mMaxVectorOffset temperature2mMax: Offset = Offset(),
    temperature2mMinVectorOffset temperature2mMin: Offset = Offset(),
    temperature2mMeanVectorOffset temperature2mMean: Offset = Offset(),
    apparentTemperatureMaxVectorOffset apparentTemperatureMax: Offset = Offset(),
    apparentTemperatureMinVectorOffset apparentTemperatureMin: Offset = Offset(),
    apparentTemperatureMeanVectorOffset apparentTemperatureMean: Offset = Offset(),
    precipitationSumVectorOffset precipitationSum: Offset = Offset(),
    precipitationProbabilityMaxVectorOffset precipitationProbabilityMax: Offset = Offset(),
    precipitationProbabilityMinVectorOffset precipitationProbabilityMin: Offset = Offset(),
    precipitationProbabilityMeanVectorOffset precipitationProbabilityMean: Offset = Offset(),
    snowfallSumVectorOffset snowfallSum: Offset = Offset(),
    rainSumVectorOffset rainSum: Offset = Offset(),
    showersSumVectorOffset showersSum: Offset = Offset(),
    weathercodeVectorOffset weathercode: Offset = Offset(),
    shortwaveRadiationSumVectorOffset shortwaveRadiationSum: Offset = Offset(),
    windspeed10mMaxVectorOffset windspeed10mMax: Offset = Offset(),
    windspeed10mMinVectorOffset windspeed10mMin: Offset = Offset(),
    windspeed10mMeanVectorOffset windspeed10mMean: Offset = Offset(),
    windgusts10mMaxVectorOffset windgusts10mMax: Offset = Offset(),
    windgusts10mMinVectorOffset windgusts10mMin: Offset = Offset(),
    windgusts10mMeanVectorOffset windgusts10mMean: Offset = Offset(),
    winddirection10mDominantVectorOffset winddirection10mDominant: Offset = Offset(),
    precipitationHoursVectorOffset precipitationHours: Offset = Offset(),
    sunriseVectorOffset sunrise: Offset = Offset(),
    sunsetVectorOffset sunset: Offset = Offset(),
    et0FaoEvapotranspirationVectorOffset et0FaoEvapotranspiration: Offset = Offset(),
    visibilityMaxVectorOffset visibilityMax: Offset = Offset(),
    visibilityMinVectorOffset visibilityMin: Offset = Offset(),
    visibilityMeanVectorOffset visibilityMean: Offset = Offset(),
    pressureMslMaxVectorOffset pressureMslMax: Offset = Offset(),
    pressureMslMinVectorOffset pressureMslMin: Offset = Offset(),
    pressureMslMeanVectorOffset pressureMslMean: Offset = Offset(),
    surfacePressureMaxVectorOffset surfacePressureMax: Offset = Offset(),
    surfacePressureMinVectorOffset surfacePressureMin: Offset = Offset(),
    surfacePressureMeanVectorOffset surfacePressureMean: Offset = Offset(),
    capeMaxVectorOffset capeMax: Offset = Offset(),
    capeMinVectorOffset capeMin: Offset = Offset(),
    capeMeanVectorOffset capeMean: Offset = Offset(),
    cloudcoverMaxVectorOffset cloudcoverMax: Offset = Offset(),
    cloudcoverMinVectorOffset cloudcoverMin: Offset = Offset(),
    cloudcoverMeanVectorOffset cloudcoverMean: Offset = Offset(),
    uvIndexMaxVectorOffset uvIndexMax: Offset = Offset(),
    uvIndexClearSkyMaxVectorOffset uvIndexClearSkyMax: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_WeatherDaily.startWeatherDaily(&fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(temperature2mMax: temperature2mMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(temperature2mMin: temperature2mMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(temperature2mMean: temperature2mMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(apparentTemperatureMax: apparentTemperatureMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(apparentTemperatureMin: apparentTemperatureMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(apparentTemperatureMean: apparentTemperatureMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(precipitationSum: precipitationSum, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(precipitationProbabilityMax: precipitationProbabilityMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(precipitationProbabilityMin: precipitationProbabilityMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(precipitationProbabilityMean: precipitationProbabilityMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(snowfallSum: snowfallSum, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(rainSum: rainSum, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(showersSum: showersSum, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(weathercode: weathercode, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(shortwaveRadiationSum: shortwaveRadiationSum, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(windspeed10mMax: windspeed10mMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(windspeed10mMin: windspeed10mMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(windspeed10mMean: windspeed10mMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(windgusts10mMax: windgusts10mMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(windgusts10mMin: windgusts10mMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(windgusts10mMean: windgusts10mMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(winddirection10mDominant: winddirection10mDominant, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(precipitationHours: precipitationHours, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(sunrise: sunrise, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(sunset: sunset, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(visibilityMax: visibilityMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(visibilityMin: visibilityMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(visibilityMean: visibilityMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(pressureMslMax: pressureMslMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(pressureMslMin: pressureMslMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(pressureMslMean: pressureMslMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(surfacePressureMax: surfacePressureMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(surfacePressureMin: surfacePressureMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(surfacePressureMean: surfacePressureMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(capeMax: capeMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(capeMin: capeMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(capeMean: capeMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(cloudcoverMax: cloudcoverMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(cloudcoverMin: cloudcoverMin, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(cloudcoverMean: cloudcoverMean, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(uvIndexMax: uvIndexMax, &fbb)
    com_openmeteo_api_result_WeatherDaily.addVectorOf(uvIndexClearSkyMax: uvIndexClearSkyMax, &fbb)
    return com_openmeteo_api_result_WeatherDaily.endWeatherDaily(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.temperature2mMax.p, fieldName: "temperature2mMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.temperature2mMin.p, fieldName: "temperature2mMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.temperature2mMean.p, fieldName: "temperature2mMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMax.p, fieldName: "apparentTemperatureMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMin.p, fieldName: "apparentTemperatureMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMean.p, fieldName: "apparentTemperatureMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.precipitationSum.p, fieldName: "precipitationSum", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMax.p, fieldName: "precipitationProbabilityMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMin.p, fieldName: "precipitationProbabilityMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMean.p, fieldName: "precipitationProbabilityMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.snowfallSum.p, fieldName: "snowfallSum", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.rainSum.p, fieldName: "rainSum", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.showersSum.p, fieldName: "showersSum", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationSum.p, fieldName: "shortwaveRadiationSum", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMax.p, fieldName: "windspeed10mMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMin.p, fieldName: "windspeed10mMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMean.p, fieldName: "windspeed10mMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMax.p, fieldName: "windgusts10mMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMin.p, fieldName: "windgusts10mMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMean.p, fieldName: "windgusts10mMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.winddirection10mDominant.p, fieldName: "winddirection10mDominant", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.precipitationHours.p, fieldName: "precipitationHours", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.sunrise.p, fieldName: "sunrise", required: false, type: ForwardOffset<Vector<Int64, Int64>>.self)
    try _v.visit(field: VTOFFSET.sunset.p, fieldName: "sunset", required: false, type: ForwardOffset<Vector<Int64, Int64>>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.visibilityMax.p, fieldName: "visibilityMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.visibilityMin.p, fieldName: "visibilityMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.visibilityMean.p, fieldName: "visibilityMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.pressureMslMax.p, fieldName: "pressureMslMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.pressureMslMin.p, fieldName: "pressureMslMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.pressureMslMean.p, fieldName: "pressureMslMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMax.p, fieldName: "surfacePressureMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMin.p, fieldName: "surfacePressureMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMean.p, fieldName: "surfacePressureMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.capeMax.p, fieldName: "capeMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.capeMin.p, fieldName: "capeMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.capeMean.p, fieldName: "capeMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMax.p, fieldName: "cloudcoverMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMin.p, fieldName: "cloudcoverMin", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMean.p, fieldName: "cloudcoverMean", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.uvIndexMax.p, fieldName: "uvIndexMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSkyMax.p, fieldName: "uvIndexClearSkyMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_WeatherApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case ensembleMember = 12
    case generationtimeMs = 14
    case utcOffsetSeconds = 16
    case timezone = 18
    case timezoneAbbreviation = 20
    case currentWeather = 22
    case timeStart = 24
    case daily = 26
    case hourly = 28
    case hourlyUnits = 30
    case sixHourly = 32
    case sixHourlyUnits = 34
    case minutely15 = 36
    case minutely15Units = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: com_openmeteo_api_result_WeatherModel { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? .undefined : com_openmeteo_api_result_WeatherModel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var ensembleMember: Int8 { let o = _accessor.offset(VTOFFSET.ensembleMember.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int8.self, at: o) }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var currentWeather: com_openmeteo_api_result_CurrentWeather? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_api_result_CurrentWeather.self, at: o) }
  public var mutableCurrentWeather: com_openmeteo_api_result_CurrentWeather_Mutable? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : com_openmeteo_api_result_CurrentWeather_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var timeStart: Int64 { let o = _accessor.offset(VTOFFSET.timeStart.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var daily: com_openmeteo_api_result_WeatherDaily? { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? nil : com_openmeteo_api_result_WeatherDaily(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hourly: com_openmeteo_api_result_WeatherHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_api_result_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hourlyUnits: com_openmeteo_api_result_WeatherHourlyUnit? { let o = _accessor.offset(VTOFFSET.hourlyUnits.v); return o == 0 ? nil : com_openmeteo_api_result_WeatherHourlyUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sixHourly: com_openmeteo_api_result_WeatherHourly? { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? nil : com_openmeteo_api_result_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sixHourlyUnits: com_openmeteo_api_result_WeatherHourly? { let o = _accessor.offset(VTOFFSET.sixHourlyUnits.v); return o == 0 ? nil : com_openmeteo_api_result_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var minutely15: com_openmeteo_api_result_WeatherHourly? { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? nil : com_openmeteo_api_result_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var minutely15Units: com_openmeteo_api_result_WeatherHourly? { let o = _accessor.offset(VTOFFSET.minutely15Units.v); return o == 0 ? nil : com_openmeteo_api_result_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: com_openmeteo_api_result_WeatherModel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: model.rawValue, def: 0, at: VTOFFSET.model.p) }
  public static func add(ensembleMember: Int8, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ensembleMember, def: 0, at: VTOFFSET.ensembleMember.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(currentWeather: com_openmeteo_api_result_CurrentWeather?, _ fbb: inout FlatBufferBuilder) { guard let currentWeather = currentWeather else { return }; fbb.create(struct: currentWeather, position: VTOFFSET.currentWeather.p) }
  public static func add(timeStart: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timeStart, def: 0, at: VTOFFSET.timeStart.p) }
  public static func add(daily: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: daily, at: VTOFFSET.daily.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func add(hourlyUnits: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourlyUnits, at: VTOFFSET.hourlyUnits.p) }
  public static func add(sixHourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sixHourly, at: VTOFFSET.sixHourly.p) }
  public static func add(sixHourlyUnits: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sixHourlyUnits, at: VTOFFSET.sixHourlyUnits.p) }
  public static func add(minutely15: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: minutely15, at: VTOFFSET.minutely15.p) }
  public static func add(minutely15Units: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: minutely15Units, at: VTOFFSET.minutely15Units.p) }
  public static func endWeatherApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    model: com_openmeteo_api_result_WeatherModel = .undefined,
    ensembleMember: Int8 = 0,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    currentWeather: com_openmeteo_api_result_CurrentWeather? = nil,
    timeStart: Int64 = 0,
    dailyOffset daily: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset(),
    hourlyUnitsOffset hourlyUnits: Offset = Offset(),
    sixHourlyOffset sixHourly: Offset = Offset(),
    sixHourlyUnitsOffset sixHourlyUnits: Offset = Offset(),
    minutely15Offset minutely15: Offset = Offset(),
    minutely15UnitsOffset minutely15Units: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_WeatherApi.startWeatherApi(&fbb)
    com_openmeteo_api_result_WeatherApi.add(latitude: latitude, &fbb)
    com_openmeteo_api_result_WeatherApi.add(longitude: longitude, &fbb)
    com_openmeteo_api_result_WeatherApi.add(elevation: elevation, &fbb)
    com_openmeteo_api_result_WeatherApi.add(model: model, &fbb)
    com_openmeteo_api_result_WeatherApi.add(ensembleMember: ensembleMember, &fbb)
    com_openmeteo_api_result_WeatherApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_api_result_WeatherApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_api_result_WeatherApi.add(timezone: timezone, &fbb)
    com_openmeteo_api_result_WeatherApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_api_result_WeatherApi.add(currentWeather: currentWeather, &fbb)
    com_openmeteo_api_result_WeatherApi.add(timeStart: timeStart, &fbb)
    com_openmeteo_api_result_WeatherApi.add(daily: daily, &fbb)
    com_openmeteo_api_result_WeatherApi.add(hourly: hourly, &fbb)
    com_openmeteo_api_result_WeatherApi.add(hourlyUnits: hourlyUnits, &fbb)
    com_openmeteo_api_result_WeatherApi.add(sixHourly: sixHourly, &fbb)
    com_openmeteo_api_result_WeatherApi.add(sixHourlyUnits: sixHourlyUnits, &fbb)
    com_openmeteo_api_result_WeatherApi.add(minutely15: minutely15, &fbb)
    com_openmeteo_api_result_WeatherApi.add(minutely15Units: minutely15Units, &fbb)
    return com_openmeteo_api_result_WeatherApi.endWeatherApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: com_openmeteo_api_result_WeatherModel.self)
    try _v.visit(field: VTOFFSET.ensembleMember.p, fieldName: "ensembleMember", required: false, type: Int8.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentWeather.p, fieldName: "currentWeather", required: false, type: com_openmeteo_api_result_CurrentWeather.self)
    try _v.visit(field: VTOFFSET.timeStart.p, fieldName: "timeStart", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.daily.p, fieldName: "daily", required: false, type: ForwardOffset<com_openmeteo_api_result_WeatherDaily>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_api_result_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.hourlyUnits.p, fieldName: "hourlyUnits", required: false, type: ForwardOffset<com_openmeteo_api_result_WeatherHourlyUnit>.self)
    try _v.visit(field: VTOFFSET.sixHourly.p, fieldName: "sixHourly", required: false, type: ForwardOffset<com_openmeteo_api_result_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.sixHourlyUnits.p, fieldName: "sixHourlyUnits", required: false, type: ForwardOffset<com_openmeteo_api_result_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.minutely15.p, fieldName: "minutely15", required: false, type: ForwardOffset<com_openmeteo_api_result_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.minutely15Units.p, fieldName: "minutely15Units", required: false, type: ForwardOffset<com_openmeteo_api_result_WeatherHourly>.self)
    _v.finish()
  }
}

