// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum com_openmeteo_WeatherModel: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case undefined = 0
  case bestMatch = 1
  case gfsSeamless = 2
  case gfsGlobal = 3
  case gfsHrrr = 4
  case meteofranceSeamless = 5
  case meteofranceArpegeWorld = 6
  case meteofranceArpegeEurope = 7
  case meteofranceAromeFrance = 8
  case meteofranceAromeFranceHd = 9
  case jmaSeamless = 10
  case jmaMsm = 11
  case jmsGsm = 12
  case jmaGsm = 13
  case gemSeamless = 14
  case gemGlobal = 15
  case gemRegional = 16
  case gemHrdpsContinental = 17
  case iconSeamless = 18
  case iconGlobal = 19
  case iconEu = 20
  case iconD2 = 21
  case ecmwfIfs04 = 22
  case metnoNordic = 23
  case era5 = 24
  case cerra = 25
  case era5Land = 26
  case ecmwfIfs = 27
  case noaaCfs = 28

  public static var max: com_openmeteo_WeatherModel { return .noaaCfs }
  public static var min: com_openmeteo_WeatherModel { return .undefined }
}


public struct com_openmeteo_CurrentWeather: NativeStruct, Verifiable, FlatbuffersInitializable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }

  private var _time: Int64
  private var _temperature: Float32
  private var _weathercode: Float32
  private var _windspeed: Float32
  private var _winddirection: Float32
  private var _isDay: Float32
  private let padding0__: UInt32 = 0

  public init(_ bb: ByteBuffer, o: Int32) {
    let _accessor = Struct(bb: bb, position: o)
    _time = _accessor.readBuffer(of: Int64.self, at: 0)
    _temperature = _accessor.readBuffer(of: Float32.self, at: 8)
    _weathercode = _accessor.readBuffer(of: Float32.self, at: 12)
    _windspeed = _accessor.readBuffer(of: Float32.self, at: 16)
    _winddirection = _accessor.readBuffer(of: Float32.self, at: 20)
    _isDay = _accessor.readBuffer(of: Float32.self, at: 24)
  }

  public init(time: Int64, temperature: Float32, weathercode: Float32, windspeed: Float32, winddirection: Float32, isDay: Float32) {
    _time = time
    _temperature = temperature
    _weathercode = weathercode
    _windspeed = windspeed
    _winddirection = winddirection
    _isDay = isDay
  }

  public init() {
    _time = 0
    _temperature = 0.0
    _weathercode = 0.0
    _windspeed = 0.0
    _winddirection = 0.0
    _isDay = 0.0
  }

  public var time: Int64 { _time }
  public var temperature: Float32 { _temperature }
  public var weathercode: Float32 { _weathercode }
  public var windspeed: Float32 { _windspeed }
  public var winddirection: Float32 { _winddirection }
  public var isDay: Float32 { _isDay }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    try verifier.inBuffer(position: position, of: com_openmeteo_CurrentWeather.self)
  }
}

public struct com_openmeteo_CurrentWeather_Mutable: FlatBufferObject {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Struct

  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Struct(bb: bb, position: o) }

  public var time: Int64 { return _accessor.readBuffer(of: Int64.self, at: 0) }
  public var temperature: Float32 { return _accessor.readBuffer(of: Float32.self, at: 8) }
  public var weathercode: Float32 { return _accessor.readBuffer(of: Float32.self, at: 12) }
  public var windspeed: Float32 { return _accessor.readBuffer(of: Float32.self, at: 16) }
  public var winddirection: Float32 { return _accessor.readBuffer(of: Float32.self, at: 20) }
  public var isDay: Float32 { return _accessor.readBuffer(of: Float32.self, at: 24) }
}

public struct com_openmeteo_WeatherHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case temperature2m = 6
    case cloudcover = 8
    case cloudcoverLow = 10
    case cloudcoverMid = 12
    case cloudcoverHigh = 14
    case pressureMsl = 16
    case relativehumidity2m = 18
    case precipitation = 20
    case precipitationProbability = 22
    case weathercode = 24
    case temperature80m = 26
    case temperature120m = 28
    case temperature180m = 30
    case soilTemperature0cm = 32
    case soilTemperature6cm = 34
    case soilTemperature18cm = 36
    case soilTemperature54cm = 38
    case soilMoisture01cm = 40
    case soilMoisture13cm = 42
    case soilMoisture39cm = 44
    case soilMoisture927cm = 46
    case soilMoisture2781cm = 48
    case snowDepth = 50
    case snowHeight = 52
    case sensibleHeatflux = 54
    case latentHeatflux = 56
    case showers = 58
    case rain = 60
    case windgusts10m = 62
    case freezinglevelHeight = 64
    case dewpoint2m = 66
    case diffuseRadiation = 68
    case directRadiation = 70
    case apparentTemperature = 72
    case windspeed10m = 74
    case winddirection10m = 76
    case windspeed80m = 78
    case winddirection80m = 80
    case windspeed120m = 82
    case winddirection120m = 84
    case windspeed180m = 86
    case winddirection180m = 88
    case directNormalIrradiance = 90
    case evapotranspiration = 92
    case et0FaoEvapotranspiration = 94
    case vaporPressureDeficit = 96
    case shortwaveRadiation = 98
    case snowfall = 100
    case surfacePressure = 102
    case terrestrialRadiation = 104
    case terrestrialRadiationInstant = 106
    case shortwaveRadiationInstant = 108
    case diffuseRadiationInstant = 110
    case directRadiationInstant = 112
    case directNormalIrradianceInstant = 114
    case visibility = 116
    case cape = 118
    case uvIndex = 120
    case uvIndexClearSky = 122
    case isDay = 124
    case soilTemperature0To10cm = 126
    case soilTemperature10To40cm = 128
    case soilTemperature40To100cm = 130
    case soilTemperature100To200cm = 132
    case soilMoisture0To10cm = 134
    case soilMoisture10To40cm = 136
    case soilMoisture40To100cm = 138
    case soilMoisture100To200cm = 140
    case growingDegreeDaysBase0Limit50 = 142
    case leafWetnessProbability = 144
    case soilMoistureIndex0To7cm = 146
    case soilMoistureIndex7To28cm = 148
    case soilMoistureIndex28To100cm = 150
    case soilMoistureIndex100To255cm = 152
    case soilMoistureIndex0To100cm = 154
    case lightningPotential = 156
    case temperature1015hPa = 158
    case temperature1000hPa = 160
    case temperature985hPa = 162
    case temperature975hPa = 164
    case temperature970hPa = 166
    case temperature950hPa = 168
    case temperature925hPa = 170
    case temperature900hPa = 172
    case temperature875hPa = 174
    case temperature850hPa = 176
    case temperature800hPa = 178
    case temperature750hPa = 180
    case temperature700hPa = 182
    case temperature650hPa = 184
    case temperature600hPa = 186
    case temperature550hPa = 188
    case temperature500hPa = 190
    case temperature450hPa = 192
    case temperature400hPa = 194
    case temperature350hPa = 196
    case temperature300hPa = 198
    case temperature275hPa = 200
    case temperature250hPa = 202
    case temperature225hPa = 204
    case temperature200hPa = 206
    case temperature175hPa = 208
    case temperature150hPa = 210
    case temperature125hPa = 212
    case temperature100hPa = 214
    case temperature70hPa = 216
    case temperature50hPa = 218
    case temperature40hPa = 220
    case temperature30hPa = 222
    case temperature20hPa = 224
    case temperature15hPa = 226
    case temperature10hPa = 228
    case dewpoint1015hPa = 230
    case dewpoint1000hPa = 232
    case dewpoint985hPa = 234
    case dewpoint975hPa = 236
    case dewpoint970hPa = 238
    case dewpoint950hPa = 240
    case dewpoint925hPa = 242
    case dewpoint900hPa = 244
    case dewpoint875hPa = 246
    case dewpoint850hPa = 248
    case dewpoint800hPa = 250
    case dewpoint750hPa = 252
    case dewpoint700hPa = 254
    case dewpoint650hPa = 256
    case dewpoint600hPa = 258
    case dewpoint550hPa = 260
    case dewpoint500hPa = 262
    case dewpoint450hPa = 264
    case dewpoint400hPa = 266
    case dewpoint350hPa = 268
    case dewpoint300hPa = 270
    case dewpoint275hPa = 272
    case dewpoint250hPa = 274
    case dewpoint225hPa = 276
    case dewpoint200hPa = 278
    case dewpoint175hPa = 280
    case dewpoint150hPa = 282
    case dewpoint125hPa = 284
    case dewpoint100hPa = 286
    case dewpoint70hPa = 288
    case dewpoint50hPa = 290
    case dewpoint40hPa = 292
    case dewpoint30hPa = 294
    case dewpoint20hPa = 296
    case dewpoint15hPa = 298
    case dewpoint10hPa = 300
    case relativehumidity1015hPa = 302
    case relativehumidity1000hPa = 304
    case relativehumidity985hPa = 306
    case relativehumidity975hPa = 308
    case relativehumidity970hPa = 310
    case relativehumidity950hPa = 312
    case relativehumidity925hPa = 314
    case relativehumidity900hPa = 316
    case relativehumidity875hPa = 318
    case relativehumidity850hPa = 320
    case relativehumidity800hPa = 322
    case relativehumidity750hPa = 324
    case relativehumidity700hPa = 326
    case relativehumidity650hPa = 328
    case relativehumidity600hPa = 330
    case relativehumidity550hPa = 332
    case relativehumidity500hPa = 334
    case relativehumidity450hPa = 336
    case relativehumidity400hPa = 338
    case relativehumidity350hPa = 340
    case relativehumidity300hPa = 342
    case relativehumidity275hPa = 344
    case relativehumidity250hPa = 346
    case relativehumidity225hPa = 348
    case relativehumidity200hPa = 350
    case relativehumidity175hPa = 352
    case relativehumidity150hPa = 354
    case relativehumidity125hPa = 356
    case relativehumidity100hPa = 358
    case relativehumidity70hPa = 360
    case relativehumidity50hPa = 362
    case relativehumidity40hPa = 364
    case relativehumidity30hPa = 366
    case relativehumidity20hPa = 368
    case relativehumidity15hPa = 370
    case relativehumidity10hPa = 372
    case cloudcover1015hPa = 374
    case cloudcover1000hPa = 376
    case cloudcover985hPa = 378
    case cloudcover975hPa = 380
    case cloudcover970hPa = 382
    case cloudcover950hPa = 384
    case cloudcover925hPa = 386
    case cloudcover900hPa = 388
    case cloudcover875hPa = 390
    case cloudcover850hPa = 392
    case cloudcover800hPa = 394
    case cloudcover750hPa = 396
    case cloudcover700hPa = 398
    case cloudcover650hPa = 400
    case cloudcover600hPa = 402
    case cloudcover550hPa = 404
    case cloudcover500hPa = 406
    case cloudcover450hPa = 408
    case cloudcover400hPa = 410
    case cloudcover350hPa = 412
    case cloudcover300hPa = 414
    case cloudcover275hPa = 416
    case cloudcover250hPa = 418
    case cloudcover225hPa = 420
    case cloudcover200hPa = 422
    case cloudcover175hPa = 424
    case cloudcover150hPa = 426
    case cloudcover125hPa = 428
    case cloudcover100hPa = 430
    case cloudcover70hPa = 432
    case cloudcover50hPa = 434
    case cloudcover40hPa = 436
    case cloudcover30hPa = 438
    case cloudcover20hPa = 440
    case cloudcover15hPa = 442
    case cloudcover10hPa = 444
    case windspeed1015hPa = 446
    case windspeed1000hPa = 448
    case windspeed985hPa = 450
    case windspeed975hPa = 452
    case windspeed970hPa = 454
    case windspeed950hPa = 456
    case windspeed925hPa = 458
    case windspeed900hPa = 460
    case windspeed875hPa = 462
    case windspeed850hPa = 464
    case windspeed800hPa = 466
    case windspeed750hPa = 468
    case windspeed700hPa = 470
    case windspeed650hPa = 472
    case windspeed600hPa = 474
    case windspeed550hPa = 476
    case windspeed500hPa = 478
    case windspeed450hPa = 480
    case windspeed400hPa = 482
    case windspeed350hPa = 484
    case windspeed300hPa = 486
    case windspeed275hPa = 488
    case windspeed250hPa = 490
    case windspeed225hPa = 492
    case windspeed200hPa = 494
    case windspeed175hPa = 496
    case windspeed150hPa = 498
    case windspeed125hPa = 500
    case windspeed100hPa = 502
    case windspeed70hPa = 504
    case windspeed50hPa = 506
    case windspeed40hPa = 508
    case windspeed30hPa = 510
    case windspeed20hPa = 512
    case windspeed15hPa = 514
    case windspeed10hPa = 516
    case winddirection1015hPa = 518
    case winddirection1000hPa = 520
    case winddirection985hPa = 522
    case winddirection975hPa = 524
    case winddirection970hPa = 526
    case winddirection950hPa = 528
    case winddirection925hPa = 530
    case winddirection900hPa = 532
    case winddirection875hPa = 534
    case winddirection850hPa = 536
    case winddirection800hPa = 538
    case winddirection750hPa = 540
    case winddirection700hPa = 542
    case winddirection650hPa = 544
    case winddirection600hPa = 546
    case winddirection550hPa = 548
    case winddirection500hPa = 550
    case winddirection450hPa = 552
    case winddirection400hPa = 554
    case winddirection350hPa = 556
    case winddirection300hPa = 558
    case winddirection275hPa = 560
    case winddirection250hPa = 562
    case winddirection225hPa = 564
    case winddirection200hPa = 566
    case winddirection175hPa = 568
    case winddirection150hPa = 570
    case winddirection125hPa = 572
    case winddirection100hPa = 574
    case winddirection70hPa = 576
    case winddirection50hPa = 578
    case winddirection40hPa = 580
    case winddirection30hPa = 582
    case winddirection20hPa = 584
    case winddirection15hPa = 586
    case winddirection10hPa = 588
    case verticalVelocity1015hPa = 590
    case verticalVelocity1000hPa = 592
    case verticalVelocity985hPa = 594
    case verticalVelocity975hPa = 596
    case verticalVelocity970hPa = 598
    case verticalVelocity950hPa = 600
    case verticalVelocity925hPa = 602
    case verticalVelocity900hPa = 604
    case verticalVelocity875hPa = 606
    case verticalVelocity850hPa = 608
    case verticalVelocity800hPa = 610
    case verticalVelocity750hPa = 612
    case verticalVelocity700hPa = 614
    case verticalVelocity650hPa = 616
    case verticalVelocity600hPa = 618
    case verticalVelocity550hPa = 620
    case verticalVelocity500hPa = 622
    case verticalVelocity450hPa = 624
    case verticalVelocity400hPa = 626
    case verticalVelocity350hPa = 628
    case verticalVelocity300hPa = 630
    case verticalVelocity275hPa = 632
    case verticalVelocity250hPa = 634
    case verticalVelocity225hPa = 636
    case verticalVelocity200hPa = 638
    case verticalVelocity175hPa = 640
    case verticalVelocity150hPa = 642
    case verticalVelocity125hPa = 644
    case verticalVelocity100hPa = 646
    case verticalVelocity70hPa = 648
    case verticalVelocity50hPa = 650
    case verticalVelocity40hPa = 652
    case verticalVelocity30hPa = 654
    case verticalVelocity20hPa = 656
    case verticalVelocity15hPa = 658
    case verticalVelocity10hPa = 660
    case geopotentialHeight1015hPa = 662
    case geopotentialHeight1000hPa = 664
    case geopotentialHeight985hPa = 666
    case geopotentialHeight975hPa = 668
    case geopotentialHeight970hPa = 670
    case geopotentialHeight950hPa = 672
    case geopotentialHeight925hPa = 674
    case geopotentialHeight900hPa = 676
    case geopotentialHeight875hPa = 678
    case geopotentialHeight850hPa = 680
    case geopotentialHeight800hPa = 682
    case geopotentialHeight750hPa = 684
    case geopotentialHeight700hPa = 686
    case geopotentialHeight650hPa = 688
    case geopotentialHeight600hPa = 690
    case geopotentialHeight550hPa = 692
    case geopotentialHeight500hPa = 694
    case geopotentialHeight450hPa = 696
    case geopotentialHeight400hPa = 698
    case geopotentialHeight350hPa = 700
    case geopotentialHeight300hPa = 702
    case geopotentialHeight275hPa = 704
    case geopotentialHeight250hPa = 706
    case geopotentialHeight225hPa = 708
    case geopotentialHeight200hPa = 710
    case geopotentialHeight175hPa = 712
    case geopotentialHeight150hPa = 714
    case geopotentialHeight125hPa = 716
    case geopotentialHeight100hPa = 718
    case geopotentialHeight70hPa = 720
    case geopotentialHeight50hPa = 722
    case geopotentialHeight40hPa = 724
    case geopotentialHeight30hPa = 726
    case geopotentialHeight20hPa = 728
    case geopotentialHeight15hPa = 730
    case geopotentialHeight10hPa = 732
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverLow: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMid: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverHigh: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMsl: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbability: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var weathercode: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature80m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature120m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature180m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature6cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature18cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature54cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture01cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture01cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture13cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture13cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture39cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture39cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture927cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture927cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture2781cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture2781cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowDepth: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sensibleHeatflux: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var latentHeatflux: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var showers: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var rain: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var freezinglevelHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperature: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed80m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection80m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed120m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection120m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed180m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection180m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradiance: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var evapotranspiration: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var et0FaoEvapotranspiration: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var vaporPressureDeficit: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfall: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressure: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var terrestrialRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var terrestrialRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradianceInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibility: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cape: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndex: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSky: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var isDay: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0To10cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature10To40cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature40To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature100To200cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To10cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture10To40cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture40To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture100To200cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var growingDegreeDaysBase0Limit50: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var leafWetnessProbability: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To7cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex7To28cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex28To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex100To255cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var lightningPotential: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature1015hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature1015hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature1000hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature1000hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature985hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature985hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature975hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature975hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature970hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature970hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature950hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature950hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature925hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature925hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature900hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature900hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature875hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature875hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature850hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature850hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature800hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature800hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature750hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature750hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature700hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature700hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature650hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature650hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature600hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature600hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature550hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature550hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature500hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature500hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature450hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature450hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature400hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature400hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature350hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature350hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature300hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature300hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature275hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature275hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature250hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature250hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature225hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature225hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature200hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature200hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature175hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature175hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature150hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature150hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature125hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature125hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature100hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature100hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature70hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature70hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature50hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature50hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature40hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature40hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature30hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature30hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature20hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature20hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature15hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature15hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature10hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature10hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint1015hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint1015hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint1000hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint1000hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint985hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint985hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint975hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint975hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint970hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint970hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint950hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint950hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint925hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint925hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint900hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint900hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint875hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint875hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint850hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint850hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint800hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint800hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint750hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint750hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint700hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint700hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint650hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint650hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint600hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint600hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint550hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint550hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint500hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint500hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint450hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint450hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint400hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint400hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint350hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint350hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint300hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint300hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint275hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint275hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint250hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint250hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint225hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint225hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint200hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint200hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint175hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint175hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint150hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint150hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint125hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint125hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint100hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint100hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint70hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint70hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint50hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint50hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint40hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint40hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint30hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint30hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint20hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint20hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint15hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint15hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint10hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint10hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity1015hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity1015hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity1000hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity1000hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity985hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity985hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity975hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity975hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity970hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity970hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity950hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity950hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity925hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity925hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity900hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity900hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity875hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity875hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity850hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity850hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity800hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity800hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity750hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity750hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity700hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity700hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity650hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity650hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity600hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity600hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity550hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity550hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity500hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity500hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity450hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity450hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity400hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity400hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity350hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity350hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity300hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity300hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity275hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity275hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity250hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity250hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity225hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity225hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity200hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity200hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity175hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity175hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity150hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity150hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity125hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity125hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity100hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity100hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity70hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity70hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity50hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity50hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity40hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity40hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity30hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity30hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity20hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity20hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity15hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity15hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity10hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity10hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover1015hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover1015hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover1000hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover1000hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover985hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover985hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover975hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover975hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover970hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover970hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover950hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover950hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover925hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover925hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover900hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover900hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover875hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover875hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover850hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover850hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover800hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover800hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover750hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover750hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover700hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover700hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover650hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover650hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover600hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover600hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover550hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover550hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover500hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover500hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover450hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover450hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover400hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover400hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover350hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover350hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover300hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover300hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover275hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover275hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover250hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover250hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover225hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover225hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover200hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover200hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover175hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover175hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover150hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover150hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover125hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover125hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover100hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover100hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover70hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover70hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover50hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover50hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover40hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover40hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover30hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover30hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover20hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover20hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover15hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover15hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover10hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover10hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed1015hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed1015hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed1000hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed1000hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed985hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed985hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed975hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed975hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed970hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed970hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed950hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed950hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed925hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed925hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed900hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed900hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed875hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed875hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed850hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed850hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed800hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed800hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed750hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed750hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed700hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed700hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed650hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed650hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed600hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed600hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed550hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed550hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed500hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed500hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed450hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed450hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed400hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed400hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed350hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed350hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed300hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed300hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed275hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed275hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed250hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed250hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed225hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed225hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed200hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed200hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed175hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed175hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed150hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed150hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed125hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed125hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed100hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed100hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed70hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed70hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed50hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed50hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed40hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed40hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed30hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed30hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed20hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed20hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed15hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed15hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection1015hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection1015hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection1000hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection1000hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection985hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection985hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection975hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection975hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection970hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection970hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection950hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection950hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection925hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection925hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection900hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection900hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection875hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection875hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection850hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection850hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection800hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection800hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection750hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection750hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection700hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection700hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection650hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection650hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection600hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection600hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection550hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection550hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection500hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection500hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection450hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection450hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection400hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection400hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection350hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection350hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection300hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection300hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection275hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection275hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection250hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection250hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection225hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection225hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection200hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection200hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection175hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection175hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection150hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection150hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection125hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection125hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection100hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection100hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection70hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection70hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection50hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection50hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection40hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection40hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection30hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection30hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection20hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection20hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection15hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection15hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity1015hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity1015hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity1000hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity1000hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity985hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity985hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity975hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity975hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity970hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity970hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity950hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity950hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity925hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity925hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity900hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity900hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity875hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity875hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity850hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity850hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity800hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity800hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity750hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity750hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity700hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity700hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity650hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity650hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity600hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity600hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity550hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity550hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity500hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity500hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity450hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity450hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity400hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity400hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity350hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity350hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity300hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity300hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity275hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity275hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity250hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity250hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity225hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity225hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity200hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity200hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity175hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity175hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity150hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity150hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity125hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity125hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity100hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity100hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity70hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity70hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity50hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity50hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity40hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity40hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity30hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity30hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity20hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity20hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity15hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity15hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var verticalVelocity10hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.verticalVelocity10hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight1015hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight1015hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight1000hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight1000hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight985hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight985hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight975hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight975hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight970hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight970hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight950hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight950hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight925hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight925hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight900hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight900hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight875hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight875hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight850hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight850hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight800hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight800hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight750hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight750hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight700hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight700hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight650hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight650hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight600hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight600hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight550hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight550hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight500hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight500hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight450hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight450hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight400hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight400hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight350hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight350hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight300hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight300hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight275hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight275hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight250hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight250hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight225hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight225hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight200hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight200hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight175hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight175hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight150hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight150hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight125hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight125hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight100hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight100hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight70hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight70hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight50hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight50hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight40hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight40hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight30hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight30hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight20hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight20hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight15hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight15hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var geopotentialHeight10hPa: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.geopotentialHeight10hPa.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 365) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(temperature2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2m, at: VTOFFSET.temperature2m.p) }
  public static func add(cloudcover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover, at: VTOFFSET.cloudcover.p) }
  public static func add(cloudcoverLow: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverLow, at: VTOFFSET.cloudcoverLow.p) }
  public static func add(cloudcoverMid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMid, at: VTOFFSET.cloudcoverMid.p) }
  public static func add(cloudcoverHigh: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverHigh, at: VTOFFSET.cloudcoverHigh.p) }
  public static func add(pressureMsl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMsl, at: VTOFFSET.pressureMsl.p) }
  public static func add(relativehumidity2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity2m, at: VTOFFSET.relativehumidity2m.p) }
  public static func add(precipitation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitation, at: VTOFFSET.precipitation.p) }
  public static func add(precipitationProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbability, at: VTOFFSET.precipitationProbability.p) }
  public static func add(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func add(temperature80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature80m, at: VTOFFSET.temperature80m.p) }
  public static func add(temperature120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature120m, at: VTOFFSET.temperature120m.p) }
  public static func add(temperature180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature180m, at: VTOFFSET.temperature180m.p) }
  public static func add(soilTemperature0cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0cm, at: VTOFFSET.soilTemperature0cm.p) }
  public static func add(soilTemperature6cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature6cm, at: VTOFFSET.soilTemperature6cm.p) }
  public static func add(soilTemperature18cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature18cm, at: VTOFFSET.soilTemperature18cm.p) }
  public static func add(soilTemperature54cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature54cm, at: VTOFFSET.soilTemperature54cm.p) }
  public static func add(soilMoisture01cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture01cm, at: VTOFFSET.soilMoisture01cm.p) }
  public static func add(soilMoisture13cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture13cm, at: VTOFFSET.soilMoisture13cm.p) }
  public static func add(soilMoisture39cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture39cm, at: VTOFFSET.soilMoisture39cm.p) }
  public static func add(soilMoisture927cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture927cm, at: VTOFFSET.soilMoisture927cm.p) }
  public static func add(soilMoisture2781cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture2781cm, at: VTOFFSET.soilMoisture2781cm.p) }
  public static func add(snowDepth: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowDepth, at: VTOFFSET.snowDepth.p) }
  public static func add(snowHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowHeight, at: VTOFFSET.snowHeight.p) }
  public static func add(sensibleHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sensibleHeatflux, at: VTOFFSET.sensibleHeatflux.p) }
  public static func add(latentHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: latentHeatflux, at: VTOFFSET.latentHeatflux.p) }
  public static func add(showers: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showers, at: VTOFFSET.showers.p) }
  public static func add(rain: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rain, at: VTOFFSET.rain.p) }
  public static func add(windgusts10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10m, at: VTOFFSET.windgusts10m.p) }
  public static func add(freezinglevelHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: freezinglevelHeight, at: VTOFFSET.freezinglevelHeight.p) }
  public static func add(dewpoint2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint2m, at: VTOFFSET.dewpoint2m.p) }
  public static func add(diffuseRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiation, at: VTOFFSET.diffuseRadiation.p) }
  public static func add(directRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiation, at: VTOFFSET.directRadiation.p) }
  public static func add(apparentTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperature, at: VTOFFSET.apparentTemperature.p) }
  public static func add(windspeed10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10m, at: VTOFFSET.windspeed10m.p) }
  public static func add(winddirection10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10m, at: VTOFFSET.winddirection10m.p) }
  public static func add(windspeed80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed80m, at: VTOFFSET.windspeed80m.p) }
  public static func add(winddirection80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection80m, at: VTOFFSET.winddirection80m.p) }
  public static func add(windspeed120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed120m, at: VTOFFSET.windspeed120m.p) }
  public static func add(winddirection120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection120m, at: VTOFFSET.winddirection120m.p) }
  public static func add(windspeed180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed180m, at: VTOFFSET.windspeed180m.p) }
  public static func add(winddirection180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection180m, at: VTOFFSET.winddirection180m.p) }
  public static func add(directNormalIrradiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradiance, at: VTOFFSET.directNormalIrradiance.p) }
  public static func add(evapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: evapotranspiration, at: VTOFFSET.evapotranspiration.p) }
  public static func add(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(vaporPressureDeficit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vaporPressureDeficit, at: VTOFFSET.vaporPressureDeficit.p) }
  public static func add(shortwaveRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiation, at: VTOFFSET.shortwaveRadiation.p) }
  public static func add(snowfall: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfall, at: VTOFFSET.snowfall.p) }
  public static func add(surfacePressure: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressure, at: VTOFFSET.surfacePressure.p) }
  public static func add(terrestrialRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiation, at: VTOFFSET.terrestrialRadiation.p) }
  public static func add(terrestrialRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiationInstant, at: VTOFFSET.terrestrialRadiationInstant.p) }
  public static func add(shortwaveRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationInstant, at: VTOFFSET.shortwaveRadiationInstant.p) }
  public static func add(diffuseRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiationInstant, at: VTOFFSET.diffuseRadiationInstant.p) }
  public static func add(directRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiationInstant, at: VTOFFSET.directRadiationInstant.p) }
  public static func add(directNormalIrradianceInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradianceInstant, at: VTOFFSET.directNormalIrradianceInstant.p) }
  public static func add(visibility: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibility, at: VTOFFSET.visibility.p) }
  public static func add(cape: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cape, at: VTOFFSET.cape.p) }
  public static func add(uvIndex: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndex, at: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSky, at: VTOFFSET.uvIndexClearSky.p) }
  public static func add(isDay: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: isDay, at: VTOFFSET.isDay.p) }
  public static func add(soilTemperature0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To10cm, at: VTOFFSET.soilTemperature0To10cm.p) }
  public static func add(soilTemperature10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature10To40cm, at: VTOFFSET.soilTemperature10To40cm.p) }
  public static func add(soilTemperature40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature40To100cm, at: VTOFFSET.soilTemperature40To100cm.p) }
  public static func add(soilTemperature100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature100To200cm, at: VTOFFSET.soilTemperature100To200cm.p) }
  public static func add(soilMoisture0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To10cm, at: VTOFFSET.soilMoisture0To10cm.p) }
  public static func add(soilMoisture10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture10To40cm, at: VTOFFSET.soilMoisture10To40cm.p) }
  public static func add(soilMoisture40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture40To100cm, at: VTOFFSET.soilMoisture40To100cm.p) }
  public static func add(soilMoisture100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture100To200cm, at: VTOFFSET.soilMoisture100To200cm.p) }
  public static func add(growingDegreeDaysBase0Limit50: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: growingDegreeDaysBase0Limit50, at: VTOFFSET.growingDegreeDaysBase0Limit50.p) }
  public static func add(leafWetnessProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: leafWetnessProbability, at: VTOFFSET.leafWetnessProbability.p) }
  public static func add(soilMoistureIndex0To7cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To7cm, at: VTOFFSET.soilMoistureIndex0To7cm.p) }
  public static func add(soilMoistureIndex7To28cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex7To28cm, at: VTOFFSET.soilMoistureIndex7To28cm.p) }
  public static func add(soilMoistureIndex28To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex28To100cm, at: VTOFFSET.soilMoistureIndex28To100cm.p) }
  public static func add(soilMoistureIndex100To255cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex100To255cm, at: VTOFFSET.soilMoistureIndex100To255cm.p) }
  public static func add(soilMoistureIndex0To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To100cm, at: VTOFFSET.soilMoistureIndex0To100cm.p) }
  public static func add(lightningPotential: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lightningPotential, at: VTOFFSET.lightningPotential.p) }
  public static func add(temperature1015hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature1015hPa, at: VTOFFSET.temperature1015hPa.p) }
  public static func add(temperature1000hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature1000hPa, at: VTOFFSET.temperature1000hPa.p) }
  public static func add(temperature985hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature985hPa, at: VTOFFSET.temperature985hPa.p) }
  public static func add(temperature975hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature975hPa, at: VTOFFSET.temperature975hPa.p) }
  public static func add(temperature970hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature970hPa, at: VTOFFSET.temperature970hPa.p) }
  public static func add(temperature950hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature950hPa, at: VTOFFSET.temperature950hPa.p) }
  public static func add(temperature925hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature925hPa, at: VTOFFSET.temperature925hPa.p) }
  public static func add(temperature900hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature900hPa, at: VTOFFSET.temperature900hPa.p) }
  public static func add(temperature875hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature875hPa, at: VTOFFSET.temperature875hPa.p) }
  public static func add(temperature850hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature850hPa, at: VTOFFSET.temperature850hPa.p) }
  public static func add(temperature800hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature800hPa, at: VTOFFSET.temperature800hPa.p) }
  public static func add(temperature750hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature750hPa, at: VTOFFSET.temperature750hPa.p) }
  public static func add(temperature700hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature700hPa, at: VTOFFSET.temperature700hPa.p) }
  public static func add(temperature650hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature650hPa, at: VTOFFSET.temperature650hPa.p) }
  public static func add(temperature600hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature600hPa, at: VTOFFSET.temperature600hPa.p) }
  public static func add(temperature550hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature550hPa, at: VTOFFSET.temperature550hPa.p) }
  public static func add(temperature500hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature500hPa, at: VTOFFSET.temperature500hPa.p) }
  public static func add(temperature450hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature450hPa, at: VTOFFSET.temperature450hPa.p) }
  public static func add(temperature400hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature400hPa, at: VTOFFSET.temperature400hPa.p) }
  public static func add(temperature350hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature350hPa, at: VTOFFSET.temperature350hPa.p) }
  public static func add(temperature300hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature300hPa, at: VTOFFSET.temperature300hPa.p) }
  public static func add(temperature275hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature275hPa, at: VTOFFSET.temperature275hPa.p) }
  public static func add(temperature250hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature250hPa, at: VTOFFSET.temperature250hPa.p) }
  public static func add(temperature225hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature225hPa, at: VTOFFSET.temperature225hPa.p) }
  public static func add(temperature200hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature200hPa, at: VTOFFSET.temperature200hPa.p) }
  public static func add(temperature175hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature175hPa, at: VTOFFSET.temperature175hPa.p) }
  public static func add(temperature150hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature150hPa, at: VTOFFSET.temperature150hPa.p) }
  public static func add(temperature125hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature125hPa, at: VTOFFSET.temperature125hPa.p) }
  public static func add(temperature100hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature100hPa, at: VTOFFSET.temperature100hPa.p) }
  public static func add(temperature70hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature70hPa, at: VTOFFSET.temperature70hPa.p) }
  public static func add(temperature50hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature50hPa, at: VTOFFSET.temperature50hPa.p) }
  public static func add(temperature40hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature40hPa, at: VTOFFSET.temperature40hPa.p) }
  public static func add(temperature30hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature30hPa, at: VTOFFSET.temperature30hPa.p) }
  public static func add(temperature20hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature20hPa, at: VTOFFSET.temperature20hPa.p) }
  public static func add(temperature15hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature15hPa, at: VTOFFSET.temperature15hPa.p) }
  public static func add(temperature10hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature10hPa, at: VTOFFSET.temperature10hPa.p) }
  public static func add(dewpoint1015hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint1015hPa, at: VTOFFSET.dewpoint1015hPa.p) }
  public static func add(dewpoint1000hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint1000hPa, at: VTOFFSET.dewpoint1000hPa.p) }
  public static func add(dewpoint985hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint985hPa, at: VTOFFSET.dewpoint985hPa.p) }
  public static func add(dewpoint975hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint975hPa, at: VTOFFSET.dewpoint975hPa.p) }
  public static func add(dewpoint970hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint970hPa, at: VTOFFSET.dewpoint970hPa.p) }
  public static func add(dewpoint950hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint950hPa, at: VTOFFSET.dewpoint950hPa.p) }
  public static func add(dewpoint925hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint925hPa, at: VTOFFSET.dewpoint925hPa.p) }
  public static func add(dewpoint900hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint900hPa, at: VTOFFSET.dewpoint900hPa.p) }
  public static func add(dewpoint875hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint875hPa, at: VTOFFSET.dewpoint875hPa.p) }
  public static func add(dewpoint850hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint850hPa, at: VTOFFSET.dewpoint850hPa.p) }
  public static func add(dewpoint800hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint800hPa, at: VTOFFSET.dewpoint800hPa.p) }
  public static func add(dewpoint750hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint750hPa, at: VTOFFSET.dewpoint750hPa.p) }
  public static func add(dewpoint700hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint700hPa, at: VTOFFSET.dewpoint700hPa.p) }
  public static func add(dewpoint650hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint650hPa, at: VTOFFSET.dewpoint650hPa.p) }
  public static func add(dewpoint600hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint600hPa, at: VTOFFSET.dewpoint600hPa.p) }
  public static func add(dewpoint550hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint550hPa, at: VTOFFSET.dewpoint550hPa.p) }
  public static func add(dewpoint500hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint500hPa, at: VTOFFSET.dewpoint500hPa.p) }
  public static func add(dewpoint450hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint450hPa, at: VTOFFSET.dewpoint450hPa.p) }
  public static func add(dewpoint400hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint400hPa, at: VTOFFSET.dewpoint400hPa.p) }
  public static func add(dewpoint350hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint350hPa, at: VTOFFSET.dewpoint350hPa.p) }
  public static func add(dewpoint300hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint300hPa, at: VTOFFSET.dewpoint300hPa.p) }
  public static func add(dewpoint275hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint275hPa, at: VTOFFSET.dewpoint275hPa.p) }
  public static func add(dewpoint250hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint250hPa, at: VTOFFSET.dewpoint250hPa.p) }
  public static func add(dewpoint225hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint225hPa, at: VTOFFSET.dewpoint225hPa.p) }
  public static func add(dewpoint200hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint200hPa, at: VTOFFSET.dewpoint200hPa.p) }
  public static func add(dewpoint175hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint175hPa, at: VTOFFSET.dewpoint175hPa.p) }
  public static func add(dewpoint150hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint150hPa, at: VTOFFSET.dewpoint150hPa.p) }
  public static func add(dewpoint125hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint125hPa, at: VTOFFSET.dewpoint125hPa.p) }
  public static func add(dewpoint100hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint100hPa, at: VTOFFSET.dewpoint100hPa.p) }
  public static func add(dewpoint70hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint70hPa, at: VTOFFSET.dewpoint70hPa.p) }
  public static func add(dewpoint50hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint50hPa, at: VTOFFSET.dewpoint50hPa.p) }
  public static func add(dewpoint40hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint40hPa, at: VTOFFSET.dewpoint40hPa.p) }
  public static func add(dewpoint30hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint30hPa, at: VTOFFSET.dewpoint30hPa.p) }
  public static func add(dewpoint20hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint20hPa, at: VTOFFSET.dewpoint20hPa.p) }
  public static func add(dewpoint15hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint15hPa, at: VTOFFSET.dewpoint15hPa.p) }
  public static func add(dewpoint10hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint10hPa, at: VTOFFSET.dewpoint10hPa.p) }
  public static func add(relativehumidity1015hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity1015hPa, at: VTOFFSET.relativehumidity1015hPa.p) }
  public static func add(relativehumidity1000hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity1000hPa, at: VTOFFSET.relativehumidity1000hPa.p) }
  public static func add(relativehumidity985hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity985hPa, at: VTOFFSET.relativehumidity985hPa.p) }
  public static func add(relativehumidity975hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity975hPa, at: VTOFFSET.relativehumidity975hPa.p) }
  public static func add(relativehumidity970hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity970hPa, at: VTOFFSET.relativehumidity970hPa.p) }
  public static func add(relativehumidity950hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity950hPa, at: VTOFFSET.relativehumidity950hPa.p) }
  public static func add(relativehumidity925hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity925hPa, at: VTOFFSET.relativehumidity925hPa.p) }
  public static func add(relativehumidity900hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity900hPa, at: VTOFFSET.relativehumidity900hPa.p) }
  public static func add(relativehumidity875hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity875hPa, at: VTOFFSET.relativehumidity875hPa.p) }
  public static func add(relativehumidity850hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity850hPa, at: VTOFFSET.relativehumidity850hPa.p) }
  public static func add(relativehumidity800hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity800hPa, at: VTOFFSET.relativehumidity800hPa.p) }
  public static func add(relativehumidity750hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity750hPa, at: VTOFFSET.relativehumidity750hPa.p) }
  public static func add(relativehumidity700hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity700hPa, at: VTOFFSET.relativehumidity700hPa.p) }
  public static func add(relativehumidity650hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity650hPa, at: VTOFFSET.relativehumidity650hPa.p) }
  public static func add(relativehumidity600hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity600hPa, at: VTOFFSET.relativehumidity600hPa.p) }
  public static func add(relativehumidity550hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity550hPa, at: VTOFFSET.relativehumidity550hPa.p) }
  public static func add(relativehumidity500hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity500hPa, at: VTOFFSET.relativehumidity500hPa.p) }
  public static func add(relativehumidity450hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity450hPa, at: VTOFFSET.relativehumidity450hPa.p) }
  public static func add(relativehumidity400hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity400hPa, at: VTOFFSET.relativehumidity400hPa.p) }
  public static func add(relativehumidity350hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity350hPa, at: VTOFFSET.relativehumidity350hPa.p) }
  public static func add(relativehumidity300hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity300hPa, at: VTOFFSET.relativehumidity300hPa.p) }
  public static func add(relativehumidity275hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity275hPa, at: VTOFFSET.relativehumidity275hPa.p) }
  public static func add(relativehumidity250hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity250hPa, at: VTOFFSET.relativehumidity250hPa.p) }
  public static func add(relativehumidity225hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity225hPa, at: VTOFFSET.relativehumidity225hPa.p) }
  public static func add(relativehumidity200hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity200hPa, at: VTOFFSET.relativehumidity200hPa.p) }
  public static func add(relativehumidity175hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity175hPa, at: VTOFFSET.relativehumidity175hPa.p) }
  public static func add(relativehumidity150hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity150hPa, at: VTOFFSET.relativehumidity150hPa.p) }
  public static func add(relativehumidity125hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity125hPa, at: VTOFFSET.relativehumidity125hPa.p) }
  public static func add(relativehumidity100hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity100hPa, at: VTOFFSET.relativehumidity100hPa.p) }
  public static func add(relativehumidity70hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity70hPa, at: VTOFFSET.relativehumidity70hPa.p) }
  public static func add(relativehumidity50hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity50hPa, at: VTOFFSET.relativehumidity50hPa.p) }
  public static func add(relativehumidity40hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity40hPa, at: VTOFFSET.relativehumidity40hPa.p) }
  public static func add(relativehumidity30hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity30hPa, at: VTOFFSET.relativehumidity30hPa.p) }
  public static func add(relativehumidity20hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity20hPa, at: VTOFFSET.relativehumidity20hPa.p) }
  public static func add(relativehumidity15hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity15hPa, at: VTOFFSET.relativehumidity15hPa.p) }
  public static func add(relativehumidity10hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity10hPa, at: VTOFFSET.relativehumidity10hPa.p) }
  public static func add(cloudcover1015hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover1015hPa, at: VTOFFSET.cloudcover1015hPa.p) }
  public static func add(cloudcover1000hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover1000hPa, at: VTOFFSET.cloudcover1000hPa.p) }
  public static func add(cloudcover985hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover985hPa, at: VTOFFSET.cloudcover985hPa.p) }
  public static func add(cloudcover975hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover975hPa, at: VTOFFSET.cloudcover975hPa.p) }
  public static func add(cloudcover970hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover970hPa, at: VTOFFSET.cloudcover970hPa.p) }
  public static func add(cloudcover950hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover950hPa, at: VTOFFSET.cloudcover950hPa.p) }
  public static func add(cloudcover925hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover925hPa, at: VTOFFSET.cloudcover925hPa.p) }
  public static func add(cloudcover900hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover900hPa, at: VTOFFSET.cloudcover900hPa.p) }
  public static func add(cloudcover875hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover875hPa, at: VTOFFSET.cloudcover875hPa.p) }
  public static func add(cloudcover850hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover850hPa, at: VTOFFSET.cloudcover850hPa.p) }
  public static func add(cloudcover800hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover800hPa, at: VTOFFSET.cloudcover800hPa.p) }
  public static func add(cloudcover750hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover750hPa, at: VTOFFSET.cloudcover750hPa.p) }
  public static func add(cloudcover700hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover700hPa, at: VTOFFSET.cloudcover700hPa.p) }
  public static func add(cloudcover650hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover650hPa, at: VTOFFSET.cloudcover650hPa.p) }
  public static func add(cloudcover600hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover600hPa, at: VTOFFSET.cloudcover600hPa.p) }
  public static func add(cloudcover550hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover550hPa, at: VTOFFSET.cloudcover550hPa.p) }
  public static func add(cloudcover500hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover500hPa, at: VTOFFSET.cloudcover500hPa.p) }
  public static func add(cloudcover450hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover450hPa, at: VTOFFSET.cloudcover450hPa.p) }
  public static func add(cloudcover400hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover400hPa, at: VTOFFSET.cloudcover400hPa.p) }
  public static func add(cloudcover350hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover350hPa, at: VTOFFSET.cloudcover350hPa.p) }
  public static func add(cloudcover300hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover300hPa, at: VTOFFSET.cloudcover300hPa.p) }
  public static func add(cloudcover275hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover275hPa, at: VTOFFSET.cloudcover275hPa.p) }
  public static func add(cloudcover250hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover250hPa, at: VTOFFSET.cloudcover250hPa.p) }
  public static func add(cloudcover225hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover225hPa, at: VTOFFSET.cloudcover225hPa.p) }
  public static func add(cloudcover200hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover200hPa, at: VTOFFSET.cloudcover200hPa.p) }
  public static func add(cloudcover175hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover175hPa, at: VTOFFSET.cloudcover175hPa.p) }
  public static func add(cloudcover150hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover150hPa, at: VTOFFSET.cloudcover150hPa.p) }
  public static func add(cloudcover125hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover125hPa, at: VTOFFSET.cloudcover125hPa.p) }
  public static func add(cloudcover100hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover100hPa, at: VTOFFSET.cloudcover100hPa.p) }
  public static func add(cloudcover70hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover70hPa, at: VTOFFSET.cloudcover70hPa.p) }
  public static func add(cloudcover50hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover50hPa, at: VTOFFSET.cloudcover50hPa.p) }
  public static func add(cloudcover40hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover40hPa, at: VTOFFSET.cloudcover40hPa.p) }
  public static func add(cloudcover30hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover30hPa, at: VTOFFSET.cloudcover30hPa.p) }
  public static func add(cloudcover20hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover20hPa, at: VTOFFSET.cloudcover20hPa.p) }
  public static func add(cloudcover15hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover15hPa, at: VTOFFSET.cloudcover15hPa.p) }
  public static func add(cloudcover10hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover10hPa, at: VTOFFSET.cloudcover10hPa.p) }
  public static func add(windspeed1015hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed1015hPa, at: VTOFFSET.windspeed1015hPa.p) }
  public static func add(windspeed1000hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed1000hPa, at: VTOFFSET.windspeed1000hPa.p) }
  public static func add(windspeed985hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed985hPa, at: VTOFFSET.windspeed985hPa.p) }
  public static func add(windspeed975hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed975hPa, at: VTOFFSET.windspeed975hPa.p) }
  public static func add(windspeed970hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed970hPa, at: VTOFFSET.windspeed970hPa.p) }
  public static func add(windspeed950hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed950hPa, at: VTOFFSET.windspeed950hPa.p) }
  public static func add(windspeed925hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed925hPa, at: VTOFFSET.windspeed925hPa.p) }
  public static func add(windspeed900hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed900hPa, at: VTOFFSET.windspeed900hPa.p) }
  public static func add(windspeed875hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed875hPa, at: VTOFFSET.windspeed875hPa.p) }
  public static func add(windspeed850hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed850hPa, at: VTOFFSET.windspeed850hPa.p) }
  public static func add(windspeed800hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed800hPa, at: VTOFFSET.windspeed800hPa.p) }
  public static func add(windspeed750hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed750hPa, at: VTOFFSET.windspeed750hPa.p) }
  public static func add(windspeed700hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed700hPa, at: VTOFFSET.windspeed700hPa.p) }
  public static func add(windspeed650hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed650hPa, at: VTOFFSET.windspeed650hPa.p) }
  public static func add(windspeed600hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed600hPa, at: VTOFFSET.windspeed600hPa.p) }
  public static func add(windspeed550hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed550hPa, at: VTOFFSET.windspeed550hPa.p) }
  public static func add(windspeed500hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed500hPa, at: VTOFFSET.windspeed500hPa.p) }
  public static func add(windspeed450hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed450hPa, at: VTOFFSET.windspeed450hPa.p) }
  public static func add(windspeed400hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed400hPa, at: VTOFFSET.windspeed400hPa.p) }
  public static func add(windspeed350hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed350hPa, at: VTOFFSET.windspeed350hPa.p) }
  public static func add(windspeed300hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed300hPa, at: VTOFFSET.windspeed300hPa.p) }
  public static func add(windspeed275hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed275hPa, at: VTOFFSET.windspeed275hPa.p) }
  public static func add(windspeed250hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed250hPa, at: VTOFFSET.windspeed250hPa.p) }
  public static func add(windspeed225hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed225hPa, at: VTOFFSET.windspeed225hPa.p) }
  public static func add(windspeed200hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed200hPa, at: VTOFFSET.windspeed200hPa.p) }
  public static func add(windspeed175hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed175hPa, at: VTOFFSET.windspeed175hPa.p) }
  public static func add(windspeed150hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed150hPa, at: VTOFFSET.windspeed150hPa.p) }
  public static func add(windspeed125hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed125hPa, at: VTOFFSET.windspeed125hPa.p) }
  public static func add(windspeed100hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed100hPa, at: VTOFFSET.windspeed100hPa.p) }
  public static func add(windspeed70hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed70hPa, at: VTOFFSET.windspeed70hPa.p) }
  public static func add(windspeed50hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed50hPa, at: VTOFFSET.windspeed50hPa.p) }
  public static func add(windspeed40hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed40hPa, at: VTOFFSET.windspeed40hPa.p) }
  public static func add(windspeed30hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed30hPa, at: VTOFFSET.windspeed30hPa.p) }
  public static func add(windspeed20hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed20hPa, at: VTOFFSET.windspeed20hPa.p) }
  public static func add(windspeed15hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed15hPa, at: VTOFFSET.windspeed15hPa.p) }
  public static func add(windspeed10hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10hPa, at: VTOFFSET.windspeed10hPa.p) }
  public static func add(winddirection1015hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection1015hPa, at: VTOFFSET.winddirection1015hPa.p) }
  public static func add(winddirection1000hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection1000hPa, at: VTOFFSET.winddirection1000hPa.p) }
  public static func add(winddirection985hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection985hPa, at: VTOFFSET.winddirection985hPa.p) }
  public static func add(winddirection975hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection975hPa, at: VTOFFSET.winddirection975hPa.p) }
  public static func add(winddirection970hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection970hPa, at: VTOFFSET.winddirection970hPa.p) }
  public static func add(winddirection950hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection950hPa, at: VTOFFSET.winddirection950hPa.p) }
  public static func add(winddirection925hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection925hPa, at: VTOFFSET.winddirection925hPa.p) }
  public static func add(winddirection900hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection900hPa, at: VTOFFSET.winddirection900hPa.p) }
  public static func add(winddirection875hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection875hPa, at: VTOFFSET.winddirection875hPa.p) }
  public static func add(winddirection850hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection850hPa, at: VTOFFSET.winddirection850hPa.p) }
  public static func add(winddirection800hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection800hPa, at: VTOFFSET.winddirection800hPa.p) }
  public static func add(winddirection750hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection750hPa, at: VTOFFSET.winddirection750hPa.p) }
  public static func add(winddirection700hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection700hPa, at: VTOFFSET.winddirection700hPa.p) }
  public static func add(winddirection650hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection650hPa, at: VTOFFSET.winddirection650hPa.p) }
  public static func add(winddirection600hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection600hPa, at: VTOFFSET.winddirection600hPa.p) }
  public static func add(winddirection550hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection550hPa, at: VTOFFSET.winddirection550hPa.p) }
  public static func add(winddirection500hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection500hPa, at: VTOFFSET.winddirection500hPa.p) }
  public static func add(winddirection450hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection450hPa, at: VTOFFSET.winddirection450hPa.p) }
  public static func add(winddirection400hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection400hPa, at: VTOFFSET.winddirection400hPa.p) }
  public static func add(winddirection350hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection350hPa, at: VTOFFSET.winddirection350hPa.p) }
  public static func add(winddirection300hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection300hPa, at: VTOFFSET.winddirection300hPa.p) }
  public static func add(winddirection275hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection275hPa, at: VTOFFSET.winddirection275hPa.p) }
  public static func add(winddirection250hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection250hPa, at: VTOFFSET.winddirection250hPa.p) }
  public static func add(winddirection225hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection225hPa, at: VTOFFSET.winddirection225hPa.p) }
  public static func add(winddirection200hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection200hPa, at: VTOFFSET.winddirection200hPa.p) }
  public static func add(winddirection175hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection175hPa, at: VTOFFSET.winddirection175hPa.p) }
  public static func add(winddirection150hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection150hPa, at: VTOFFSET.winddirection150hPa.p) }
  public static func add(winddirection125hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection125hPa, at: VTOFFSET.winddirection125hPa.p) }
  public static func add(winddirection100hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection100hPa, at: VTOFFSET.winddirection100hPa.p) }
  public static func add(winddirection70hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection70hPa, at: VTOFFSET.winddirection70hPa.p) }
  public static func add(winddirection50hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection50hPa, at: VTOFFSET.winddirection50hPa.p) }
  public static func add(winddirection40hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection40hPa, at: VTOFFSET.winddirection40hPa.p) }
  public static func add(winddirection30hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection30hPa, at: VTOFFSET.winddirection30hPa.p) }
  public static func add(winddirection20hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection20hPa, at: VTOFFSET.winddirection20hPa.p) }
  public static func add(winddirection15hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection15hPa, at: VTOFFSET.winddirection15hPa.p) }
  public static func add(winddirection10hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10hPa, at: VTOFFSET.winddirection10hPa.p) }
  public static func add(verticalVelocity1015hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity1015hPa, at: VTOFFSET.verticalVelocity1015hPa.p) }
  public static func add(verticalVelocity1000hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity1000hPa, at: VTOFFSET.verticalVelocity1000hPa.p) }
  public static func add(verticalVelocity985hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity985hPa, at: VTOFFSET.verticalVelocity985hPa.p) }
  public static func add(verticalVelocity975hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity975hPa, at: VTOFFSET.verticalVelocity975hPa.p) }
  public static func add(verticalVelocity970hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity970hPa, at: VTOFFSET.verticalVelocity970hPa.p) }
  public static func add(verticalVelocity950hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity950hPa, at: VTOFFSET.verticalVelocity950hPa.p) }
  public static func add(verticalVelocity925hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity925hPa, at: VTOFFSET.verticalVelocity925hPa.p) }
  public static func add(verticalVelocity900hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity900hPa, at: VTOFFSET.verticalVelocity900hPa.p) }
  public static func add(verticalVelocity875hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity875hPa, at: VTOFFSET.verticalVelocity875hPa.p) }
  public static func add(verticalVelocity850hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity850hPa, at: VTOFFSET.verticalVelocity850hPa.p) }
  public static func add(verticalVelocity800hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity800hPa, at: VTOFFSET.verticalVelocity800hPa.p) }
  public static func add(verticalVelocity750hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity750hPa, at: VTOFFSET.verticalVelocity750hPa.p) }
  public static func add(verticalVelocity700hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity700hPa, at: VTOFFSET.verticalVelocity700hPa.p) }
  public static func add(verticalVelocity650hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity650hPa, at: VTOFFSET.verticalVelocity650hPa.p) }
  public static func add(verticalVelocity600hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity600hPa, at: VTOFFSET.verticalVelocity600hPa.p) }
  public static func add(verticalVelocity550hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity550hPa, at: VTOFFSET.verticalVelocity550hPa.p) }
  public static func add(verticalVelocity500hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity500hPa, at: VTOFFSET.verticalVelocity500hPa.p) }
  public static func add(verticalVelocity450hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity450hPa, at: VTOFFSET.verticalVelocity450hPa.p) }
  public static func add(verticalVelocity400hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity400hPa, at: VTOFFSET.verticalVelocity400hPa.p) }
  public static func add(verticalVelocity350hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity350hPa, at: VTOFFSET.verticalVelocity350hPa.p) }
  public static func add(verticalVelocity300hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity300hPa, at: VTOFFSET.verticalVelocity300hPa.p) }
  public static func add(verticalVelocity275hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity275hPa, at: VTOFFSET.verticalVelocity275hPa.p) }
  public static func add(verticalVelocity250hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity250hPa, at: VTOFFSET.verticalVelocity250hPa.p) }
  public static func add(verticalVelocity225hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity225hPa, at: VTOFFSET.verticalVelocity225hPa.p) }
  public static func add(verticalVelocity200hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity200hPa, at: VTOFFSET.verticalVelocity200hPa.p) }
  public static func add(verticalVelocity175hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity175hPa, at: VTOFFSET.verticalVelocity175hPa.p) }
  public static func add(verticalVelocity150hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity150hPa, at: VTOFFSET.verticalVelocity150hPa.p) }
  public static func add(verticalVelocity125hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity125hPa, at: VTOFFSET.verticalVelocity125hPa.p) }
  public static func add(verticalVelocity100hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity100hPa, at: VTOFFSET.verticalVelocity100hPa.p) }
  public static func add(verticalVelocity70hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity70hPa, at: VTOFFSET.verticalVelocity70hPa.p) }
  public static func add(verticalVelocity50hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity50hPa, at: VTOFFSET.verticalVelocity50hPa.p) }
  public static func add(verticalVelocity40hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity40hPa, at: VTOFFSET.verticalVelocity40hPa.p) }
  public static func add(verticalVelocity30hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity30hPa, at: VTOFFSET.verticalVelocity30hPa.p) }
  public static func add(verticalVelocity20hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity20hPa, at: VTOFFSET.verticalVelocity20hPa.p) }
  public static func add(verticalVelocity15hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity15hPa, at: VTOFFSET.verticalVelocity15hPa.p) }
  public static func add(verticalVelocity10hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocity10hPa, at: VTOFFSET.verticalVelocity10hPa.p) }
  public static func add(geopotentialHeight1015hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight1015hPa, at: VTOFFSET.geopotentialHeight1015hPa.p) }
  public static func add(geopotentialHeight1000hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight1000hPa, at: VTOFFSET.geopotentialHeight1000hPa.p) }
  public static func add(geopotentialHeight985hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight985hPa, at: VTOFFSET.geopotentialHeight985hPa.p) }
  public static func add(geopotentialHeight975hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight975hPa, at: VTOFFSET.geopotentialHeight975hPa.p) }
  public static func add(geopotentialHeight970hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight970hPa, at: VTOFFSET.geopotentialHeight970hPa.p) }
  public static func add(geopotentialHeight950hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight950hPa, at: VTOFFSET.geopotentialHeight950hPa.p) }
  public static func add(geopotentialHeight925hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight925hPa, at: VTOFFSET.geopotentialHeight925hPa.p) }
  public static func add(geopotentialHeight900hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight900hPa, at: VTOFFSET.geopotentialHeight900hPa.p) }
  public static func add(geopotentialHeight875hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight875hPa, at: VTOFFSET.geopotentialHeight875hPa.p) }
  public static func add(geopotentialHeight850hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight850hPa, at: VTOFFSET.geopotentialHeight850hPa.p) }
  public static func add(geopotentialHeight800hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight800hPa, at: VTOFFSET.geopotentialHeight800hPa.p) }
  public static func add(geopotentialHeight750hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight750hPa, at: VTOFFSET.geopotentialHeight750hPa.p) }
  public static func add(geopotentialHeight700hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight700hPa, at: VTOFFSET.geopotentialHeight700hPa.p) }
  public static func add(geopotentialHeight650hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight650hPa, at: VTOFFSET.geopotentialHeight650hPa.p) }
  public static func add(geopotentialHeight600hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight600hPa, at: VTOFFSET.geopotentialHeight600hPa.p) }
  public static func add(geopotentialHeight550hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight550hPa, at: VTOFFSET.geopotentialHeight550hPa.p) }
  public static func add(geopotentialHeight500hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight500hPa, at: VTOFFSET.geopotentialHeight500hPa.p) }
  public static func add(geopotentialHeight450hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight450hPa, at: VTOFFSET.geopotentialHeight450hPa.p) }
  public static func add(geopotentialHeight400hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight400hPa, at: VTOFFSET.geopotentialHeight400hPa.p) }
  public static func add(geopotentialHeight350hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight350hPa, at: VTOFFSET.geopotentialHeight350hPa.p) }
  public static func add(geopotentialHeight300hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight300hPa, at: VTOFFSET.geopotentialHeight300hPa.p) }
  public static func add(geopotentialHeight275hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight275hPa, at: VTOFFSET.geopotentialHeight275hPa.p) }
  public static func add(geopotentialHeight250hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight250hPa, at: VTOFFSET.geopotentialHeight250hPa.p) }
  public static func add(geopotentialHeight225hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight225hPa, at: VTOFFSET.geopotentialHeight225hPa.p) }
  public static func add(geopotentialHeight200hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight200hPa, at: VTOFFSET.geopotentialHeight200hPa.p) }
  public static func add(geopotentialHeight175hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight175hPa, at: VTOFFSET.geopotentialHeight175hPa.p) }
  public static func add(geopotentialHeight150hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight150hPa, at: VTOFFSET.geopotentialHeight150hPa.p) }
  public static func add(geopotentialHeight125hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight125hPa, at: VTOFFSET.geopotentialHeight125hPa.p) }
  public static func add(geopotentialHeight100hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight100hPa, at: VTOFFSET.geopotentialHeight100hPa.p) }
  public static func add(geopotentialHeight70hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight70hPa, at: VTOFFSET.geopotentialHeight70hPa.p) }
  public static func add(geopotentialHeight50hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight50hPa, at: VTOFFSET.geopotentialHeight50hPa.p) }
  public static func add(geopotentialHeight40hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight40hPa, at: VTOFFSET.geopotentialHeight40hPa.p) }
  public static func add(geopotentialHeight30hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight30hPa, at: VTOFFSET.geopotentialHeight30hPa.p) }
  public static func add(geopotentialHeight20hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight20hPa, at: VTOFFSET.geopotentialHeight20hPa.p) }
  public static func add(geopotentialHeight15hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight15hPa, at: VTOFFSET.geopotentialHeight15hPa.p) }
  public static func add(geopotentialHeight10hPa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeight10hPa, at: VTOFFSET.geopotentialHeight10hPa.p) }
  public static func endWeatherHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createWeatherHourly(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    temperature2mOffset temperature2m: Offset = Offset(),
    cloudcoverOffset cloudcover: Offset = Offset(),
    cloudcoverLowOffset cloudcoverLow: Offset = Offset(),
    cloudcoverMidOffset cloudcoverMid: Offset = Offset(),
    cloudcoverHighOffset cloudcoverHigh: Offset = Offset(),
    pressureMslOffset pressureMsl: Offset = Offset(),
    relativehumidity2mOffset relativehumidity2m: Offset = Offset(),
    precipitationOffset precipitation: Offset = Offset(),
    precipitationProbabilityOffset precipitationProbability: Offset = Offset(),
    weathercodeOffset weathercode: Offset = Offset(),
    temperature80mOffset temperature80m: Offset = Offset(),
    temperature120mOffset temperature120m: Offset = Offset(),
    temperature180mOffset temperature180m: Offset = Offset(),
    soilTemperature0cmOffset soilTemperature0cm: Offset = Offset(),
    soilTemperature6cmOffset soilTemperature6cm: Offset = Offset(),
    soilTemperature18cmOffset soilTemperature18cm: Offset = Offset(),
    soilTemperature54cmOffset soilTemperature54cm: Offset = Offset(),
    soilMoisture01cmOffset soilMoisture01cm: Offset = Offset(),
    soilMoisture13cmOffset soilMoisture13cm: Offset = Offset(),
    soilMoisture39cmOffset soilMoisture39cm: Offset = Offset(),
    soilMoisture927cmOffset soilMoisture927cm: Offset = Offset(),
    soilMoisture2781cmOffset soilMoisture2781cm: Offset = Offset(),
    snowDepthOffset snowDepth: Offset = Offset(),
    snowHeightOffset snowHeight: Offset = Offset(),
    sensibleHeatfluxOffset sensibleHeatflux: Offset = Offset(),
    latentHeatfluxOffset latentHeatflux: Offset = Offset(),
    showersOffset showers: Offset = Offset(),
    rainOffset rain: Offset = Offset(),
    windgusts10mOffset windgusts10m: Offset = Offset(),
    freezinglevelHeightOffset freezinglevelHeight: Offset = Offset(),
    dewpoint2mOffset dewpoint2m: Offset = Offset(),
    diffuseRadiationOffset diffuseRadiation: Offset = Offset(),
    directRadiationOffset directRadiation: Offset = Offset(),
    apparentTemperatureOffset apparentTemperature: Offset = Offset(),
    windspeed10mOffset windspeed10m: Offset = Offset(),
    winddirection10mOffset winddirection10m: Offset = Offset(),
    windspeed80mOffset windspeed80m: Offset = Offset(),
    winddirection80mOffset winddirection80m: Offset = Offset(),
    windspeed120mOffset windspeed120m: Offset = Offset(),
    winddirection120mOffset winddirection120m: Offset = Offset(),
    windspeed180mOffset windspeed180m: Offset = Offset(),
    winddirection180mOffset winddirection180m: Offset = Offset(),
    directNormalIrradianceOffset directNormalIrradiance: Offset = Offset(),
    evapotranspirationOffset evapotranspiration: Offset = Offset(),
    et0FaoEvapotranspirationOffset et0FaoEvapotranspiration: Offset = Offset(),
    vaporPressureDeficitOffset vaporPressureDeficit: Offset = Offset(),
    shortwaveRadiationOffset shortwaveRadiation: Offset = Offset(),
    snowfallOffset snowfall: Offset = Offset(),
    surfacePressureOffset surfacePressure: Offset = Offset(),
    terrestrialRadiationOffset terrestrialRadiation: Offset = Offset(),
    terrestrialRadiationInstantOffset terrestrialRadiationInstant: Offset = Offset(),
    shortwaveRadiationInstantOffset shortwaveRadiationInstant: Offset = Offset(),
    diffuseRadiationInstantOffset diffuseRadiationInstant: Offset = Offset(),
    directRadiationInstantOffset directRadiationInstant: Offset = Offset(),
    directNormalIrradianceInstantOffset directNormalIrradianceInstant: Offset = Offset(),
    visibilityOffset visibility: Offset = Offset(),
    capeOffset cape: Offset = Offset(),
    uvIndexOffset uvIndex: Offset = Offset(),
    uvIndexClearSkyOffset uvIndexClearSky: Offset = Offset(),
    isDayOffset isDay: Offset = Offset(),
    soilTemperature0To10cmOffset soilTemperature0To10cm: Offset = Offset(),
    soilTemperature10To40cmOffset soilTemperature10To40cm: Offset = Offset(),
    soilTemperature40To100cmOffset soilTemperature40To100cm: Offset = Offset(),
    soilTemperature100To200cmOffset soilTemperature100To200cm: Offset = Offset(),
    soilMoisture0To10cmOffset soilMoisture0To10cm: Offset = Offset(),
    soilMoisture10To40cmOffset soilMoisture10To40cm: Offset = Offset(),
    soilMoisture40To100cmOffset soilMoisture40To100cm: Offset = Offset(),
    soilMoisture100To200cmOffset soilMoisture100To200cm: Offset = Offset(),
    growingDegreeDaysBase0Limit50Offset growingDegreeDaysBase0Limit50: Offset = Offset(),
    leafWetnessProbabilityOffset leafWetnessProbability: Offset = Offset(),
    soilMoistureIndex0To7cmOffset soilMoistureIndex0To7cm: Offset = Offset(),
    soilMoistureIndex7To28cmOffset soilMoistureIndex7To28cm: Offset = Offset(),
    soilMoistureIndex28To100cmOffset soilMoistureIndex28To100cm: Offset = Offset(),
    soilMoistureIndex100To255cmOffset soilMoistureIndex100To255cm: Offset = Offset(),
    soilMoistureIndex0To100cmOffset soilMoistureIndex0To100cm: Offset = Offset(),
    lightningPotentialOffset lightningPotential: Offset = Offset(),
    temperature1015hPaOffset temperature1015hPa: Offset = Offset(),
    temperature1000hPaOffset temperature1000hPa: Offset = Offset(),
    temperature985hPaOffset temperature985hPa: Offset = Offset(),
    temperature975hPaOffset temperature975hPa: Offset = Offset(),
    temperature970hPaOffset temperature970hPa: Offset = Offset(),
    temperature950hPaOffset temperature950hPa: Offset = Offset(),
    temperature925hPaOffset temperature925hPa: Offset = Offset(),
    temperature900hPaOffset temperature900hPa: Offset = Offset(),
    temperature875hPaOffset temperature875hPa: Offset = Offset(),
    temperature850hPaOffset temperature850hPa: Offset = Offset(),
    temperature800hPaOffset temperature800hPa: Offset = Offset(),
    temperature750hPaOffset temperature750hPa: Offset = Offset(),
    temperature700hPaOffset temperature700hPa: Offset = Offset(),
    temperature650hPaOffset temperature650hPa: Offset = Offset(),
    temperature600hPaOffset temperature600hPa: Offset = Offset(),
    temperature550hPaOffset temperature550hPa: Offset = Offset(),
    temperature500hPaOffset temperature500hPa: Offset = Offset(),
    temperature450hPaOffset temperature450hPa: Offset = Offset(),
    temperature400hPaOffset temperature400hPa: Offset = Offset(),
    temperature350hPaOffset temperature350hPa: Offset = Offset(),
    temperature300hPaOffset temperature300hPa: Offset = Offset(),
    temperature275hPaOffset temperature275hPa: Offset = Offset(),
    temperature250hPaOffset temperature250hPa: Offset = Offset(),
    temperature225hPaOffset temperature225hPa: Offset = Offset(),
    temperature200hPaOffset temperature200hPa: Offset = Offset(),
    temperature175hPaOffset temperature175hPa: Offset = Offset(),
    temperature150hPaOffset temperature150hPa: Offset = Offset(),
    temperature125hPaOffset temperature125hPa: Offset = Offset(),
    temperature100hPaOffset temperature100hPa: Offset = Offset(),
    temperature70hPaOffset temperature70hPa: Offset = Offset(),
    temperature50hPaOffset temperature50hPa: Offset = Offset(),
    temperature40hPaOffset temperature40hPa: Offset = Offset(),
    temperature30hPaOffset temperature30hPa: Offset = Offset(),
    temperature20hPaOffset temperature20hPa: Offset = Offset(),
    temperature15hPaOffset temperature15hPa: Offset = Offset(),
    temperature10hPaOffset temperature10hPa: Offset = Offset(),
    dewpoint1015hPaOffset dewpoint1015hPa: Offset = Offset(),
    dewpoint1000hPaOffset dewpoint1000hPa: Offset = Offset(),
    dewpoint985hPaOffset dewpoint985hPa: Offset = Offset(),
    dewpoint975hPaOffset dewpoint975hPa: Offset = Offset(),
    dewpoint970hPaOffset dewpoint970hPa: Offset = Offset(),
    dewpoint950hPaOffset dewpoint950hPa: Offset = Offset(),
    dewpoint925hPaOffset dewpoint925hPa: Offset = Offset(),
    dewpoint900hPaOffset dewpoint900hPa: Offset = Offset(),
    dewpoint875hPaOffset dewpoint875hPa: Offset = Offset(),
    dewpoint850hPaOffset dewpoint850hPa: Offset = Offset(),
    dewpoint800hPaOffset dewpoint800hPa: Offset = Offset(),
    dewpoint750hPaOffset dewpoint750hPa: Offset = Offset(),
    dewpoint700hPaOffset dewpoint700hPa: Offset = Offset(),
    dewpoint650hPaOffset dewpoint650hPa: Offset = Offset(),
    dewpoint600hPaOffset dewpoint600hPa: Offset = Offset(),
    dewpoint550hPaOffset dewpoint550hPa: Offset = Offset(),
    dewpoint500hPaOffset dewpoint500hPa: Offset = Offset(),
    dewpoint450hPaOffset dewpoint450hPa: Offset = Offset(),
    dewpoint400hPaOffset dewpoint400hPa: Offset = Offset(),
    dewpoint350hPaOffset dewpoint350hPa: Offset = Offset(),
    dewpoint300hPaOffset dewpoint300hPa: Offset = Offset(),
    dewpoint275hPaOffset dewpoint275hPa: Offset = Offset(),
    dewpoint250hPaOffset dewpoint250hPa: Offset = Offset(),
    dewpoint225hPaOffset dewpoint225hPa: Offset = Offset(),
    dewpoint200hPaOffset dewpoint200hPa: Offset = Offset(),
    dewpoint175hPaOffset dewpoint175hPa: Offset = Offset(),
    dewpoint150hPaOffset dewpoint150hPa: Offset = Offset(),
    dewpoint125hPaOffset dewpoint125hPa: Offset = Offset(),
    dewpoint100hPaOffset dewpoint100hPa: Offset = Offset(),
    dewpoint70hPaOffset dewpoint70hPa: Offset = Offset(),
    dewpoint50hPaOffset dewpoint50hPa: Offset = Offset(),
    dewpoint40hPaOffset dewpoint40hPa: Offset = Offset(),
    dewpoint30hPaOffset dewpoint30hPa: Offset = Offset(),
    dewpoint20hPaOffset dewpoint20hPa: Offset = Offset(),
    dewpoint15hPaOffset dewpoint15hPa: Offset = Offset(),
    dewpoint10hPaOffset dewpoint10hPa: Offset = Offset(),
    relativehumidity1015hPaOffset relativehumidity1015hPa: Offset = Offset(),
    relativehumidity1000hPaOffset relativehumidity1000hPa: Offset = Offset(),
    relativehumidity985hPaOffset relativehumidity985hPa: Offset = Offset(),
    relativehumidity975hPaOffset relativehumidity975hPa: Offset = Offset(),
    relativehumidity970hPaOffset relativehumidity970hPa: Offset = Offset(),
    relativehumidity950hPaOffset relativehumidity950hPa: Offset = Offset(),
    relativehumidity925hPaOffset relativehumidity925hPa: Offset = Offset(),
    relativehumidity900hPaOffset relativehumidity900hPa: Offset = Offset(),
    relativehumidity875hPaOffset relativehumidity875hPa: Offset = Offset(),
    relativehumidity850hPaOffset relativehumidity850hPa: Offset = Offset(),
    relativehumidity800hPaOffset relativehumidity800hPa: Offset = Offset(),
    relativehumidity750hPaOffset relativehumidity750hPa: Offset = Offset(),
    relativehumidity700hPaOffset relativehumidity700hPa: Offset = Offset(),
    relativehumidity650hPaOffset relativehumidity650hPa: Offset = Offset(),
    relativehumidity600hPaOffset relativehumidity600hPa: Offset = Offset(),
    relativehumidity550hPaOffset relativehumidity550hPa: Offset = Offset(),
    relativehumidity500hPaOffset relativehumidity500hPa: Offset = Offset(),
    relativehumidity450hPaOffset relativehumidity450hPa: Offset = Offset(),
    relativehumidity400hPaOffset relativehumidity400hPa: Offset = Offset(),
    relativehumidity350hPaOffset relativehumidity350hPa: Offset = Offset(),
    relativehumidity300hPaOffset relativehumidity300hPa: Offset = Offset(),
    relativehumidity275hPaOffset relativehumidity275hPa: Offset = Offset(),
    relativehumidity250hPaOffset relativehumidity250hPa: Offset = Offset(),
    relativehumidity225hPaOffset relativehumidity225hPa: Offset = Offset(),
    relativehumidity200hPaOffset relativehumidity200hPa: Offset = Offset(),
    relativehumidity175hPaOffset relativehumidity175hPa: Offset = Offset(),
    relativehumidity150hPaOffset relativehumidity150hPa: Offset = Offset(),
    relativehumidity125hPaOffset relativehumidity125hPa: Offset = Offset(),
    relativehumidity100hPaOffset relativehumidity100hPa: Offset = Offset(),
    relativehumidity70hPaOffset relativehumidity70hPa: Offset = Offset(),
    relativehumidity50hPaOffset relativehumidity50hPa: Offset = Offset(),
    relativehumidity40hPaOffset relativehumidity40hPa: Offset = Offset(),
    relativehumidity30hPaOffset relativehumidity30hPa: Offset = Offset(),
    relativehumidity20hPaOffset relativehumidity20hPa: Offset = Offset(),
    relativehumidity15hPaOffset relativehumidity15hPa: Offset = Offset(),
    relativehumidity10hPaOffset relativehumidity10hPa: Offset = Offset(),
    cloudcover1015hPaOffset cloudcover1015hPa: Offset = Offset(),
    cloudcover1000hPaOffset cloudcover1000hPa: Offset = Offset(),
    cloudcover985hPaOffset cloudcover985hPa: Offset = Offset(),
    cloudcover975hPaOffset cloudcover975hPa: Offset = Offset(),
    cloudcover970hPaOffset cloudcover970hPa: Offset = Offset(),
    cloudcover950hPaOffset cloudcover950hPa: Offset = Offset(),
    cloudcover925hPaOffset cloudcover925hPa: Offset = Offset(),
    cloudcover900hPaOffset cloudcover900hPa: Offset = Offset(),
    cloudcover875hPaOffset cloudcover875hPa: Offset = Offset(),
    cloudcover850hPaOffset cloudcover850hPa: Offset = Offset(),
    cloudcover800hPaOffset cloudcover800hPa: Offset = Offset(),
    cloudcover750hPaOffset cloudcover750hPa: Offset = Offset(),
    cloudcover700hPaOffset cloudcover700hPa: Offset = Offset(),
    cloudcover650hPaOffset cloudcover650hPa: Offset = Offset(),
    cloudcover600hPaOffset cloudcover600hPa: Offset = Offset(),
    cloudcover550hPaOffset cloudcover550hPa: Offset = Offset(),
    cloudcover500hPaOffset cloudcover500hPa: Offset = Offset(),
    cloudcover450hPaOffset cloudcover450hPa: Offset = Offset(),
    cloudcover400hPaOffset cloudcover400hPa: Offset = Offset(),
    cloudcover350hPaOffset cloudcover350hPa: Offset = Offset(),
    cloudcover300hPaOffset cloudcover300hPa: Offset = Offset(),
    cloudcover275hPaOffset cloudcover275hPa: Offset = Offset(),
    cloudcover250hPaOffset cloudcover250hPa: Offset = Offset(),
    cloudcover225hPaOffset cloudcover225hPa: Offset = Offset(),
    cloudcover200hPaOffset cloudcover200hPa: Offset = Offset(),
    cloudcover175hPaOffset cloudcover175hPa: Offset = Offset(),
    cloudcover150hPaOffset cloudcover150hPa: Offset = Offset(),
    cloudcover125hPaOffset cloudcover125hPa: Offset = Offset(),
    cloudcover100hPaOffset cloudcover100hPa: Offset = Offset(),
    cloudcover70hPaOffset cloudcover70hPa: Offset = Offset(),
    cloudcover50hPaOffset cloudcover50hPa: Offset = Offset(),
    cloudcover40hPaOffset cloudcover40hPa: Offset = Offset(),
    cloudcover30hPaOffset cloudcover30hPa: Offset = Offset(),
    cloudcover20hPaOffset cloudcover20hPa: Offset = Offset(),
    cloudcover15hPaOffset cloudcover15hPa: Offset = Offset(),
    cloudcover10hPaOffset cloudcover10hPa: Offset = Offset(),
    windspeed1015hPaOffset windspeed1015hPa: Offset = Offset(),
    windspeed1000hPaOffset windspeed1000hPa: Offset = Offset(),
    windspeed985hPaOffset windspeed985hPa: Offset = Offset(),
    windspeed975hPaOffset windspeed975hPa: Offset = Offset(),
    windspeed970hPaOffset windspeed970hPa: Offset = Offset(),
    windspeed950hPaOffset windspeed950hPa: Offset = Offset(),
    windspeed925hPaOffset windspeed925hPa: Offset = Offset(),
    windspeed900hPaOffset windspeed900hPa: Offset = Offset(),
    windspeed875hPaOffset windspeed875hPa: Offset = Offset(),
    windspeed850hPaOffset windspeed850hPa: Offset = Offset(),
    windspeed800hPaOffset windspeed800hPa: Offset = Offset(),
    windspeed750hPaOffset windspeed750hPa: Offset = Offset(),
    windspeed700hPaOffset windspeed700hPa: Offset = Offset(),
    windspeed650hPaOffset windspeed650hPa: Offset = Offset(),
    windspeed600hPaOffset windspeed600hPa: Offset = Offset(),
    windspeed550hPaOffset windspeed550hPa: Offset = Offset(),
    windspeed500hPaOffset windspeed500hPa: Offset = Offset(),
    windspeed450hPaOffset windspeed450hPa: Offset = Offset(),
    windspeed400hPaOffset windspeed400hPa: Offset = Offset(),
    windspeed350hPaOffset windspeed350hPa: Offset = Offset(),
    windspeed300hPaOffset windspeed300hPa: Offset = Offset(),
    windspeed275hPaOffset windspeed275hPa: Offset = Offset(),
    windspeed250hPaOffset windspeed250hPa: Offset = Offset(),
    windspeed225hPaOffset windspeed225hPa: Offset = Offset(),
    windspeed200hPaOffset windspeed200hPa: Offset = Offset(),
    windspeed175hPaOffset windspeed175hPa: Offset = Offset(),
    windspeed150hPaOffset windspeed150hPa: Offset = Offset(),
    windspeed125hPaOffset windspeed125hPa: Offset = Offset(),
    windspeed100hPaOffset windspeed100hPa: Offset = Offset(),
    windspeed70hPaOffset windspeed70hPa: Offset = Offset(),
    windspeed50hPaOffset windspeed50hPa: Offset = Offset(),
    windspeed40hPaOffset windspeed40hPa: Offset = Offset(),
    windspeed30hPaOffset windspeed30hPa: Offset = Offset(),
    windspeed20hPaOffset windspeed20hPa: Offset = Offset(),
    windspeed15hPaOffset windspeed15hPa: Offset = Offset(),
    windspeed10hPaOffset windspeed10hPa: Offset = Offset(),
    winddirection1015hPaOffset winddirection1015hPa: Offset = Offset(),
    winddirection1000hPaOffset winddirection1000hPa: Offset = Offset(),
    winddirection985hPaOffset winddirection985hPa: Offset = Offset(),
    winddirection975hPaOffset winddirection975hPa: Offset = Offset(),
    winddirection970hPaOffset winddirection970hPa: Offset = Offset(),
    winddirection950hPaOffset winddirection950hPa: Offset = Offset(),
    winddirection925hPaOffset winddirection925hPa: Offset = Offset(),
    winddirection900hPaOffset winddirection900hPa: Offset = Offset(),
    winddirection875hPaOffset winddirection875hPa: Offset = Offset(),
    winddirection850hPaOffset winddirection850hPa: Offset = Offset(),
    winddirection800hPaOffset winddirection800hPa: Offset = Offset(),
    winddirection750hPaOffset winddirection750hPa: Offset = Offset(),
    winddirection700hPaOffset winddirection700hPa: Offset = Offset(),
    winddirection650hPaOffset winddirection650hPa: Offset = Offset(),
    winddirection600hPaOffset winddirection600hPa: Offset = Offset(),
    winddirection550hPaOffset winddirection550hPa: Offset = Offset(),
    winddirection500hPaOffset winddirection500hPa: Offset = Offset(),
    winddirection450hPaOffset winddirection450hPa: Offset = Offset(),
    winddirection400hPaOffset winddirection400hPa: Offset = Offset(),
    winddirection350hPaOffset winddirection350hPa: Offset = Offset(),
    winddirection300hPaOffset winddirection300hPa: Offset = Offset(),
    winddirection275hPaOffset winddirection275hPa: Offset = Offset(),
    winddirection250hPaOffset winddirection250hPa: Offset = Offset(),
    winddirection225hPaOffset winddirection225hPa: Offset = Offset(),
    winddirection200hPaOffset winddirection200hPa: Offset = Offset(),
    winddirection175hPaOffset winddirection175hPa: Offset = Offset(),
    winddirection150hPaOffset winddirection150hPa: Offset = Offset(),
    winddirection125hPaOffset winddirection125hPa: Offset = Offset(),
    winddirection100hPaOffset winddirection100hPa: Offset = Offset(),
    winddirection70hPaOffset winddirection70hPa: Offset = Offset(),
    winddirection50hPaOffset winddirection50hPa: Offset = Offset(),
    winddirection40hPaOffset winddirection40hPa: Offset = Offset(),
    winddirection30hPaOffset winddirection30hPa: Offset = Offset(),
    winddirection20hPaOffset winddirection20hPa: Offset = Offset(),
    winddirection15hPaOffset winddirection15hPa: Offset = Offset(),
    winddirection10hPaOffset winddirection10hPa: Offset = Offset(),
    verticalVelocity1015hPaOffset verticalVelocity1015hPa: Offset = Offset(),
    verticalVelocity1000hPaOffset verticalVelocity1000hPa: Offset = Offset(),
    verticalVelocity985hPaOffset verticalVelocity985hPa: Offset = Offset(),
    verticalVelocity975hPaOffset verticalVelocity975hPa: Offset = Offset(),
    verticalVelocity970hPaOffset verticalVelocity970hPa: Offset = Offset(),
    verticalVelocity950hPaOffset verticalVelocity950hPa: Offset = Offset(),
    verticalVelocity925hPaOffset verticalVelocity925hPa: Offset = Offset(),
    verticalVelocity900hPaOffset verticalVelocity900hPa: Offset = Offset(),
    verticalVelocity875hPaOffset verticalVelocity875hPa: Offset = Offset(),
    verticalVelocity850hPaOffset verticalVelocity850hPa: Offset = Offset(),
    verticalVelocity800hPaOffset verticalVelocity800hPa: Offset = Offset(),
    verticalVelocity750hPaOffset verticalVelocity750hPa: Offset = Offset(),
    verticalVelocity700hPaOffset verticalVelocity700hPa: Offset = Offset(),
    verticalVelocity650hPaOffset verticalVelocity650hPa: Offset = Offset(),
    verticalVelocity600hPaOffset verticalVelocity600hPa: Offset = Offset(),
    verticalVelocity550hPaOffset verticalVelocity550hPa: Offset = Offset(),
    verticalVelocity500hPaOffset verticalVelocity500hPa: Offset = Offset(),
    verticalVelocity450hPaOffset verticalVelocity450hPa: Offset = Offset(),
    verticalVelocity400hPaOffset verticalVelocity400hPa: Offset = Offset(),
    verticalVelocity350hPaOffset verticalVelocity350hPa: Offset = Offset(),
    verticalVelocity300hPaOffset verticalVelocity300hPa: Offset = Offset(),
    verticalVelocity275hPaOffset verticalVelocity275hPa: Offset = Offset(),
    verticalVelocity250hPaOffset verticalVelocity250hPa: Offset = Offset(),
    verticalVelocity225hPaOffset verticalVelocity225hPa: Offset = Offset(),
    verticalVelocity200hPaOffset verticalVelocity200hPa: Offset = Offset(),
    verticalVelocity175hPaOffset verticalVelocity175hPa: Offset = Offset(),
    verticalVelocity150hPaOffset verticalVelocity150hPa: Offset = Offset(),
    verticalVelocity125hPaOffset verticalVelocity125hPa: Offset = Offset(),
    verticalVelocity100hPaOffset verticalVelocity100hPa: Offset = Offset(),
    verticalVelocity70hPaOffset verticalVelocity70hPa: Offset = Offset(),
    verticalVelocity50hPaOffset verticalVelocity50hPa: Offset = Offset(),
    verticalVelocity40hPaOffset verticalVelocity40hPa: Offset = Offset(),
    verticalVelocity30hPaOffset verticalVelocity30hPa: Offset = Offset(),
    verticalVelocity20hPaOffset verticalVelocity20hPa: Offset = Offset(),
    verticalVelocity15hPaOffset verticalVelocity15hPa: Offset = Offset(),
    verticalVelocity10hPaOffset verticalVelocity10hPa: Offset = Offset(),
    geopotentialHeight1015hPaOffset geopotentialHeight1015hPa: Offset = Offset(),
    geopotentialHeight1000hPaOffset geopotentialHeight1000hPa: Offset = Offset(),
    geopotentialHeight985hPaOffset geopotentialHeight985hPa: Offset = Offset(),
    geopotentialHeight975hPaOffset geopotentialHeight975hPa: Offset = Offset(),
    geopotentialHeight970hPaOffset geopotentialHeight970hPa: Offset = Offset(),
    geopotentialHeight950hPaOffset geopotentialHeight950hPa: Offset = Offset(),
    geopotentialHeight925hPaOffset geopotentialHeight925hPa: Offset = Offset(),
    geopotentialHeight900hPaOffset geopotentialHeight900hPa: Offset = Offset(),
    geopotentialHeight875hPaOffset geopotentialHeight875hPa: Offset = Offset(),
    geopotentialHeight850hPaOffset geopotentialHeight850hPa: Offset = Offset(),
    geopotentialHeight800hPaOffset geopotentialHeight800hPa: Offset = Offset(),
    geopotentialHeight750hPaOffset geopotentialHeight750hPa: Offset = Offset(),
    geopotentialHeight700hPaOffset geopotentialHeight700hPa: Offset = Offset(),
    geopotentialHeight650hPaOffset geopotentialHeight650hPa: Offset = Offset(),
    geopotentialHeight600hPaOffset geopotentialHeight600hPa: Offset = Offset(),
    geopotentialHeight550hPaOffset geopotentialHeight550hPa: Offset = Offset(),
    geopotentialHeight500hPaOffset geopotentialHeight500hPa: Offset = Offset(),
    geopotentialHeight450hPaOffset geopotentialHeight450hPa: Offset = Offset(),
    geopotentialHeight400hPaOffset geopotentialHeight400hPa: Offset = Offset(),
    geopotentialHeight350hPaOffset geopotentialHeight350hPa: Offset = Offset(),
    geopotentialHeight300hPaOffset geopotentialHeight300hPa: Offset = Offset(),
    geopotentialHeight275hPaOffset geopotentialHeight275hPa: Offset = Offset(),
    geopotentialHeight250hPaOffset geopotentialHeight250hPa: Offset = Offset(),
    geopotentialHeight225hPaOffset geopotentialHeight225hPa: Offset = Offset(),
    geopotentialHeight200hPaOffset geopotentialHeight200hPa: Offset = Offset(),
    geopotentialHeight175hPaOffset geopotentialHeight175hPa: Offset = Offset(),
    geopotentialHeight150hPaOffset geopotentialHeight150hPa: Offset = Offset(),
    geopotentialHeight125hPaOffset geopotentialHeight125hPa: Offset = Offset(),
    geopotentialHeight100hPaOffset geopotentialHeight100hPa: Offset = Offset(),
    geopotentialHeight70hPaOffset geopotentialHeight70hPa: Offset = Offset(),
    geopotentialHeight50hPaOffset geopotentialHeight50hPa: Offset = Offset(),
    geopotentialHeight40hPaOffset geopotentialHeight40hPa: Offset = Offset(),
    geopotentialHeight30hPaOffset geopotentialHeight30hPa: Offset = Offset(),
    geopotentialHeight20hPaOffset geopotentialHeight20hPa: Offset = Offset(),
    geopotentialHeight15hPaOffset geopotentialHeight15hPa: Offset = Offset(),
    geopotentialHeight10hPaOffset geopotentialHeight10hPa: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_WeatherHourly.startWeatherHourly(&fbb)
    com_openmeteo_WeatherHourly.add(time: time, &fbb)
    com_openmeteo_WeatherHourly.add(temperature2m: temperature2m, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover: cloudcover, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcoverLow: cloudcoverLow, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcoverMid: cloudcoverMid, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcoverHigh: cloudcoverHigh, &fbb)
    com_openmeteo_WeatherHourly.add(pressureMsl: pressureMsl, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity2m: relativehumidity2m, &fbb)
    com_openmeteo_WeatherHourly.add(precipitation: precipitation, &fbb)
    com_openmeteo_WeatherHourly.add(precipitationProbability: precipitationProbability, &fbb)
    com_openmeteo_WeatherHourly.add(weathercode: weathercode, &fbb)
    com_openmeteo_WeatherHourly.add(temperature80m: temperature80m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature120m: temperature120m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature180m: temperature180m, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature0cm: soilTemperature0cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature6cm: soilTemperature6cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature18cm: soilTemperature18cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature54cm: soilTemperature54cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture01cm: soilMoisture01cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture13cm: soilMoisture13cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture39cm: soilMoisture39cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture927cm: soilMoisture927cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture2781cm: soilMoisture2781cm, &fbb)
    com_openmeteo_WeatherHourly.add(snowDepth: snowDepth, &fbb)
    com_openmeteo_WeatherHourly.add(snowHeight: snowHeight, &fbb)
    com_openmeteo_WeatherHourly.add(sensibleHeatflux: sensibleHeatflux, &fbb)
    com_openmeteo_WeatherHourly.add(latentHeatflux: latentHeatflux, &fbb)
    com_openmeteo_WeatherHourly.add(showers: showers, &fbb)
    com_openmeteo_WeatherHourly.add(rain: rain, &fbb)
    com_openmeteo_WeatherHourly.add(windgusts10m: windgusts10m, &fbb)
    com_openmeteo_WeatherHourly.add(freezinglevelHeight: freezinglevelHeight, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint2m: dewpoint2m, &fbb)
    com_openmeteo_WeatherHourly.add(diffuseRadiation: diffuseRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(directRadiation: directRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(apparentTemperature: apparentTemperature, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed10m: windspeed10m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection10m: winddirection10m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed80m: windspeed80m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection80m: winddirection80m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed120m: windspeed120m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection120m: winddirection120m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed180m: windspeed180m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection180m: winddirection180m, &fbb)
    com_openmeteo_WeatherHourly.add(directNormalIrradiance: directNormalIrradiance, &fbb)
    com_openmeteo_WeatherHourly.add(evapotranspiration: evapotranspiration, &fbb)
    com_openmeteo_WeatherHourly.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_WeatherHourly.add(vaporPressureDeficit: vaporPressureDeficit, &fbb)
    com_openmeteo_WeatherHourly.add(shortwaveRadiation: shortwaveRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(snowfall: snowfall, &fbb)
    com_openmeteo_WeatherHourly.add(surfacePressure: surfacePressure, &fbb)
    com_openmeteo_WeatherHourly.add(terrestrialRadiation: terrestrialRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(terrestrialRadiationInstant: terrestrialRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(shortwaveRadiationInstant: shortwaveRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(diffuseRadiationInstant: diffuseRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(directRadiationInstant: directRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(directNormalIrradianceInstant: directNormalIrradianceInstant, &fbb)
    com_openmeteo_WeatherHourly.add(visibility: visibility, &fbb)
    com_openmeteo_WeatherHourly.add(cape: cape, &fbb)
    com_openmeteo_WeatherHourly.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_WeatherHourly.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_WeatherHourly.add(isDay: isDay, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature0To10cm: soilTemperature0To10cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature10To40cm: soilTemperature10To40cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature40To100cm: soilTemperature40To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature100To200cm: soilTemperature100To200cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture0To10cm: soilMoisture0To10cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture10To40cm: soilMoisture10To40cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture40To100cm: soilMoisture40To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture100To200cm: soilMoisture100To200cm, &fbb)
    com_openmeteo_WeatherHourly.add(growingDegreeDaysBase0Limit50: growingDegreeDaysBase0Limit50, &fbb)
    com_openmeteo_WeatherHourly.add(leafWetnessProbability: leafWetnessProbability, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex0To7cm: soilMoistureIndex0To7cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex7To28cm: soilMoistureIndex7To28cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex28To100cm: soilMoistureIndex28To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex100To255cm: soilMoistureIndex100To255cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex0To100cm: soilMoistureIndex0To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(lightningPotential: lightningPotential, &fbb)
    com_openmeteo_WeatherHourly.add(temperature1015hPa: temperature1015hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature1000hPa: temperature1000hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature985hPa: temperature985hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature975hPa: temperature975hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature970hPa: temperature970hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature950hPa: temperature950hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature925hPa: temperature925hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature900hPa: temperature900hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature875hPa: temperature875hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature850hPa: temperature850hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature800hPa: temperature800hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature750hPa: temperature750hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature700hPa: temperature700hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature650hPa: temperature650hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature600hPa: temperature600hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature550hPa: temperature550hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature500hPa: temperature500hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature450hPa: temperature450hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature400hPa: temperature400hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature350hPa: temperature350hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature300hPa: temperature300hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature275hPa: temperature275hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature250hPa: temperature250hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature225hPa: temperature225hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature200hPa: temperature200hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature175hPa: temperature175hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature150hPa: temperature150hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature125hPa: temperature125hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature100hPa: temperature100hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature70hPa: temperature70hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature50hPa: temperature50hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature40hPa: temperature40hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature30hPa: temperature30hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature20hPa: temperature20hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature15hPa: temperature15hPa, &fbb)
    com_openmeteo_WeatherHourly.add(temperature10hPa: temperature10hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint1015hPa: dewpoint1015hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint1000hPa: dewpoint1000hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint985hPa: dewpoint985hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint975hPa: dewpoint975hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint970hPa: dewpoint970hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint950hPa: dewpoint950hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint925hPa: dewpoint925hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint900hPa: dewpoint900hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint875hPa: dewpoint875hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint850hPa: dewpoint850hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint800hPa: dewpoint800hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint750hPa: dewpoint750hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint700hPa: dewpoint700hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint650hPa: dewpoint650hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint600hPa: dewpoint600hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint550hPa: dewpoint550hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint500hPa: dewpoint500hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint450hPa: dewpoint450hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint400hPa: dewpoint400hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint350hPa: dewpoint350hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint300hPa: dewpoint300hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint275hPa: dewpoint275hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint250hPa: dewpoint250hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint225hPa: dewpoint225hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint200hPa: dewpoint200hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint175hPa: dewpoint175hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint150hPa: dewpoint150hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint125hPa: dewpoint125hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint100hPa: dewpoint100hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint70hPa: dewpoint70hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint50hPa: dewpoint50hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint40hPa: dewpoint40hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint30hPa: dewpoint30hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint20hPa: dewpoint20hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint15hPa: dewpoint15hPa, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint10hPa: dewpoint10hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity1015hPa: relativehumidity1015hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity1000hPa: relativehumidity1000hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity985hPa: relativehumidity985hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity975hPa: relativehumidity975hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity970hPa: relativehumidity970hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity950hPa: relativehumidity950hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity925hPa: relativehumidity925hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity900hPa: relativehumidity900hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity875hPa: relativehumidity875hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity850hPa: relativehumidity850hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity800hPa: relativehumidity800hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity750hPa: relativehumidity750hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity700hPa: relativehumidity700hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity650hPa: relativehumidity650hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity600hPa: relativehumidity600hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity550hPa: relativehumidity550hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity500hPa: relativehumidity500hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity450hPa: relativehumidity450hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity400hPa: relativehumidity400hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity350hPa: relativehumidity350hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity300hPa: relativehumidity300hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity275hPa: relativehumidity275hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity250hPa: relativehumidity250hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity225hPa: relativehumidity225hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity200hPa: relativehumidity200hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity175hPa: relativehumidity175hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity150hPa: relativehumidity150hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity125hPa: relativehumidity125hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity100hPa: relativehumidity100hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity70hPa: relativehumidity70hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity50hPa: relativehumidity50hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity40hPa: relativehumidity40hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity30hPa: relativehumidity30hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity20hPa: relativehumidity20hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity15hPa: relativehumidity15hPa, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity10hPa: relativehumidity10hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover1015hPa: cloudcover1015hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover1000hPa: cloudcover1000hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover985hPa: cloudcover985hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover975hPa: cloudcover975hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover970hPa: cloudcover970hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover950hPa: cloudcover950hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover925hPa: cloudcover925hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover900hPa: cloudcover900hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover875hPa: cloudcover875hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover850hPa: cloudcover850hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover800hPa: cloudcover800hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover750hPa: cloudcover750hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover700hPa: cloudcover700hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover650hPa: cloudcover650hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover600hPa: cloudcover600hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover550hPa: cloudcover550hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover500hPa: cloudcover500hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover450hPa: cloudcover450hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover400hPa: cloudcover400hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover350hPa: cloudcover350hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover300hPa: cloudcover300hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover275hPa: cloudcover275hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover250hPa: cloudcover250hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover225hPa: cloudcover225hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover200hPa: cloudcover200hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover175hPa: cloudcover175hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover150hPa: cloudcover150hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover125hPa: cloudcover125hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover100hPa: cloudcover100hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover70hPa: cloudcover70hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover50hPa: cloudcover50hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover40hPa: cloudcover40hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover30hPa: cloudcover30hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover20hPa: cloudcover20hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover15hPa: cloudcover15hPa, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover10hPa: cloudcover10hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed1015hPa: windspeed1015hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed1000hPa: windspeed1000hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed985hPa: windspeed985hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed975hPa: windspeed975hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed970hPa: windspeed970hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed950hPa: windspeed950hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed925hPa: windspeed925hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed900hPa: windspeed900hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed875hPa: windspeed875hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed850hPa: windspeed850hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed800hPa: windspeed800hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed750hPa: windspeed750hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed700hPa: windspeed700hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed650hPa: windspeed650hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed600hPa: windspeed600hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed550hPa: windspeed550hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed500hPa: windspeed500hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed450hPa: windspeed450hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed400hPa: windspeed400hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed350hPa: windspeed350hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed300hPa: windspeed300hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed275hPa: windspeed275hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed250hPa: windspeed250hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed225hPa: windspeed225hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed200hPa: windspeed200hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed175hPa: windspeed175hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed150hPa: windspeed150hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed125hPa: windspeed125hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed100hPa: windspeed100hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed70hPa: windspeed70hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed50hPa: windspeed50hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed40hPa: windspeed40hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed30hPa: windspeed30hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed20hPa: windspeed20hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed15hPa: windspeed15hPa, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed10hPa: windspeed10hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection1015hPa: winddirection1015hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection1000hPa: winddirection1000hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection985hPa: winddirection985hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection975hPa: winddirection975hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection970hPa: winddirection970hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection950hPa: winddirection950hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection925hPa: winddirection925hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection900hPa: winddirection900hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection875hPa: winddirection875hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection850hPa: winddirection850hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection800hPa: winddirection800hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection750hPa: winddirection750hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection700hPa: winddirection700hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection650hPa: winddirection650hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection600hPa: winddirection600hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection550hPa: winddirection550hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection500hPa: winddirection500hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection450hPa: winddirection450hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection400hPa: winddirection400hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection350hPa: winddirection350hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection300hPa: winddirection300hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection275hPa: winddirection275hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection250hPa: winddirection250hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection225hPa: winddirection225hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection200hPa: winddirection200hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection175hPa: winddirection175hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection150hPa: winddirection150hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection125hPa: winddirection125hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection100hPa: winddirection100hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection70hPa: winddirection70hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection50hPa: winddirection50hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection40hPa: winddirection40hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection30hPa: winddirection30hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection20hPa: winddirection20hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection15hPa: winddirection15hPa, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection10hPa: winddirection10hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity1015hPa: verticalVelocity1015hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity1000hPa: verticalVelocity1000hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity985hPa: verticalVelocity985hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity975hPa: verticalVelocity975hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity970hPa: verticalVelocity970hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity950hPa: verticalVelocity950hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity925hPa: verticalVelocity925hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity900hPa: verticalVelocity900hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity875hPa: verticalVelocity875hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity850hPa: verticalVelocity850hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity800hPa: verticalVelocity800hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity750hPa: verticalVelocity750hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity700hPa: verticalVelocity700hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity650hPa: verticalVelocity650hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity600hPa: verticalVelocity600hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity550hPa: verticalVelocity550hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity500hPa: verticalVelocity500hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity450hPa: verticalVelocity450hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity400hPa: verticalVelocity400hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity350hPa: verticalVelocity350hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity300hPa: verticalVelocity300hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity275hPa: verticalVelocity275hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity250hPa: verticalVelocity250hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity225hPa: verticalVelocity225hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity200hPa: verticalVelocity200hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity175hPa: verticalVelocity175hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity150hPa: verticalVelocity150hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity125hPa: verticalVelocity125hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity100hPa: verticalVelocity100hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity70hPa: verticalVelocity70hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity50hPa: verticalVelocity50hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity40hPa: verticalVelocity40hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity30hPa: verticalVelocity30hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity20hPa: verticalVelocity20hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity15hPa: verticalVelocity15hPa, &fbb)
    com_openmeteo_WeatherHourly.add(verticalVelocity10hPa: verticalVelocity10hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight1015hPa: geopotentialHeight1015hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight1000hPa: geopotentialHeight1000hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight985hPa: geopotentialHeight985hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight975hPa: geopotentialHeight975hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight970hPa: geopotentialHeight970hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight950hPa: geopotentialHeight950hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight925hPa: geopotentialHeight925hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight900hPa: geopotentialHeight900hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight875hPa: geopotentialHeight875hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight850hPa: geopotentialHeight850hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight800hPa: geopotentialHeight800hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight750hPa: geopotentialHeight750hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight700hPa: geopotentialHeight700hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight650hPa: geopotentialHeight650hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight600hPa: geopotentialHeight600hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight550hPa: geopotentialHeight550hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight500hPa: geopotentialHeight500hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight450hPa: geopotentialHeight450hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight400hPa: geopotentialHeight400hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight350hPa: geopotentialHeight350hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight300hPa: geopotentialHeight300hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight275hPa: geopotentialHeight275hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight250hPa: geopotentialHeight250hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight225hPa: geopotentialHeight225hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight200hPa: geopotentialHeight200hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight175hPa: geopotentialHeight175hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight150hPa: geopotentialHeight150hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight125hPa: geopotentialHeight125hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight100hPa: geopotentialHeight100hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight70hPa: geopotentialHeight70hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight50hPa: geopotentialHeight50hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight40hPa: geopotentialHeight40hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight30hPa: geopotentialHeight30hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight20hPa: geopotentialHeight20hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight15hPa: geopotentialHeight15hPa, &fbb)
    com_openmeteo_WeatherHourly.add(geopotentialHeight10hPa: geopotentialHeight10hPa, &fbb)
    return com_openmeteo_WeatherHourly.endWeatherHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.temperature2m.p, fieldName: "temperature2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover.p, fieldName: "cloudcover", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverLow.p, fieldName: "cloudcoverLow", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMid.p, fieldName: "cloudcoverMid", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverHigh.p, fieldName: "cloudcoverHigh", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMsl.p, fieldName: "pressureMsl", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity2m.p, fieldName: "relativehumidity2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitation.p, fieldName: "precipitation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbability.p, fieldName: "precipitationProbability", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature80m.p, fieldName: "temperature80m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature120m.p, fieldName: "temperature120m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature180m.p, fieldName: "temperature180m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0cm.p, fieldName: "soilTemperature0cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature6cm.p, fieldName: "soilTemperature6cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature18cm.p, fieldName: "soilTemperature18cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature54cm.p, fieldName: "soilTemperature54cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture01cm.p, fieldName: "soilMoisture01cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture13cm.p, fieldName: "soilMoisture13cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture39cm.p, fieldName: "soilMoisture39cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture927cm.p, fieldName: "soilMoisture927cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture2781cm.p, fieldName: "soilMoisture2781cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowDepth.p, fieldName: "snowDepth", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowHeight.p, fieldName: "snowHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sensibleHeatflux.p, fieldName: "sensibleHeatflux", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.latentHeatflux.p, fieldName: "latentHeatflux", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.showers.p, fieldName: "showers", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.rain.p, fieldName: "rain", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10m.p, fieldName: "windgusts10m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.freezinglevelHeight.p, fieldName: "freezinglevelHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint2m.p, fieldName: "dewpoint2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiation.p, fieldName: "diffuseRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directRadiation.p, fieldName: "directRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperature.p, fieldName: "apparentTemperature", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10m.p, fieldName: "windspeed10m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection10m.p, fieldName: "winddirection10m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed80m.p, fieldName: "windspeed80m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection80m.p, fieldName: "winddirection80m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed120m.p, fieldName: "windspeed120m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection120m.p, fieldName: "winddirection120m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed180m.p, fieldName: "windspeed180m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection180m.p, fieldName: "winddirection180m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradiance.p, fieldName: "directNormalIrradiance", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.evapotranspiration.p, fieldName: "evapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.vaporPressureDeficit.p, fieldName: "vaporPressureDeficit", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiation.p, fieldName: "shortwaveRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfall.p, fieldName: "snowfall", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressure.p, fieldName: "surfacePressure", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiation.p, fieldName: "terrestrialRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiationInstant.p, fieldName: "terrestrialRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationInstant.p, fieldName: "shortwaveRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiationInstant.p, fieldName: "diffuseRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directRadiationInstant.p, fieldName: "directRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradianceInstant.p, fieldName: "directNormalIrradianceInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibility.p, fieldName: "visibility", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cape.p, fieldName: "cape", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To10cm.p, fieldName: "soilTemperature0To10cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature10To40cm.p, fieldName: "soilTemperature10To40cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature40To100cm.p, fieldName: "soilTemperature40To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To200cm.p, fieldName: "soilTemperature100To200cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To10cm.p, fieldName: "soilMoisture0To10cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture10To40cm.p, fieldName: "soilMoisture10To40cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture40To100cm.p, fieldName: "soilMoisture40To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To200cm.p, fieldName: "soilMoisture100To200cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.growingDegreeDaysBase0Limit50.p, fieldName: "growingDegreeDaysBase0Limit50", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.leafWetnessProbability.p, fieldName: "leafWetnessProbability", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To7cm.p, fieldName: "soilMoistureIndex0To7cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex7To28cm.p, fieldName: "soilMoistureIndex7To28cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex28To100cm.p, fieldName: "soilMoistureIndex28To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex100To255cm.p, fieldName: "soilMoistureIndex100To255cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To100cm.p, fieldName: "soilMoistureIndex0To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.lightningPotential.p, fieldName: "lightningPotential", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature1015hPa.p, fieldName: "temperature1015hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature1000hPa.p, fieldName: "temperature1000hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature985hPa.p, fieldName: "temperature985hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature975hPa.p, fieldName: "temperature975hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature970hPa.p, fieldName: "temperature970hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature950hPa.p, fieldName: "temperature950hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature925hPa.p, fieldName: "temperature925hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature900hPa.p, fieldName: "temperature900hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature875hPa.p, fieldName: "temperature875hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature850hPa.p, fieldName: "temperature850hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature800hPa.p, fieldName: "temperature800hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature750hPa.p, fieldName: "temperature750hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature700hPa.p, fieldName: "temperature700hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature650hPa.p, fieldName: "temperature650hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature600hPa.p, fieldName: "temperature600hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature550hPa.p, fieldName: "temperature550hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature500hPa.p, fieldName: "temperature500hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature450hPa.p, fieldName: "temperature450hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature400hPa.p, fieldName: "temperature400hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature350hPa.p, fieldName: "temperature350hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature300hPa.p, fieldName: "temperature300hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature275hPa.p, fieldName: "temperature275hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature250hPa.p, fieldName: "temperature250hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature225hPa.p, fieldName: "temperature225hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature200hPa.p, fieldName: "temperature200hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature175hPa.p, fieldName: "temperature175hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature150hPa.p, fieldName: "temperature150hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature125hPa.p, fieldName: "temperature125hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature100hPa.p, fieldName: "temperature100hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature70hPa.p, fieldName: "temperature70hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature50hPa.p, fieldName: "temperature50hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature40hPa.p, fieldName: "temperature40hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature30hPa.p, fieldName: "temperature30hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature20hPa.p, fieldName: "temperature20hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature15hPa.p, fieldName: "temperature15hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature10hPa.p, fieldName: "temperature10hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint1015hPa.p, fieldName: "dewpoint1015hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint1000hPa.p, fieldName: "dewpoint1000hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint985hPa.p, fieldName: "dewpoint985hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint975hPa.p, fieldName: "dewpoint975hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint970hPa.p, fieldName: "dewpoint970hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint950hPa.p, fieldName: "dewpoint950hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint925hPa.p, fieldName: "dewpoint925hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint900hPa.p, fieldName: "dewpoint900hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint875hPa.p, fieldName: "dewpoint875hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint850hPa.p, fieldName: "dewpoint850hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint800hPa.p, fieldName: "dewpoint800hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint750hPa.p, fieldName: "dewpoint750hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint700hPa.p, fieldName: "dewpoint700hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint650hPa.p, fieldName: "dewpoint650hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint600hPa.p, fieldName: "dewpoint600hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint550hPa.p, fieldName: "dewpoint550hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint500hPa.p, fieldName: "dewpoint500hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint450hPa.p, fieldName: "dewpoint450hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint400hPa.p, fieldName: "dewpoint400hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint350hPa.p, fieldName: "dewpoint350hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint300hPa.p, fieldName: "dewpoint300hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint275hPa.p, fieldName: "dewpoint275hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint250hPa.p, fieldName: "dewpoint250hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint225hPa.p, fieldName: "dewpoint225hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint200hPa.p, fieldName: "dewpoint200hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint175hPa.p, fieldName: "dewpoint175hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint150hPa.p, fieldName: "dewpoint150hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint125hPa.p, fieldName: "dewpoint125hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint100hPa.p, fieldName: "dewpoint100hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint70hPa.p, fieldName: "dewpoint70hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint50hPa.p, fieldName: "dewpoint50hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint40hPa.p, fieldName: "dewpoint40hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint30hPa.p, fieldName: "dewpoint30hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint20hPa.p, fieldName: "dewpoint20hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint15hPa.p, fieldName: "dewpoint15hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint10hPa.p, fieldName: "dewpoint10hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity1015hPa.p, fieldName: "relativehumidity1015hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity1000hPa.p, fieldName: "relativehumidity1000hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity985hPa.p, fieldName: "relativehumidity985hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity975hPa.p, fieldName: "relativehumidity975hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity970hPa.p, fieldName: "relativehumidity970hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity950hPa.p, fieldName: "relativehumidity950hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity925hPa.p, fieldName: "relativehumidity925hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity900hPa.p, fieldName: "relativehumidity900hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity875hPa.p, fieldName: "relativehumidity875hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity850hPa.p, fieldName: "relativehumidity850hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity800hPa.p, fieldName: "relativehumidity800hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity750hPa.p, fieldName: "relativehumidity750hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity700hPa.p, fieldName: "relativehumidity700hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity650hPa.p, fieldName: "relativehumidity650hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity600hPa.p, fieldName: "relativehumidity600hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity550hPa.p, fieldName: "relativehumidity550hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity500hPa.p, fieldName: "relativehumidity500hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity450hPa.p, fieldName: "relativehumidity450hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity400hPa.p, fieldName: "relativehumidity400hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity350hPa.p, fieldName: "relativehumidity350hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity300hPa.p, fieldName: "relativehumidity300hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity275hPa.p, fieldName: "relativehumidity275hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity250hPa.p, fieldName: "relativehumidity250hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity225hPa.p, fieldName: "relativehumidity225hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity200hPa.p, fieldName: "relativehumidity200hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity175hPa.p, fieldName: "relativehumidity175hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity150hPa.p, fieldName: "relativehumidity150hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity125hPa.p, fieldName: "relativehumidity125hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity100hPa.p, fieldName: "relativehumidity100hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity70hPa.p, fieldName: "relativehumidity70hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity50hPa.p, fieldName: "relativehumidity50hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity40hPa.p, fieldName: "relativehumidity40hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity30hPa.p, fieldName: "relativehumidity30hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity20hPa.p, fieldName: "relativehumidity20hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity15hPa.p, fieldName: "relativehumidity15hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity10hPa.p, fieldName: "relativehumidity10hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover1015hPa.p, fieldName: "cloudcover1015hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover1000hPa.p, fieldName: "cloudcover1000hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover985hPa.p, fieldName: "cloudcover985hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover975hPa.p, fieldName: "cloudcover975hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover970hPa.p, fieldName: "cloudcover970hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover950hPa.p, fieldName: "cloudcover950hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover925hPa.p, fieldName: "cloudcover925hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover900hPa.p, fieldName: "cloudcover900hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover875hPa.p, fieldName: "cloudcover875hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover850hPa.p, fieldName: "cloudcover850hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover800hPa.p, fieldName: "cloudcover800hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover750hPa.p, fieldName: "cloudcover750hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover700hPa.p, fieldName: "cloudcover700hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover650hPa.p, fieldName: "cloudcover650hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover600hPa.p, fieldName: "cloudcover600hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover550hPa.p, fieldName: "cloudcover550hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover500hPa.p, fieldName: "cloudcover500hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover450hPa.p, fieldName: "cloudcover450hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover400hPa.p, fieldName: "cloudcover400hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover350hPa.p, fieldName: "cloudcover350hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover300hPa.p, fieldName: "cloudcover300hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover275hPa.p, fieldName: "cloudcover275hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover250hPa.p, fieldName: "cloudcover250hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover225hPa.p, fieldName: "cloudcover225hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover200hPa.p, fieldName: "cloudcover200hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover175hPa.p, fieldName: "cloudcover175hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover150hPa.p, fieldName: "cloudcover150hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover125hPa.p, fieldName: "cloudcover125hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover100hPa.p, fieldName: "cloudcover100hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover70hPa.p, fieldName: "cloudcover70hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover50hPa.p, fieldName: "cloudcover50hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover40hPa.p, fieldName: "cloudcover40hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover30hPa.p, fieldName: "cloudcover30hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover20hPa.p, fieldName: "cloudcover20hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover15hPa.p, fieldName: "cloudcover15hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover10hPa.p, fieldName: "cloudcover10hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed1015hPa.p, fieldName: "windspeed1015hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed1000hPa.p, fieldName: "windspeed1000hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed985hPa.p, fieldName: "windspeed985hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed975hPa.p, fieldName: "windspeed975hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed970hPa.p, fieldName: "windspeed970hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed950hPa.p, fieldName: "windspeed950hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed925hPa.p, fieldName: "windspeed925hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed900hPa.p, fieldName: "windspeed900hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed875hPa.p, fieldName: "windspeed875hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed850hPa.p, fieldName: "windspeed850hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed800hPa.p, fieldName: "windspeed800hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed750hPa.p, fieldName: "windspeed750hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed700hPa.p, fieldName: "windspeed700hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed650hPa.p, fieldName: "windspeed650hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed600hPa.p, fieldName: "windspeed600hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed550hPa.p, fieldName: "windspeed550hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed500hPa.p, fieldName: "windspeed500hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed450hPa.p, fieldName: "windspeed450hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed400hPa.p, fieldName: "windspeed400hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed350hPa.p, fieldName: "windspeed350hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed300hPa.p, fieldName: "windspeed300hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed275hPa.p, fieldName: "windspeed275hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed250hPa.p, fieldName: "windspeed250hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed225hPa.p, fieldName: "windspeed225hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed200hPa.p, fieldName: "windspeed200hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed175hPa.p, fieldName: "windspeed175hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed150hPa.p, fieldName: "windspeed150hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed125hPa.p, fieldName: "windspeed125hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed100hPa.p, fieldName: "windspeed100hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed70hPa.p, fieldName: "windspeed70hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed50hPa.p, fieldName: "windspeed50hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed40hPa.p, fieldName: "windspeed40hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed30hPa.p, fieldName: "windspeed30hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed20hPa.p, fieldName: "windspeed20hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed15hPa.p, fieldName: "windspeed15hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10hPa.p, fieldName: "windspeed10hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection1015hPa.p, fieldName: "winddirection1015hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection1000hPa.p, fieldName: "winddirection1000hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection985hPa.p, fieldName: "winddirection985hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection975hPa.p, fieldName: "winddirection975hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection970hPa.p, fieldName: "winddirection970hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection950hPa.p, fieldName: "winddirection950hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection925hPa.p, fieldName: "winddirection925hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection900hPa.p, fieldName: "winddirection900hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection875hPa.p, fieldName: "winddirection875hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection850hPa.p, fieldName: "winddirection850hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection800hPa.p, fieldName: "winddirection800hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection750hPa.p, fieldName: "winddirection750hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection700hPa.p, fieldName: "winddirection700hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection650hPa.p, fieldName: "winddirection650hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection600hPa.p, fieldName: "winddirection600hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection550hPa.p, fieldName: "winddirection550hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection500hPa.p, fieldName: "winddirection500hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection450hPa.p, fieldName: "winddirection450hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection400hPa.p, fieldName: "winddirection400hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection350hPa.p, fieldName: "winddirection350hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection300hPa.p, fieldName: "winddirection300hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection275hPa.p, fieldName: "winddirection275hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection250hPa.p, fieldName: "winddirection250hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection225hPa.p, fieldName: "winddirection225hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection200hPa.p, fieldName: "winddirection200hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection175hPa.p, fieldName: "winddirection175hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection150hPa.p, fieldName: "winddirection150hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection125hPa.p, fieldName: "winddirection125hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection100hPa.p, fieldName: "winddirection100hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection70hPa.p, fieldName: "winddirection70hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection50hPa.p, fieldName: "winddirection50hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection40hPa.p, fieldName: "winddirection40hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection30hPa.p, fieldName: "winddirection30hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection20hPa.p, fieldName: "winddirection20hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection15hPa.p, fieldName: "winddirection15hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection10hPa.p, fieldName: "winddirection10hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity1015hPa.p, fieldName: "verticalVelocity1015hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity1000hPa.p, fieldName: "verticalVelocity1000hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity985hPa.p, fieldName: "verticalVelocity985hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity975hPa.p, fieldName: "verticalVelocity975hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity970hPa.p, fieldName: "verticalVelocity970hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity950hPa.p, fieldName: "verticalVelocity950hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity925hPa.p, fieldName: "verticalVelocity925hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity900hPa.p, fieldName: "verticalVelocity900hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity875hPa.p, fieldName: "verticalVelocity875hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity850hPa.p, fieldName: "verticalVelocity850hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity800hPa.p, fieldName: "verticalVelocity800hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity750hPa.p, fieldName: "verticalVelocity750hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity700hPa.p, fieldName: "verticalVelocity700hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity650hPa.p, fieldName: "verticalVelocity650hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity600hPa.p, fieldName: "verticalVelocity600hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity550hPa.p, fieldName: "verticalVelocity550hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity500hPa.p, fieldName: "verticalVelocity500hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity450hPa.p, fieldName: "verticalVelocity450hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity400hPa.p, fieldName: "verticalVelocity400hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity350hPa.p, fieldName: "verticalVelocity350hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity300hPa.p, fieldName: "verticalVelocity300hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity275hPa.p, fieldName: "verticalVelocity275hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity250hPa.p, fieldName: "verticalVelocity250hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity225hPa.p, fieldName: "verticalVelocity225hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity200hPa.p, fieldName: "verticalVelocity200hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity175hPa.p, fieldName: "verticalVelocity175hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity150hPa.p, fieldName: "verticalVelocity150hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity125hPa.p, fieldName: "verticalVelocity125hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity100hPa.p, fieldName: "verticalVelocity100hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity70hPa.p, fieldName: "verticalVelocity70hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity50hPa.p, fieldName: "verticalVelocity50hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity40hPa.p, fieldName: "verticalVelocity40hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity30hPa.p, fieldName: "verticalVelocity30hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity20hPa.p, fieldName: "verticalVelocity20hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity15hPa.p, fieldName: "verticalVelocity15hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.verticalVelocity10hPa.p, fieldName: "verticalVelocity10hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight1015hPa.p, fieldName: "geopotentialHeight1015hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight1000hPa.p, fieldName: "geopotentialHeight1000hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight985hPa.p, fieldName: "geopotentialHeight985hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight975hPa.p, fieldName: "geopotentialHeight975hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight970hPa.p, fieldName: "geopotentialHeight970hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight950hPa.p, fieldName: "geopotentialHeight950hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight925hPa.p, fieldName: "geopotentialHeight925hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight900hPa.p, fieldName: "geopotentialHeight900hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight875hPa.p, fieldName: "geopotentialHeight875hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight850hPa.p, fieldName: "geopotentialHeight850hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight800hPa.p, fieldName: "geopotentialHeight800hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight750hPa.p, fieldName: "geopotentialHeight750hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight700hPa.p, fieldName: "geopotentialHeight700hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight650hPa.p, fieldName: "geopotentialHeight650hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight600hPa.p, fieldName: "geopotentialHeight600hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight550hPa.p, fieldName: "geopotentialHeight550hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight500hPa.p, fieldName: "geopotentialHeight500hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight450hPa.p, fieldName: "geopotentialHeight450hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight400hPa.p, fieldName: "geopotentialHeight400hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight350hPa.p, fieldName: "geopotentialHeight350hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight300hPa.p, fieldName: "geopotentialHeight300hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight275hPa.p, fieldName: "geopotentialHeight275hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight250hPa.p, fieldName: "geopotentialHeight250hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight225hPa.p, fieldName: "geopotentialHeight225hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight200hPa.p, fieldName: "geopotentialHeight200hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight175hPa.p, fieldName: "geopotentialHeight175hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight150hPa.p, fieldName: "geopotentialHeight150hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight125hPa.p, fieldName: "geopotentialHeight125hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight100hPa.p, fieldName: "geopotentialHeight100hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight70hPa.p, fieldName: "geopotentialHeight70hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight50hPa.p, fieldName: "geopotentialHeight50hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight40hPa.p, fieldName: "geopotentialHeight40hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight30hPa.p, fieldName: "geopotentialHeight30hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight20hPa.p, fieldName: "geopotentialHeight20hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight15hPa.p, fieldName: "geopotentialHeight15hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeight10hPa.p, fieldName: "geopotentialHeight10hPa", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_WeatherDaily: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case temperature2mMax = 6
    case temperature2mMin = 8
    case temperature2mMean = 10
    case apparentTemperatureMax = 12
    case apparentTemperatureMin = 14
    case apparentTemperatureMean = 16
    case precipitationSum = 18
    case precipitationProbabilityMax = 20
    case precipitationProbabilityMin = 22
    case precipitationProbabilityMean = 24
    case snowfallSum = 26
    case rainSum = 28
    case showersSum = 30
    case weathercode = 32
    case shortwaveRadiationSum = 34
    case windspeed10mMax = 36
    case windspeed10mMin = 38
    case windspeed10mMean = 40
    case windgusts10mMax = 42
    case windgusts10mMin = 44
    case windgusts10mMean = 46
    case winddirection10mDominant = 48
    case precipitationHours = 50
    case sunrise = 52
    case sunset = 54
    case et0FaoEvapotranspiration = 56
    case visibilityMax = 58
    case visibilityMin = 60
    case visibilityMean = 62
    case pressureMslMax = 64
    case pressureMslMin = 66
    case pressureMslMean = 68
    case surfacePressureMax = 70
    case surfacePressureMin = 72
    case surfacePressureMean = 74
    case capeMax = 76
    case capeMin = 78
    case capeMean = 80
    case cloudcoverMax = 82
    case cloudcoverMin = 84
    case cloudcoverMean = 86
    case uvIndexMax = 88
    case uvIndexClearSkyMax = 90
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature2mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfallSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfallSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var rainSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.rainSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var showersSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.showersSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var weathercode: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiationSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10mDominant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10mDominant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationHours: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationHours.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hasSunrise: Bool { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? false : true }
  public var sunriseCount: Int32 { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sunrise(at index: Int32) -> Int64 { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? 0 : _accessor.directRead(of: Int64.self, offset: _accessor.vector(at: o) + index * 8) }
  public var sunrise: [Int64] { return _accessor.getVector(at: VTOFFSET.sunrise.v) ?? [] }
  public var hasSunset: Bool { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? false : true }
  public var sunsetCount: Int32 { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sunset(at index: Int32) -> Int64 { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? 0 : _accessor.directRead(of: Int64.self, offset: _accessor.vector(at: o) + index * 8) }
  public var sunset: [Int64] { return _accessor.getVector(at: VTOFFSET.sunset.v) ?? [] }
  public var et0FaoEvapotranspiration: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSkyMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSkyMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherDaily(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 44) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(temperature2mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMax, at: VTOFFSET.temperature2mMax.p) }
  public static func add(temperature2mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMin, at: VTOFFSET.temperature2mMin.p) }
  public static func add(temperature2mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMean, at: VTOFFSET.temperature2mMean.p) }
  public static func add(apparentTemperatureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMax, at: VTOFFSET.apparentTemperatureMax.p) }
  public static func add(apparentTemperatureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMin, at: VTOFFSET.apparentTemperatureMin.p) }
  public static func add(apparentTemperatureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMean, at: VTOFFSET.apparentTemperatureMean.p) }
  public static func add(precipitationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationSum, at: VTOFFSET.precipitationSum.p) }
  public static func add(precipitationProbabilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMax, at: VTOFFSET.precipitationProbabilityMax.p) }
  public static func add(precipitationProbabilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMin, at: VTOFFSET.precipitationProbabilityMin.p) }
  public static func add(precipitationProbabilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMean, at: VTOFFSET.precipitationProbabilityMean.p) }
  public static func add(snowfallSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfallSum, at: VTOFFSET.snowfallSum.p) }
  public static func add(rainSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rainSum, at: VTOFFSET.rainSum.p) }
  public static func add(showersSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showersSum, at: VTOFFSET.showersSum.p) }
  public static func add(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func add(shortwaveRadiationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationSum, at: VTOFFSET.shortwaveRadiationSum.p) }
  public static func add(windspeed10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMax, at: VTOFFSET.windspeed10mMax.p) }
  public static func add(windspeed10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMin, at: VTOFFSET.windspeed10mMin.p) }
  public static func add(windspeed10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMean, at: VTOFFSET.windspeed10mMean.p) }
  public static func add(windgusts10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMax, at: VTOFFSET.windgusts10mMax.p) }
  public static func add(windgusts10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMin, at: VTOFFSET.windgusts10mMin.p) }
  public static func add(windgusts10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMean, at: VTOFFSET.windgusts10mMean.p) }
  public static func add(winddirection10mDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10mDominant, at: VTOFFSET.winddirection10mDominant.p) }
  public static func add(precipitationHours: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationHours, at: VTOFFSET.precipitationHours.p) }
  public static func addVectorOf(sunrise: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunrise, at: VTOFFSET.sunrise.p) }
  public static func addVectorOf(sunset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunset, at: VTOFFSET.sunset.p) }
  public static func add(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(visibilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMax, at: VTOFFSET.visibilityMax.p) }
  public static func add(visibilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMin, at: VTOFFSET.visibilityMin.p) }
  public static func add(visibilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMean, at: VTOFFSET.visibilityMean.p) }
  public static func add(pressureMslMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMax, at: VTOFFSET.pressureMslMax.p) }
  public static func add(pressureMslMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMin, at: VTOFFSET.pressureMslMin.p) }
  public static func add(pressureMslMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMean, at: VTOFFSET.pressureMslMean.p) }
  public static func add(surfacePressureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMax, at: VTOFFSET.surfacePressureMax.p) }
  public static func add(surfacePressureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMin, at: VTOFFSET.surfacePressureMin.p) }
  public static func add(surfacePressureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMean, at: VTOFFSET.surfacePressureMean.p) }
  public static func add(capeMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMax, at: VTOFFSET.capeMax.p) }
  public static func add(capeMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMin, at: VTOFFSET.capeMin.p) }
  public static func add(capeMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMean, at: VTOFFSET.capeMean.p) }
  public static func add(cloudcoverMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMax, at: VTOFFSET.cloudcoverMax.p) }
  public static func add(cloudcoverMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMin, at: VTOFFSET.cloudcoverMin.p) }
  public static func add(cloudcoverMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMean, at: VTOFFSET.cloudcoverMean.p) }
  public static func add(uvIndexMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexMax, at: VTOFFSET.uvIndexMax.p) }
  public static func add(uvIndexClearSkyMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSkyMax, at: VTOFFSET.uvIndexClearSkyMax.p) }
  public static func endWeatherDaily(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createWeatherDaily(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    temperature2mMaxOffset temperature2mMax: Offset = Offset(),
    temperature2mMinOffset temperature2mMin: Offset = Offset(),
    temperature2mMeanOffset temperature2mMean: Offset = Offset(),
    apparentTemperatureMaxOffset apparentTemperatureMax: Offset = Offset(),
    apparentTemperatureMinOffset apparentTemperatureMin: Offset = Offset(),
    apparentTemperatureMeanOffset apparentTemperatureMean: Offset = Offset(),
    precipitationSumOffset precipitationSum: Offset = Offset(),
    precipitationProbabilityMaxOffset precipitationProbabilityMax: Offset = Offset(),
    precipitationProbabilityMinOffset precipitationProbabilityMin: Offset = Offset(),
    precipitationProbabilityMeanOffset precipitationProbabilityMean: Offset = Offset(),
    snowfallSumOffset snowfallSum: Offset = Offset(),
    rainSumOffset rainSum: Offset = Offset(),
    showersSumOffset showersSum: Offset = Offset(),
    weathercodeOffset weathercode: Offset = Offset(),
    shortwaveRadiationSumOffset shortwaveRadiationSum: Offset = Offset(),
    windspeed10mMaxOffset windspeed10mMax: Offset = Offset(),
    windspeed10mMinOffset windspeed10mMin: Offset = Offset(),
    windspeed10mMeanOffset windspeed10mMean: Offset = Offset(),
    windgusts10mMaxOffset windgusts10mMax: Offset = Offset(),
    windgusts10mMinOffset windgusts10mMin: Offset = Offset(),
    windgusts10mMeanOffset windgusts10mMean: Offset = Offset(),
    winddirection10mDominantOffset winddirection10mDominant: Offset = Offset(),
    precipitationHoursOffset precipitationHours: Offset = Offset(),
    sunriseVectorOffset sunrise: Offset = Offset(),
    sunsetVectorOffset sunset: Offset = Offset(),
    et0FaoEvapotranspirationOffset et0FaoEvapotranspiration: Offset = Offset(),
    visibilityMaxOffset visibilityMax: Offset = Offset(),
    visibilityMinOffset visibilityMin: Offset = Offset(),
    visibilityMeanOffset visibilityMean: Offset = Offset(),
    pressureMslMaxOffset pressureMslMax: Offset = Offset(),
    pressureMslMinOffset pressureMslMin: Offset = Offset(),
    pressureMslMeanOffset pressureMslMean: Offset = Offset(),
    surfacePressureMaxOffset surfacePressureMax: Offset = Offset(),
    surfacePressureMinOffset surfacePressureMin: Offset = Offset(),
    surfacePressureMeanOffset surfacePressureMean: Offset = Offset(),
    capeMaxOffset capeMax: Offset = Offset(),
    capeMinOffset capeMin: Offset = Offset(),
    capeMeanOffset capeMean: Offset = Offset(),
    cloudcoverMaxOffset cloudcoverMax: Offset = Offset(),
    cloudcoverMinOffset cloudcoverMin: Offset = Offset(),
    cloudcoverMeanOffset cloudcoverMean: Offset = Offset(),
    uvIndexMaxOffset uvIndexMax: Offset = Offset(),
    uvIndexClearSkyMaxOffset uvIndexClearSkyMax: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_WeatherDaily.startWeatherDaily(&fbb)
    com_openmeteo_WeatherDaily.add(time: time, &fbb)
    com_openmeteo_WeatherDaily.add(temperature2mMax: temperature2mMax, &fbb)
    com_openmeteo_WeatherDaily.add(temperature2mMin: temperature2mMin, &fbb)
    com_openmeteo_WeatherDaily.add(temperature2mMean: temperature2mMean, &fbb)
    com_openmeteo_WeatherDaily.add(apparentTemperatureMax: apparentTemperatureMax, &fbb)
    com_openmeteo_WeatherDaily.add(apparentTemperatureMin: apparentTemperatureMin, &fbb)
    com_openmeteo_WeatherDaily.add(apparentTemperatureMean: apparentTemperatureMean, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationSum: precipitationSum, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationProbabilityMax: precipitationProbabilityMax, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationProbabilityMin: precipitationProbabilityMin, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationProbabilityMean: precipitationProbabilityMean, &fbb)
    com_openmeteo_WeatherDaily.add(snowfallSum: snowfallSum, &fbb)
    com_openmeteo_WeatherDaily.add(rainSum: rainSum, &fbb)
    com_openmeteo_WeatherDaily.add(showersSum: showersSum, &fbb)
    com_openmeteo_WeatherDaily.add(weathercode: weathercode, &fbb)
    com_openmeteo_WeatherDaily.add(shortwaveRadiationSum: shortwaveRadiationSum, &fbb)
    com_openmeteo_WeatherDaily.add(windspeed10mMax: windspeed10mMax, &fbb)
    com_openmeteo_WeatherDaily.add(windspeed10mMin: windspeed10mMin, &fbb)
    com_openmeteo_WeatherDaily.add(windspeed10mMean: windspeed10mMean, &fbb)
    com_openmeteo_WeatherDaily.add(windgusts10mMax: windgusts10mMax, &fbb)
    com_openmeteo_WeatherDaily.add(windgusts10mMin: windgusts10mMin, &fbb)
    com_openmeteo_WeatherDaily.add(windgusts10mMean: windgusts10mMean, &fbb)
    com_openmeteo_WeatherDaily.add(winddirection10mDominant: winddirection10mDominant, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationHours: precipitationHours, &fbb)
    com_openmeteo_WeatherDaily.addVectorOf(sunrise: sunrise, &fbb)
    com_openmeteo_WeatherDaily.addVectorOf(sunset: sunset, &fbb)
    com_openmeteo_WeatherDaily.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_WeatherDaily.add(visibilityMax: visibilityMax, &fbb)
    com_openmeteo_WeatherDaily.add(visibilityMin: visibilityMin, &fbb)
    com_openmeteo_WeatherDaily.add(visibilityMean: visibilityMean, &fbb)
    com_openmeteo_WeatherDaily.add(pressureMslMax: pressureMslMax, &fbb)
    com_openmeteo_WeatherDaily.add(pressureMslMin: pressureMslMin, &fbb)
    com_openmeteo_WeatherDaily.add(pressureMslMean: pressureMslMean, &fbb)
    com_openmeteo_WeatherDaily.add(surfacePressureMax: surfacePressureMax, &fbb)
    com_openmeteo_WeatherDaily.add(surfacePressureMin: surfacePressureMin, &fbb)
    com_openmeteo_WeatherDaily.add(surfacePressureMean: surfacePressureMean, &fbb)
    com_openmeteo_WeatherDaily.add(capeMax: capeMax, &fbb)
    com_openmeteo_WeatherDaily.add(capeMin: capeMin, &fbb)
    com_openmeteo_WeatherDaily.add(capeMean: capeMean, &fbb)
    com_openmeteo_WeatherDaily.add(cloudcoverMax: cloudcoverMax, &fbb)
    com_openmeteo_WeatherDaily.add(cloudcoverMin: cloudcoverMin, &fbb)
    com_openmeteo_WeatherDaily.add(cloudcoverMean: cloudcoverMean, &fbb)
    com_openmeteo_WeatherDaily.add(uvIndexMax: uvIndexMax, &fbb)
    com_openmeteo_WeatherDaily.add(uvIndexClearSkyMax: uvIndexClearSkyMax, &fbb)
    return com_openmeteo_WeatherDaily.endWeatherDaily(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.temperature2mMax.p, fieldName: "temperature2mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2mMin.p, fieldName: "temperature2mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2mMean.p, fieldName: "temperature2mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMax.p, fieldName: "apparentTemperatureMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMin.p, fieldName: "apparentTemperatureMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMean.p, fieldName: "apparentTemperatureMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationSum.p, fieldName: "precipitationSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMax.p, fieldName: "precipitationProbabilityMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMin.p, fieldName: "precipitationProbabilityMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMean.p, fieldName: "precipitationProbabilityMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfallSum.p, fieldName: "snowfallSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.rainSum.p, fieldName: "rainSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.showersSum.p, fieldName: "showersSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationSum.p, fieldName: "shortwaveRadiationSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMax.p, fieldName: "windspeed10mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMin.p, fieldName: "windspeed10mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMean.p, fieldName: "windspeed10mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMax.p, fieldName: "windgusts10mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMin.p, fieldName: "windgusts10mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMean.p, fieldName: "windgusts10mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection10mDominant.p, fieldName: "winddirection10mDominant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationHours.p, fieldName: "precipitationHours", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sunrise.p, fieldName: "sunrise", required: false, type: ForwardOffset<Vector<Int64, Int64>>.self)
    try _v.visit(field: VTOFFSET.sunset.p, fieldName: "sunset", required: false, type: ForwardOffset<Vector<Int64, Int64>>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMax.p, fieldName: "visibilityMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMin.p, fieldName: "visibilityMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMean.p, fieldName: "visibilityMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMax.p, fieldName: "pressureMslMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMin.p, fieldName: "pressureMslMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMean.p, fieldName: "pressureMslMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMax.p, fieldName: "surfacePressureMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMin.p, fieldName: "surfacePressureMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMean.p, fieldName: "surfacePressureMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMax.p, fieldName: "capeMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMin.p, fieldName: "capeMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMean.p, fieldName: "capeMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMax.p, fieldName: "cloudcoverMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMin.p, fieldName: "cloudcoverMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMean.p, fieldName: "cloudcoverMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexMax.p, fieldName: "uvIndexMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSkyMax.p, fieldName: "uvIndexClearSkyMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_WeatherApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case ensembleMember = 12
    case generationtimeMs = 14
    case utcOffsetSeconds = 16
    case timezone = 18
    case timezoneAbbreviation = 20
    case currentWeather = 22
    case daily = 24
    case hourly = 26
    case sixHourly = 28
    case minutely15 = 30
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: com_openmeteo_WeatherModel { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? .undefined : com_openmeteo_WeatherModel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var ensembleMember: Int8 { let o = _accessor.offset(VTOFFSET.ensembleMember.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int8.self, at: o) }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var currentWeather: com_openmeteo_CurrentWeather? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_CurrentWeather.self, at: o) }
  public var mutableCurrentWeather: com_openmeteo_CurrentWeather_Mutable? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : com_openmeteo_CurrentWeather_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var daily: com_openmeteo_WeatherDaily? { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? nil : com_openmeteo_WeatherDaily(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hourly: com_openmeteo_WeatherHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sixHourly: com_openmeteo_WeatherHourly? { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? nil : com_openmeteo_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var minutely15: com_openmeteo_WeatherHourly? { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? nil : com_openmeteo_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 14) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: com_openmeteo_WeatherModel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: model.rawValue, def: 0, at: VTOFFSET.model.p) }
  public static func add(ensembleMember: Int8, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ensembleMember, def: 0, at: VTOFFSET.ensembleMember.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(currentWeather: com_openmeteo_CurrentWeather?, _ fbb: inout FlatBufferBuilder) { guard let currentWeather = currentWeather else { return }; fbb.create(struct: currentWeather, position: VTOFFSET.currentWeather.p) }
  public static func add(daily: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: daily, at: VTOFFSET.daily.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func add(sixHourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sixHourly, at: VTOFFSET.sixHourly.p) }
  public static func add(minutely15: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: minutely15, at: VTOFFSET.minutely15.p) }
  public static func endWeatherApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    model: com_openmeteo_WeatherModel = .undefined,
    ensembleMember: Int8 = 0,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    currentWeather: com_openmeteo_CurrentWeather? = nil,
    dailyOffset daily: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset(),
    sixHourlyOffset sixHourly: Offset = Offset(),
    minutely15Offset minutely15: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_WeatherApi.startWeatherApi(&fbb)
    com_openmeteo_WeatherApi.add(latitude: latitude, &fbb)
    com_openmeteo_WeatherApi.add(longitude: longitude, &fbb)
    com_openmeteo_WeatherApi.add(elevation: elevation, &fbb)
    com_openmeteo_WeatherApi.add(model: model, &fbb)
    com_openmeteo_WeatherApi.add(ensembleMember: ensembleMember, &fbb)
    com_openmeteo_WeatherApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_WeatherApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_WeatherApi.add(timezone: timezone, &fbb)
    com_openmeteo_WeatherApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_WeatherApi.add(currentWeather: currentWeather, &fbb)
    com_openmeteo_WeatherApi.add(daily: daily, &fbb)
    com_openmeteo_WeatherApi.add(hourly: hourly, &fbb)
    com_openmeteo_WeatherApi.add(sixHourly: sixHourly, &fbb)
    com_openmeteo_WeatherApi.add(minutely15: minutely15, &fbb)
    return com_openmeteo_WeatherApi.endWeatherApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: com_openmeteo_WeatherModel.self)
    try _v.visit(field: VTOFFSET.ensembleMember.p, fieldName: "ensembleMember", required: false, type: Int8.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentWeather.p, fieldName: "currentWeather", required: false, type: com_openmeteo_CurrentWeather.self)
    try _v.visit(field: VTOFFSET.daily.p, fieldName: "daily", required: false, type: ForwardOffset<com_openmeteo_WeatherDaily>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.sixHourly.p, fieldName: "sixHourly", required: false, type: ForwardOffset<com_openmeteo_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.minutely15.p, fieldName: "minutely15", required: false, type: ForwardOffset<com_openmeteo_WeatherHourly>.self)
    _v.finish()
  }
}

