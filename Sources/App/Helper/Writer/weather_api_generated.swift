// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum com_openmeteo_WeatherModel: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case undefined = 0
  case bestMatch = 1
  case gfsSeamless = 2
  case gfsGlobal = 3
  case gfsHrrr = 4
  case meteofranceSeamless = 5
  case meteofranceArpegeWorld = 6
  case meteofranceArpegeEurope = 7
  case meteofranceAromeFrance = 8
  case meteofranceAromeFranceHd = 9
  case jmaSeamless = 10
  case jmaMsm = 11
  case jmsGsm = 12
  case jmaGsm = 13
  case gemSeamless = 14
  case gemGlobal = 15
  case gemRegional = 16
  case gemHrdpsContinental = 17
  case iconSeamless = 18
  case iconGlobal = 19
  case iconEu = 20
  case iconD2 = 21
  case ecmwfIfs04 = 22
  case metnoNordic = 23
  case era5 = 24
  case cerra = 25
  case era5Land = 26
  case ecmwfIfs = 27
  case noaaCfs = 28

  public static var max: com_openmeteo_WeatherModel { return .noaaCfs }
  public static var min: com_openmeteo_WeatherModel { return .undefined }
}


public struct com_openmeteo_CurrentWeather: NativeStruct, Verifiable, FlatbuffersInitializable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }

  private var _time: Int64
  private var _temperature: Float32
  private var _weathercode: Float32
  private var _windspeed: Float32
  private var _winddirection: Float32
  private var _isDay: Float32
  private let padding0__: UInt32 = 0

  public init(_ bb: ByteBuffer, o: Int32) {
    let _accessor = Struct(bb: bb, position: o)
    _time = _accessor.readBuffer(of: Int64.self, at: 0)
    _temperature = _accessor.readBuffer(of: Float32.self, at: 8)
    _weathercode = _accessor.readBuffer(of: Float32.self, at: 12)
    _windspeed = _accessor.readBuffer(of: Float32.self, at: 16)
    _winddirection = _accessor.readBuffer(of: Float32.self, at: 20)
    _isDay = _accessor.readBuffer(of: Float32.self, at: 24)
  }

  public init(time: Int64, temperature: Float32, weathercode: Float32, windspeed: Float32, winddirection: Float32, isDay: Float32) {
    _time = time
    _temperature = temperature
    _weathercode = weathercode
    _windspeed = windspeed
    _winddirection = winddirection
    _isDay = isDay
  }

  public init() {
    _time = 0
    _temperature = 0.0
    _weathercode = 0.0
    _windspeed = 0.0
    _winddirection = 0.0
    _isDay = 0.0
  }

  public var time: Int64 { _time }
  public var temperature: Float32 { _temperature }
  public var weathercode: Float32 { _weathercode }
  public var windspeed: Float32 { _windspeed }
  public var winddirection: Float32 { _winddirection }
  public var isDay: Float32 { _isDay }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    try verifier.inBuffer(position: position, of: com_openmeteo_CurrentWeather.self)
  }
}

public struct com_openmeteo_CurrentWeather_Mutable: FlatBufferObject {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Struct

  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Struct(bb: bb, position: o) }

  public var time: Int64 { return _accessor.readBuffer(of: Int64.self, at: 0) }
  public var temperature: Float32 { return _accessor.readBuffer(of: Float32.self, at: 8) }
  public var weathercode: Float32 { return _accessor.readBuffer(of: Float32.self, at: 12) }
  public var windspeed: Float32 { return _accessor.readBuffer(of: Float32.self, at: 16) }
  public var winddirection: Float32 { return _accessor.readBuffer(of: Float32.self, at: 20) }
  public var isDay: Float32 { return _accessor.readBuffer(of: Float32.self, at: 24) }
}

public struct com_openmeteo_ValuesAndLevel: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case level = 4
    case values = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var level: Int32 { let o = _accessor.offset(VTOFFSET.level.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public static func startValuesAndLevel(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(level: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: level, def: 0, at: VTOFFSET.level.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endValuesAndLevel(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [6]); return end }
  public static func createValuesAndLevel(
    _ fbb: inout FlatBufferBuilder,
    level: Int32 = 0,
    valuesVectorOffset values: Offset
  ) -> Offset {
    let __start = com_openmeteo_ValuesAndLevel.startValuesAndLevel(&fbb)
    com_openmeteo_ValuesAndLevel.add(level: level, &fbb)
    com_openmeteo_ValuesAndLevel.addVectorOf(values: values, &fbb)
    return com_openmeteo_ValuesAndLevel.endValuesAndLevel(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.level.p, fieldName: "level", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: true, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_ValuesUnitPressureLevel: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case unit = 4
    case values = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var unit: com_openmeteo_SiUnit { let o = _accessor.offset(VTOFFSET.unit.v); return o == 0 ? .undefined : com_openmeteo_SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> com_openmeteo_ValuesAndLevel? { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? nil : com_openmeteo_ValuesAndLevel(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startValuesUnitPressureLevel(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(unit: com_openmeteo_SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unit.rawValue, def: 0, at: VTOFFSET.unit.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endValuesUnitPressureLevel(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createValuesUnitPressureLevel(
    _ fbb: inout FlatBufferBuilder,
    unit: com_openmeteo_SiUnit = .undefined,
    valuesVectorOffset values: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_ValuesUnitPressureLevel.startValuesUnitPressureLevel(&fbb)
    com_openmeteo_ValuesUnitPressureLevel.add(unit: unit, &fbb)
    com_openmeteo_ValuesUnitPressureLevel.addVectorOf(values: values, &fbb)
    return com_openmeteo_ValuesUnitPressureLevel.endValuesUnitPressureLevel(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.unit.p, fieldName: "unit", required: false, type: com_openmeteo_SiUnit.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_ValuesAndLevel>, com_openmeteo_ValuesAndLevel>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_WeatherHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case temperature2m = 6
    case cloudcover = 8
    case cloudcoverLow = 10
    case cloudcoverMid = 12
    case cloudcoverHigh = 14
    case pressureMsl = 16
    case relativehumidity2m = 18
    case precipitation = 20
    case precipitationProbability = 22
    case weathercode = 24
    case temperature80m = 26
    case temperature120m = 28
    case temperature180m = 30
    case soilTemperature0cm = 32
    case soilTemperature6cm = 34
    case soilTemperature18cm = 36
    case soilTemperature54cm = 38
    case soilMoisture01cm = 40
    case soilMoisture13cm = 42
    case soilMoisture39cm = 44
    case soilMoisture927cm = 46
    case soilMoisture2781cm = 48
    case snowDepth = 50
    case snowHeight = 52
    case sensibleHeatflux = 54
    case latentHeatflux = 56
    case showers = 58
    case rain = 60
    case windgusts10m = 62
    case freezinglevelHeight = 64
    case dewpoint2m = 66
    case diffuseRadiation = 68
    case directRadiation = 70
    case apparentTemperature = 72
    case windspeed10m = 74
    case winddirection10m = 76
    case windspeed80m = 78
    case winddirection80m = 80
    case windspeed120m = 82
    case winddirection120m = 84
    case windspeed180m = 86
    case winddirection180m = 88
    case directNormalIrradiance = 90
    case evapotranspiration = 92
    case et0FaoEvapotranspiration = 94
    case vaporPressureDeficit = 96
    case shortwaveRadiation = 98
    case snowfall = 100
    case surfacePressure = 102
    case terrestrialRadiation = 104
    case terrestrialRadiationInstant = 106
    case shortwaveRadiationInstant = 108
    case diffuseRadiationInstant = 110
    case directRadiationInstant = 112
    case directNormalIrradianceInstant = 114
    case visibility = 116
    case cape = 118
    case uvIndex = 120
    case uvIndexClearSky = 122
    case isDay = 124
    case soilTemperature0To10cm = 126
    case soilTemperature10To40cm = 128
    case soilTemperature40To100cm = 130
    case soilTemperature100To200cm = 132
    case soilMoisture0To10cm = 134
    case soilMoisture10To40cm = 136
    case soilMoisture40To100cm = 138
    case soilMoisture100To200cm = 140
    case growingDegreeDaysBase0Limit50 = 142
    case leafWetnessProbability = 144
    case soilMoistureIndex0To7cm = 146
    case soilMoistureIndex7To28cm = 148
    case soilMoistureIndex28To100cm = 150
    case soilMoistureIndex100To255cm = 152
    case soilMoistureIndex0To100cm = 154
    case lightningPotential = 156
    case pressureLevelTemperature = 158
    case pressureLevelDewpoint = 160
    case pressureLevelRelativehumidity = 162
    case pressureLevelCloudcover = 164
    case pressureLevelWindspeed = 166
    case pressureLevelWinddirection = 168
    case pressureLevelVerticalVelocity = 170
    case pressureLevelGeopotentialHeight = 172
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverLow: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMid: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverHigh: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMsl: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbability: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var weathercode: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature80m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature120m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature180m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature6cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature18cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature54cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture01cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture01cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture13cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture13cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture39cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture39cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture927cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture927cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture2781cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture2781cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowDepth: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sensibleHeatflux: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var latentHeatflux: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var showers: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var rain: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var freezinglevelHeight: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint2m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperature: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed80m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection80m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed120m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection120m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed180m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection180m: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradiance: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var evapotranspiration: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var et0FaoEvapotranspiration: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var vaporPressureDeficit: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfall: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressure: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var terrestrialRadiation: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var terrestrialRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiationInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradianceInstant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibility: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cape: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndex: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSky: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var isDay: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0To10cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature10To40cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature40To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature100To200cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To10cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture10To40cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture40To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture100To200cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var growingDegreeDaysBase0Limit50: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var leafWetnessProbability: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To7cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex7To28cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex28To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex100To255cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To100cm: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var lightningPotential: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelTemperature: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelTemperature.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelDewpoint: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelDewpoint.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelRelativehumidity: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelRelativehumidity.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelCloudcover: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelCloudcover.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelWindspeed: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelWindspeed.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelWinddirection: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelWinddirection.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelVerticalVelocity: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelVerticalVelocity.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureLevelGeopotentialHeight: com_openmeteo_ValuesUnitPressureLevel? { let o = _accessor.offset(VTOFFSET.pressureLevelGeopotentialHeight.v); return o == 0 ? nil : com_openmeteo_ValuesUnitPressureLevel(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 85) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(temperature2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2m, at: VTOFFSET.temperature2m.p) }
  public static func add(cloudcover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover, at: VTOFFSET.cloudcover.p) }
  public static func add(cloudcoverLow: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverLow, at: VTOFFSET.cloudcoverLow.p) }
  public static func add(cloudcoverMid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMid, at: VTOFFSET.cloudcoverMid.p) }
  public static func add(cloudcoverHigh: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverHigh, at: VTOFFSET.cloudcoverHigh.p) }
  public static func add(pressureMsl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMsl, at: VTOFFSET.pressureMsl.p) }
  public static func add(relativehumidity2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity2m, at: VTOFFSET.relativehumidity2m.p) }
  public static func add(precipitation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitation, at: VTOFFSET.precipitation.p) }
  public static func add(precipitationProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbability, at: VTOFFSET.precipitationProbability.p) }
  public static func add(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func add(temperature80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature80m, at: VTOFFSET.temperature80m.p) }
  public static func add(temperature120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature120m, at: VTOFFSET.temperature120m.p) }
  public static func add(temperature180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature180m, at: VTOFFSET.temperature180m.p) }
  public static func add(soilTemperature0cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0cm, at: VTOFFSET.soilTemperature0cm.p) }
  public static func add(soilTemperature6cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature6cm, at: VTOFFSET.soilTemperature6cm.p) }
  public static func add(soilTemperature18cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature18cm, at: VTOFFSET.soilTemperature18cm.p) }
  public static func add(soilTemperature54cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature54cm, at: VTOFFSET.soilTemperature54cm.p) }
  public static func add(soilMoisture01cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture01cm, at: VTOFFSET.soilMoisture01cm.p) }
  public static func add(soilMoisture13cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture13cm, at: VTOFFSET.soilMoisture13cm.p) }
  public static func add(soilMoisture39cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture39cm, at: VTOFFSET.soilMoisture39cm.p) }
  public static func add(soilMoisture927cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture927cm, at: VTOFFSET.soilMoisture927cm.p) }
  public static func add(soilMoisture2781cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture2781cm, at: VTOFFSET.soilMoisture2781cm.p) }
  public static func add(snowDepth: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowDepth, at: VTOFFSET.snowDepth.p) }
  public static func add(snowHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowHeight, at: VTOFFSET.snowHeight.p) }
  public static func add(sensibleHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sensibleHeatflux, at: VTOFFSET.sensibleHeatflux.p) }
  public static func add(latentHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: latentHeatflux, at: VTOFFSET.latentHeatflux.p) }
  public static func add(showers: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showers, at: VTOFFSET.showers.p) }
  public static func add(rain: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rain, at: VTOFFSET.rain.p) }
  public static func add(windgusts10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10m, at: VTOFFSET.windgusts10m.p) }
  public static func add(freezinglevelHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: freezinglevelHeight, at: VTOFFSET.freezinglevelHeight.p) }
  public static func add(dewpoint2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint2m, at: VTOFFSET.dewpoint2m.p) }
  public static func add(diffuseRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiation, at: VTOFFSET.diffuseRadiation.p) }
  public static func add(directRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiation, at: VTOFFSET.directRadiation.p) }
  public static func add(apparentTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperature, at: VTOFFSET.apparentTemperature.p) }
  public static func add(windspeed10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10m, at: VTOFFSET.windspeed10m.p) }
  public static func add(winddirection10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10m, at: VTOFFSET.winddirection10m.p) }
  public static func add(windspeed80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed80m, at: VTOFFSET.windspeed80m.p) }
  public static func add(winddirection80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection80m, at: VTOFFSET.winddirection80m.p) }
  public static func add(windspeed120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed120m, at: VTOFFSET.windspeed120m.p) }
  public static func add(winddirection120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection120m, at: VTOFFSET.winddirection120m.p) }
  public static func add(windspeed180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed180m, at: VTOFFSET.windspeed180m.p) }
  public static func add(winddirection180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection180m, at: VTOFFSET.winddirection180m.p) }
  public static func add(directNormalIrradiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradiance, at: VTOFFSET.directNormalIrradiance.p) }
  public static func add(evapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: evapotranspiration, at: VTOFFSET.evapotranspiration.p) }
  public static func add(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(vaporPressureDeficit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vaporPressureDeficit, at: VTOFFSET.vaporPressureDeficit.p) }
  public static func add(shortwaveRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiation, at: VTOFFSET.shortwaveRadiation.p) }
  public static func add(snowfall: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfall, at: VTOFFSET.snowfall.p) }
  public static func add(surfacePressure: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressure, at: VTOFFSET.surfacePressure.p) }
  public static func add(terrestrialRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiation, at: VTOFFSET.terrestrialRadiation.p) }
  public static func add(terrestrialRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiationInstant, at: VTOFFSET.terrestrialRadiationInstant.p) }
  public static func add(shortwaveRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationInstant, at: VTOFFSET.shortwaveRadiationInstant.p) }
  public static func add(diffuseRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiationInstant, at: VTOFFSET.diffuseRadiationInstant.p) }
  public static func add(directRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiationInstant, at: VTOFFSET.directRadiationInstant.p) }
  public static func add(directNormalIrradianceInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradianceInstant, at: VTOFFSET.directNormalIrradianceInstant.p) }
  public static func add(visibility: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibility, at: VTOFFSET.visibility.p) }
  public static func add(cape: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cape, at: VTOFFSET.cape.p) }
  public static func add(uvIndex: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndex, at: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSky, at: VTOFFSET.uvIndexClearSky.p) }
  public static func add(isDay: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: isDay, at: VTOFFSET.isDay.p) }
  public static func add(soilTemperature0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To10cm, at: VTOFFSET.soilTemperature0To10cm.p) }
  public static func add(soilTemperature10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature10To40cm, at: VTOFFSET.soilTemperature10To40cm.p) }
  public static func add(soilTemperature40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature40To100cm, at: VTOFFSET.soilTemperature40To100cm.p) }
  public static func add(soilTemperature100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature100To200cm, at: VTOFFSET.soilTemperature100To200cm.p) }
  public static func add(soilMoisture0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To10cm, at: VTOFFSET.soilMoisture0To10cm.p) }
  public static func add(soilMoisture10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture10To40cm, at: VTOFFSET.soilMoisture10To40cm.p) }
  public static func add(soilMoisture40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture40To100cm, at: VTOFFSET.soilMoisture40To100cm.p) }
  public static func add(soilMoisture100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture100To200cm, at: VTOFFSET.soilMoisture100To200cm.p) }
  public static func add(growingDegreeDaysBase0Limit50: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: growingDegreeDaysBase0Limit50, at: VTOFFSET.growingDegreeDaysBase0Limit50.p) }
  public static func add(leafWetnessProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: leafWetnessProbability, at: VTOFFSET.leafWetnessProbability.p) }
  public static func add(soilMoistureIndex0To7cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To7cm, at: VTOFFSET.soilMoistureIndex0To7cm.p) }
  public static func add(soilMoistureIndex7To28cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex7To28cm, at: VTOFFSET.soilMoistureIndex7To28cm.p) }
  public static func add(soilMoistureIndex28To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex28To100cm, at: VTOFFSET.soilMoistureIndex28To100cm.p) }
  public static func add(soilMoistureIndex100To255cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex100To255cm, at: VTOFFSET.soilMoistureIndex100To255cm.p) }
  public static func add(soilMoistureIndex0To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To100cm, at: VTOFFSET.soilMoistureIndex0To100cm.p) }
  public static func add(lightningPotential: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lightningPotential, at: VTOFFSET.lightningPotential.p) }
  public static func add(pressureLevelTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelTemperature, at: VTOFFSET.pressureLevelTemperature.p) }
  public static func add(pressureLevelDewpoint: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelDewpoint, at: VTOFFSET.pressureLevelDewpoint.p) }
  public static func add(pressureLevelRelativehumidity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelRelativehumidity, at: VTOFFSET.pressureLevelRelativehumidity.p) }
  public static func add(pressureLevelCloudcover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelCloudcover, at: VTOFFSET.pressureLevelCloudcover.p) }
  public static func add(pressureLevelWindspeed: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelWindspeed, at: VTOFFSET.pressureLevelWindspeed.p) }
  public static func add(pressureLevelWinddirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelWinddirection, at: VTOFFSET.pressureLevelWinddirection.p) }
  public static func add(pressureLevelVerticalVelocity: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelVerticalVelocity, at: VTOFFSET.pressureLevelVerticalVelocity.p) }
  public static func add(pressureLevelGeopotentialHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureLevelGeopotentialHeight, at: VTOFFSET.pressureLevelGeopotentialHeight.p) }
  public static func endWeatherHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createWeatherHourly(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    temperature2mOffset temperature2m: Offset = Offset(),
    cloudcoverOffset cloudcover: Offset = Offset(),
    cloudcoverLowOffset cloudcoverLow: Offset = Offset(),
    cloudcoverMidOffset cloudcoverMid: Offset = Offset(),
    cloudcoverHighOffset cloudcoverHigh: Offset = Offset(),
    pressureMslOffset pressureMsl: Offset = Offset(),
    relativehumidity2mOffset relativehumidity2m: Offset = Offset(),
    precipitationOffset precipitation: Offset = Offset(),
    precipitationProbabilityOffset precipitationProbability: Offset = Offset(),
    weathercodeOffset weathercode: Offset = Offset(),
    temperature80mOffset temperature80m: Offset = Offset(),
    temperature120mOffset temperature120m: Offset = Offset(),
    temperature180mOffset temperature180m: Offset = Offset(),
    soilTemperature0cmOffset soilTemperature0cm: Offset = Offset(),
    soilTemperature6cmOffset soilTemperature6cm: Offset = Offset(),
    soilTemperature18cmOffset soilTemperature18cm: Offset = Offset(),
    soilTemperature54cmOffset soilTemperature54cm: Offset = Offset(),
    soilMoisture01cmOffset soilMoisture01cm: Offset = Offset(),
    soilMoisture13cmOffset soilMoisture13cm: Offset = Offset(),
    soilMoisture39cmOffset soilMoisture39cm: Offset = Offset(),
    soilMoisture927cmOffset soilMoisture927cm: Offset = Offset(),
    soilMoisture2781cmOffset soilMoisture2781cm: Offset = Offset(),
    snowDepthOffset snowDepth: Offset = Offset(),
    snowHeightOffset snowHeight: Offset = Offset(),
    sensibleHeatfluxOffset sensibleHeatflux: Offset = Offset(),
    latentHeatfluxOffset latentHeatflux: Offset = Offset(),
    showersOffset showers: Offset = Offset(),
    rainOffset rain: Offset = Offset(),
    windgusts10mOffset windgusts10m: Offset = Offset(),
    freezinglevelHeightOffset freezinglevelHeight: Offset = Offset(),
    dewpoint2mOffset dewpoint2m: Offset = Offset(),
    diffuseRadiationOffset diffuseRadiation: Offset = Offset(),
    directRadiationOffset directRadiation: Offset = Offset(),
    apparentTemperatureOffset apparentTemperature: Offset = Offset(),
    windspeed10mOffset windspeed10m: Offset = Offset(),
    winddirection10mOffset winddirection10m: Offset = Offset(),
    windspeed80mOffset windspeed80m: Offset = Offset(),
    winddirection80mOffset winddirection80m: Offset = Offset(),
    windspeed120mOffset windspeed120m: Offset = Offset(),
    winddirection120mOffset winddirection120m: Offset = Offset(),
    windspeed180mOffset windspeed180m: Offset = Offset(),
    winddirection180mOffset winddirection180m: Offset = Offset(),
    directNormalIrradianceOffset directNormalIrradiance: Offset = Offset(),
    evapotranspirationOffset evapotranspiration: Offset = Offset(),
    et0FaoEvapotranspirationOffset et0FaoEvapotranspiration: Offset = Offset(),
    vaporPressureDeficitOffset vaporPressureDeficit: Offset = Offset(),
    shortwaveRadiationOffset shortwaveRadiation: Offset = Offset(),
    snowfallOffset snowfall: Offset = Offset(),
    surfacePressureOffset surfacePressure: Offset = Offset(),
    terrestrialRadiationOffset terrestrialRadiation: Offset = Offset(),
    terrestrialRadiationInstantOffset terrestrialRadiationInstant: Offset = Offset(),
    shortwaveRadiationInstantOffset shortwaveRadiationInstant: Offset = Offset(),
    diffuseRadiationInstantOffset diffuseRadiationInstant: Offset = Offset(),
    directRadiationInstantOffset directRadiationInstant: Offset = Offset(),
    directNormalIrradianceInstantOffset directNormalIrradianceInstant: Offset = Offset(),
    visibilityOffset visibility: Offset = Offset(),
    capeOffset cape: Offset = Offset(),
    uvIndexOffset uvIndex: Offset = Offset(),
    uvIndexClearSkyOffset uvIndexClearSky: Offset = Offset(),
    isDayOffset isDay: Offset = Offset(),
    soilTemperature0To10cmOffset soilTemperature0To10cm: Offset = Offset(),
    soilTemperature10To40cmOffset soilTemperature10To40cm: Offset = Offset(),
    soilTemperature40To100cmOffset soilTemperature40To100cm: Offset = Offset(),
    soilTemperature100To200cmOffset soilTemperature100To200cm: Offset = Offset(),
    soilMoisture0To10cmOffset soilMoisture0To10cm: Offset = Offset(),
    soilMoisture10To40cmOffset soilMoisture10To40cm: Offset = Offset(),
    soilMoisture40To100cmOffset soilMoisture40To100cm: Offset = Offset(),
    soilMoisture100To200cmOffset soilMoisture100To200cm: Offset = Offset(),
    growingDegreeDaysBase0Limit50Offset growingDegreeDaysBase0Limit50: Offset = Offset(),
    leafWetnessProbabilityOffset leafWetnessProbability: Offset = Offset(),
    soilMoistureIndex0To7cmOffset soilMoistureIndex0To7cm: Offset = Offset(),
    soilMoistureIndex7To28cmOffset soilMoistureIndex7To28cm: Offset = Offset(),
    soilMoistureIndex28To100cmOffset soilMoistureIndex28To100cm: Offset = Offset(),
    soilMoistureIndex100To255cmOffset soilMoistureIndex100To255cm: Offset = Offset(),
    soilMoistureIndex0To100cmOffset soilMoistureIndex0To100cm: Offset = Offset(),
    lightningPotentialOffset lightningPotential: Offset = Offset(),
    pressureLevelTemperatureOffset pressureLevelTemperature: Offset = Offset(),
    pressureLevelDewpointOffset pressureLevelDewpoint: Offset = Offset(),
    pressureLevelRelativehumidityOffset pressureLevelRelativehumidity: Offset = Offset(),
    pressureLevelCloudcoverOffset pressureLevelCloudcover: Offset = Offset(),
    pressureLevelWindspeedOffset pressureLevelWindspeed: Offset = Offset(),
    pressureLevelWinddirectionOffset pressureLevelWinddirection: Offset = Offset(),
    pressureLevelVerticalVelocityOffset pressureLevelVerticalVelocity: Offset = Offset(),
    pressureLevelGeopotentialHeightOffset pressureLevelGeopotentialHeight: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_WeatherHourly.startWeatherHourly(&fbb)
    com_openmeteo_WeatherHourly.add(time: time, &fbb)
    com_openmeteo_WeatherHourly.add(temperature2m: temperature2m, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcover: cloudcover, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcoverLow: cloudcoverLow, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcoverMid: cloudcoverMid, &fbb)
    com_openmeteo_WeatherHourly.add(cloudcoverHigh: cloudcoverHigh, &fbb)
    com_openmeteo_WeatherHourly.add(pressureMsl: pressureMsl, &fbb)
    com_openmeteo_WeatherHourly.add(relativehumidity2m: relativehumidity2m, &fbb)
    com_openmeteo_WeatherHourly.add(precipitation: precipitation, &fbb)
    com_openmeteo_WeatherHourly.add(precipitationProbability: precipitationProbability, &fbb)
    com_openmeteo_WeatherHourly.add(weathercode: weathercode, &fbb)
    com_openmeteo_WeatherHourly.add(temperature80m: temperature80m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature120m: temperature120m, &fbb)
    com_openmeteo_WeatherHourly.add(temperature180m: temperature180m, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature0cm: soilTemperature0cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature6cm: soilTemperature6cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature18cm: soilTemperature18cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature54cm: soilTemperature54cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture01cm: soilMoisture01cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture13cm: soilMoisture13cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture39cm: soilMoisture39cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture927cm: soilMoisture927cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture2781cm: soilMoisture2781cm, &fbb)
    com_openmeteo_WeatherHourly.add(snowDepth: snowDepth, &fbb)
    com_openmeteo_WeatherHourly.add(snowHeight: snowHeight, &fbb)
    com_openmeteo_WeatherHourly.add(sensibleHeatflux: sensibleHeatflux, &fbb)
    com_openmeteo_WeatherHourly.add(latentHeatflux: latentHeatflux, &fbb)
    com_openmeteo_WeatherHourly.add(showers: showers, &fbb)
    com_openmeteo_WeatherHourly.add(rain: rain, &fbb)
    com_openmeteo_WeatherHourly.add(windgusts10m: windgusts10m, &fbb)
    com_openmeteo_WeatherHourly.add(freezinglevelHeight: freezinglevelHeight, &fbb)
    com_openmeteo_WeatherHourly.add(dewpoint2m: dewpoint2m, &fbb)
    com_openmeteo_WeatherHourly.add(diffuseRadiation: diffuseRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(directRadiation: directRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(apparentTemperature: apparentTemperature, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed10m: windspeed10m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection10m: winddirection10m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed80m: windspeed80m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection80m: winddirection80m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed120m: windspeed120m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection120m: winddirection120m, &fbb)
    com_openmeteo_WeatherHourly.add(windspeed180m: windspeed180m, &fbb)
    com_openmeteo_WeatherHourly.add(winddirection180m: winddirection180m, &fbb)
    com_openmeteo_WeatherHourly.add(directNormalIrradiance: directNormalIrradiance, &fbb)
    com_openmeteo_WeatherHourly.add(evapotranspiration: evapotranspiration, &fbb)
    com_openmeteo_WeatherHourly.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_WeatherHourly.add(vaporPressureDeficit: vaporPressureDeficit, &fbb)
    com_openmeteo_WeatherHourly.add(shortwaveRadiation: shortwaveRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(snowfall: snowfall, &fbb)
    com_openmeteo_WeatherHourly.add(surfacePressure: surfacePressure, &fbb)
    com_openmeteo_WeatherHourly.add(terrestrialRadiation: terrestrialRadiation, &fbb)
    com_openmeteo_WeatherHourly.add(terrestrialRadiationInstant: terrestrialRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(shortwaveRadiationInstant: shortwaveRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(diffuseRadiationInstant: diffuseRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(directRadiationInstant: directRadiationInstant, &fbb)
    com_openmeteo_WeatherHourly.add(directNormalIrradianceInstant: directNormalIrradianceInstant, &fbb)
    com_openmeteo_WeatherHourly.add(visibility: visibility, &fbb)
    com_openmeteo_WeatherHourly.add(cape: cape, &fbb)
    com_openmeteo_WeatherHourly.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_WeatherHourly.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_WeatherHourly.add(isDay: isDay, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature0To10cm: soilTemperature0To10cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature10To40cm: soilTemperature10To40cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature40To100cm: soilTemperature40To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilTemperature100To200cm: soilTemperature100To200cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture0To10cm: soilMoisture0To10cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture10To40cm: soilMoisture10To40cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture40To100cm: soilMoisture40To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoisture100To200cm: soilMoisture100To200cm, &fbb)
    com_openmeteo_WeatherHourly.add(growingDegreeDaysBase0Limit50: growingDegreeDaysBase0Limit50, &fbb)
    com_openmeteo_WeatherHourly.add(leafWetnessProbability: leafWetnessProbability, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex0To7cm: soilMoistureIndex0To7cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex7To28cm: soilMoistureIndex7To28cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex28To100cm: soilMoistureIndex28To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex100To255cm: soilMoistureIndex100To255cm, &fbb)
    com_openmeteo_WeatherHourly.add(soilMoistureIndex0To100cm: soilMoistureIndex0To100cm, &fbb)
    com_openmeteo_WeatherHourly.add(lightningPotential: lightningPotential, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelTemperature: pressureLevelTemperature, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelDewpoint: pressureLevelDewpoint, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelRelativehumidity: pressureLevelRelativehumidity, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelCloudcover: pressureLevelCloudcover, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelWindspeed: pressureLevelWindspeed, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelWinddirection: pressureLevelWinddirection, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelVerticalVelocity: pressureLevelVerticalVelocity, &fbb)
    com_openmeteo_WeatherHourly.add(pressureLevelGeopotentialHeight: pressureLevelGeopotentialHeight, &fbb)
    return com_openmeteo_WeatherHourly.endWeatherHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.temperature2m.p, fieldName: "temperature2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover.p, fieldName: "cloudcover", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverLow.p, fieldName: "cloudcoverLow", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMid.p, fieldName: "cloudcoverMid", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverHigh.p, fieldName: "cloudcoverHigh", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMsl.p, fieldName: "pressureMsl", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity2m.p, fieldName: "relativehumidity2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitation.p, fieldName: "precipitation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbability.p, fieldName: "precipitationProbability", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature80m.p, fieldName: "temperature80m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature120m.p, fieldName: "temperature120m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature180m.p, fieldName: "temperature180m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0cm.p, fieldName: "soilTemperature0cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature6cm.p, fieldName: "soilTemperature6cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature18cm.p, fieldName: "soilTemperature18cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature54cm.p, fieldName: "soilTemperature54cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture01cm.p, fieldName: "soilMoisture01cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture13cm.p, fieldName: "soilMoisture13cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture39cm.p, fieldName: "soilMoisture39cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture927cm.p, fieldName: "soilMoisture927cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture2781cm.p, fieldName: "soilMoisture2781cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowDepth.p, fieldName: "snowDepth", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowHeight.p, fieldName: "snowHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sensibleHeatflux.p, fieldName: "sensibleHeatflux", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.latentHeatflux.p, fieldName: "latentHeatflux", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.showers.p, fieldName: "showers", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.rain.p, fieldName: "rain", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10m.p, fieldName: "windgusts10m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.freezinglevelHeight.p, fieldName: "freezinglevelHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint2m.p, fieldName: "dewpoint2m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiation.p, fieldName: "diffuseRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directRadiation.p, fieldName: "directRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperature.p, fieldName: "apparentTemperature", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10m.p, fieldName: "windspeed10m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection10m.p, fieldName: "winddirection10m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed80m.p, fieldName: "windspeed80m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection80m.p, fieldName: "winddirection80m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed120m.p, fieldName: "windspeed120m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection120m.p, fieldName: "winddirection120m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed180m.p, fieldName: "windspeed180m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection180m.p, fieldName: "winddirection180m", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradiance.p, fieldName: "directNormalIrradiance", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.evapotranspiration.p, fieldName: "evapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.vaporPressureDeficit.p, fieldName: "vaporPressureDeficit", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiation.p, fieldName: "shortwaveRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfall.p, fieldName: "snowfall", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressure.p, fieldName: "surfacePressure", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiation.p, fieldName: "terrestrialRadiation", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiationInstant.p, fieldName: "terrestrialRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationInstant.p, fieldName: "shortwaveRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiationInstant.p, fieldName: "diffuseRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directRadiationInstant.p, fieldName: "directRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradianceInstant.p, fieldName: "directNormalIrradianceInstant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibility.p, fieldName: "visibility", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cape.p, fieldName: "cape", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To10cm.p, fieldName: "soilTemperature0To10cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature10To40cm.p, fieldName: "soilTemperature10To40cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature40To100cm.p, fieldName: "soilTemperature40To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To200cm.p, fieldName: "soilTemperature100To200cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To10cm.p, fieldName: "soilMoisture0To10cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture10To40cm.p, fieldName: "soilMoisture10To40cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture40To100cm.p, fieldName: "soilMoisture40To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To200cm.p, fieldName: "soilMoisture100To200cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.growingDegreeDaysBase0Limit50.p, fieldName: "growingDegreeDaysBase0Limit50", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.leafWetnessProbability.p, fieldName: "leafWetnessProbability", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To7cm.p, fieldName: "soilMoistureIndex0To7cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex7To28cm.p, fieldName: "soilMoistureIndex7To28cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex28To100cm.p, fieldName: "soilMoistureIndex28To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex100To255cm.p, fieldName: "soilMoistureIndex100To255cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To100cm.p, fieldName: "soilMoistureIndex0To100cm", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.lightningPotential.p, fieldName: "lightningPotential", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureLevelTemperature.p, fieldName: "pressureLevelTemperature", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelDewpoint.p, fieldName: "pressureLevelDewpoint", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelRelativehumidity.p, fieldName: "pressureLevelRelativehumidity", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelCloudcover.p, fieldName: "pressureLevelCloudcover", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelWindspeed.p, fieldName: "pressureLevelWindspeed", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelWinddirection.p, fieldName: "pressureLevelWinddirection", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelVerticalVelocity.p, fieldName: "pressureLevelVerticalVelocity", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    try _v.visit(field: VTOFFSET.pressureLevelGeopotentialHeight.p, fieldName: "pressureLevelGeopotentialHeight", required: false, type: ForwardOffset<com_openmeteo_ValuesUnitPressureLevel>.self)
    _v.finish()
  }
}

public struct com_openmeteo_WeatherDaily: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case time = 4
    case temperature2mMax = 6
    case temperature2mMin = 8
    case temperature2mMean = 10
    case apparentTemperatureMax = 12
    case apparentTemperatureMin = 14
    case apparentTemperatureMean = 16
    case precipitationSum = 18
    case precipitationProbabilityMax = 20
    case precipitationProbabilityMin = 22
    case precipitationProbabilityMean = 24
    case snowfallSum = 26
    case rainSum = 28
    case showersSum = 30
    case weathercode = 32
    case shortwaveRadiationSum = 34
    case windspeed10mMax = 36
    case windspeed10mMin = 38
    case windspeed10mMean = 40
    case windgusts10mMax = 42
    case windgusts10mMin = 44
    case windgusts10mMean = 46
    case winddirection10mDominant = 48
    case precipitationHours = 50
    case sunrise = 52
    case sunset = 54
    case et0FaoEvapotranspiration = 56
    case visibilityMax = 58
    case visibilityMin = 60
    case visibilityMean = 62
    case pressureMslMax = 64
    case pressureMslMin = 66
    case pressureMslMean = 68
    case surfacePressureMax = 70
    case surfacePressureMin = 72
    case surfacePressureMean = 74
    case capeMax = 76
    case capeMin = 78
    case capeMean = 80
    case cloudcoverMax = 82
    case cloudcoverMin = 84
    case cloudcoverMean = 86
    case uvIndexMax = 88
    case uvIndexClearSkyMax = 90
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var time: com_openmeteo_TimeRange! { let o = _accessor.offset(VTOFFSET.time.v); return _accessor.readBuffer(of: com_openmeteo_TimeRange.self, at: o) }
  public var mutableTime: com_openmeteo_TimeRange_Mutable! { let o = _accessor.offset(VTOFFSET.time.v); return com_openmeteo_TimeRange_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var temperature2mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfallSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfallSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var rainSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.rainSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var showersSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.showersSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var weathercode: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiationSum: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationSum.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10mDominant: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10mDominant.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationHours: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationHours.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hasSunrise: Bool { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? false : true }
  public var sunriseCount: Int32 { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sunrise(at index: Int32) -> Int64 { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? 0 : _accessor.directRead(of: Int64.self, offset: _accessor.vector(at: o) + index * 8) }
  public var sunrise: [Int64] { return _accessor.getVector(at: VTOFFSET.sunrise.v) ?? [] }
  public var hasSunset: Bool { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? false : true }
  public var sunsetCount: Int32 { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sunset(at index: Int32) -> Int64 { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? 0 : _accessor.directRead(of: Int64.self, offset: _accessor.vector(at: o) + index * 8) }
  public var sunset: [Int64] { return _accessor.getVector(at: VTOFFSET.sunset.v) ?? [] }
  public var et0FaoEvapotranspiration: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMin: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMin.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMean: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMean.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSkyMax: com_openmeteo_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSkyMax.v); return o == 0 ? nil : com_openmeteo_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherDaily(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 44) }
  public static func add(time: com_openmeteo_TimeRange?, _ fbb: inout FlatBufferBuilder) { guard let time = time else { return }; fbb.create(struct: time, position: VTOFFSET.time.p) }
  public static func add(temperature2mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMax, at: VTOFFSET.temperature2mMax.p) }
  public static func add(temperature2mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMin, at: VTOFFSET.temperature2mMin.p) }
  public static func add(temperature2mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMean, at: VTOFFSET.temperature2mMean.p) }
  public static func add(apparentTemperatureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMax, at: VTOFFSET.apparentTemperatureMax.p) }
  public static func add(apparentTemperatureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMin, at: VTOFFSET.apparentTemperatureMin.p) }
  public static func add(apparentTemperatureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMean, at: VTOFFSET.apparentTemperatureMean.p) }
  public static func add(precipitationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationSum, at: VTOFFSET.precipitationSum.p) }
  public static func add(precipitationProbabilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMax, at: VTOFFSET.precipitationProbabilityMax.p) }
  public static func add(precipitationProbabilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMin, at: VTOFFSET.precipitationProbabilityMin.p) }
  public static func add(precipitationProbabilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMean, at: VTOFFSET.precipitationProbabilityMean.p) }
  public static func add(snowfallSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfallSum, at: VTOFFSET.snowfallSum.p) }
  public static func add(rainSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rainSum, at: VTOFFSET.rainSum.p) }
  public static func add(showersSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showersSum, at: VTOFFSET.showersSum.p) }
  public static func add(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func add(shortwaveRadiationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationSum, at: VTOFFSET.shortwaveRadiationSum.p) }
  public static func add(windspeed10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMax, at: VTOFFSET.windspeed10mMax.p) }
  public static func add(windspeed10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMin, at: VTOFFSET.windspeed10mMin.p) }
  public static func add(windspeed10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMean, at: VTOFFSET.windspeed10mMean.p) }
  public static func add(windgusts10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMax, at: VTOFFSET.windgusts10mMax.p) }
  public static func add(windgusts10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMin, at: VTOFFSET.windgusts10mMin.p) }
  public static func add(windgusts10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMean, at: VTOFFSET.windgusts10mMean.p) }
  public static func add(winddirection10mDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10mDominant, at: VTOFFSET.winddirection10mDominant.p) }
  public static func add(precipitationHours: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationHours, at: VTOFFSET.precipitationHours.p) }
  public static func addVectorOf(sunrise: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunrise, at: VTOFFSET.sunrise.p) }
  public static func addVectorOf(sunset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunset, at: VTOFFSET.sunset.p) }
  public static func add(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(visibilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMax, at: VTOFFSET.visibilityMax.p) }
  public static func add(visibilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMin, at: VTOFFSET.visibilityMin.p) }
  public static func add(visibilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMean, at: VTOFFSET.visibilityMean.p) }
  public static func add(pressureMslMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMax, at: VTOFFSET.pressureMslMax.p) }
  public static func add(pressureMslMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMin, at: VTOFFSET.pressureMslMin.p) }
  public static func add(pressureMslMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMean, at: VTOFFSET.pressureMslMean.p) }
  public static func add(surfacePressureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMax, at: VTOFFSET.surfacePressureMax.p) }
  public static func add(surfacePressureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMin, at: VTOFFSET.surfacePressureMin.p) }
  public static func add(surfacePressureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMean, at: VTOFFSET.surfacePressureMean.p) }
  public static func add(capeMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMax, at: VTOFFSET.capeMax.p) }
  public static func add(capeMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMin, at: VTOFFSET.capeMin.p) }
  public static func add(capeMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMean, at: VTOFFSET.capeMean.p) }
  public static func add(cloudcoverMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMax, at: VTOFFSET.cloudcoverMax.p) }
  public static func add(cloudcoverMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMin, at: VTOFFSET.cloudcoverMin.p) }
  public static func add(cloudcoverMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMean, at: VTOFFSET.cloudcoverMean.p) }
  public static func add(uvIndexMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexMax, at: VTOFFSET.uvIndexMax.p) }
  public static func add(uvIndexClearSkyMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSkyMax, at: VTOFFSET.uvIndexClearSkyMax.p) }
  public static func endWeatherDaily(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createWeatherDaily(
    _ fbb: inout FlatBufferBuilder,
    time: com_openmeteo_TimeRange,
    temperature2mMaxOffset temperature2mMax: Offset = Offset(),
    temperature2mMinOffset temperature2mMin: Offset = Offset(),
    temperature2mMeanOffset temperature2mMean: Offset = Offset(),
    apparentTemperatureMaxOffset apparentTemperatureMax: Offset = Offset(),
    apparentTemperatureMinOffset apparentTemperatureMin: Offset = Offset(),
    apparentTemperatureMeanOffset apparentTemperatureMean: Offset = Offset(),
    precipitationSumOffset precipitationSum: Offset = Offset(),
    precipitationProbabilityMaxOffset precipitationProbabilityMax: Offset = Offset(),
    precipitationProbabilityMinOffset precipitationProbabilityMin: Offset = Offset(),
    precipitationProbabilityMeanOffset precipitationProbabilityMean: Offset = Offset(),
    snowfallSumOffset snowfallSum: Offset = Offset(),
    rainSumOffset rainSum: Offset = Offset(),
    showersSumOffset showersSum: Offset = Offset(),
    weathercodeOffset weathercode: Offset = Offset(),
    shortwaveRadiationSumOffset shortwaveRadiationSum: Offset = Offset(),
    windspeed10mMaxOffset windspeed10mMax: Offset = Offset(),
    windspeed10mMinOffset windspeed10mMin: Offset = Offset(),
    windspeed10mMeanOffset windspeed10mMean: Offset = Offset(),
    windgusts10mMaxOffset windgusts10mMax: Offset = Offset(),
    windgusts10mMinOffset windgusts10mMin: Offset = Offset(),
    windgusts10mMeanOffset windgusts10mMean: Offset = Offset(),
    winddirection10mDominantOffset winddirection10mDominant: Offset = Offset(),
    precipitationHoursOffset precipitationHours: Offset = Offset(),
    sunriseVectorOffset sunrise: Offset = Offset(),
    sunsetVectorOffset sunset: Offset = Offset(),
    et0FaoEvapotranspirationOffset et0FaoEvapotranspiration: Offset = Offset(),
    visibilityMaxOffset visibilityMax: Offset = Offset(),
    visibilityMinOffset visibilityMin: Offset = Offset(),
    visibilityMeanOffset visibilityMean: Offset = Offset(),
    pressureMslMaxOffset pressureMslMax: Offset = Offset(),
    pressureMslMinOffset pressureMslMin: Offset = Offset(),
    pressureMslMeanOffset pressureMslMean: Offset = Offset(),
    surfacePressureMaxOffset surfacePressureMax: Offset = Offset(),
    surfacePressureMinOffset surfacePressureMin: Offset = Offset(),
    surfacePressureMeanOffset surfacePressureMean: Offset = Offset(),
    capeMaxOffset capeMax: Offset = Offset(),
    capeMinOffset capeMin: Offset = Offset(),
    capeMeanOffset capeMean: Offset = Offset(),
    cloudcoverMaxOffset cloudcoverMax: Offset = Offset(),
    cloudcoverMinOffset cloudcoverMin: Offset = Offset(),
    cloudcoverMeanOffset cloudcoverMean: Offset = Offset(),
    uvIndexMaxOffset uvIndexMax: Offset = Offset(),
    uvIndexClearSkyMaxOffset uvIndexClearSkyMax: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_WeatherDaily.startWeatherDaily(&fbb)
    com_openmeteo_WeatherDaily.add(time: time, &fbb)
    com_openmeteo_WeatherDaily.add(temperature2mMax: temperature2mMax, &fbb)
    com_openmeteo_WeatherDaily.add(temperature2mMin: temperature2mMin, &fbb)
    com_openmeteo_WeatherDaily.add(temperature2mMean: temperature2mMean, &fbb)
    com_openmeteo_WeatherDaily.add(apparentTemperatureMax: apparentTemperatureMax, &fbb)
    com_openmeteo_WeatherDaily.add(apparentTemperatureMin: apparentTemperatureMin, &fbb)
    com_openmeteo_WeatherDaily.add(apparentTemperatureMean: apparentTemperatureMean, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationSum: precipitationSum, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationProbabilityMax: precipitationProbabilityMax, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationProbabilityMin: precipitationProbabilityMin, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationProbabilityMean: precipitationProbabilityMean, &fbb)
    com_openmeteo_WeatherDaily.add(snowfallSum: snowfallSum, &fbb)
    com_openmeteo_WeatherDaily.add(rainSum: rainSum, &fbb)
    com_openmeteo_WeatherDaily.add(showersSum: showersSum, &fbb)
    com_openmeteo_WeatherDaily.add(weathercode: weathercode, &fbb)
    com_openmeteo_WeatherDaily.add(shortwaveRadiationSum: shortwaveRadiationSum, &fbb)
    com_openmeteo_WeatherDaily.add(windspeed10mMax: windspeed10mMax, &fbb)
    com_openmeteo_WeatherDaily.add(windspeed10mMin: windspeed10mMin, &fbb)
    com_openmeteo_WeatherDaily.add(windspeed10mMean: windspeed10mMean, &fbb)
    com_openmeteo_WeatherDaily.add(windgusts10mMax: windgusts10mMax, &fbb)
    com_openmeteo_WeatherDaily.add(windgusts10mMin: windgusts10mMin, &fbb)
    com_openmeteo_WeatherDaily.add(windgusts10mMean: windgusts10mMean, &fbb)
    com_openmeteo_WeatherDaily.add(winddirection10mDominant: winddirection10mDominant, &fbb)
    com_openmeteo_WeatherDaily.add(precipitationHours: precipitationHours, &fbb)
    com_openmeteo_WeatherDaily.addVectorOf(sunrise: sunrise, &fbb)
    com_openmeteo_WeatherDaily.addVectorOf(sunset: sunset, &fbb)
    com_openmeteo_WeatherDaily.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_WeatherDaily.add(visibilityMax: visibilityMax, &fbb)
    com_openmeteo_WeatherDaily.add(visibilityMin: visibilityMin, &fbb)
    com_openmeteo_WeatherDaily.add(visibilityMean: visibilityMean, &fbb)
    com_openmeteo_WeatherDaily.add(pressureMslMax: pressureMslMax, &fbb)
    com_openmeteo_WeatherDaily.add(pressureMslMin: pressureMslMin, &fbb)
    com_openmeteo_WeatherDaily.add(pressureMslMean: pressureMslMean, &fbb)
    com_openmeteo_WeatherDaily.add(surfacePressureMax: surfacePressureMax, &fbb)
    com_openmeteo_WeatherDaily.add(surfacePressureMin: surfacePressureMin, &fbb)
    com_openmeteo_WeatherDaily.add(surfacePressureMean: surfacePressureMean, &fbb)
    com_openmeteo_WeatherDaily.add(capeMax: capeMax, &fbb)
    com_openmeteo_WeatherDaily.add(capeMin: capeMin, &fbb)
    com_openmeteo_WeatherDaily.add(capeMean: capeMean, &fbb)
    com_openmeteo_WeatherDaily.add(cloudcoverMax: cloudcoverMax, &fbb)
    com_openmeteo_WeatherDaily.add(cloudcoverMin: cloudcoverMin, &fbb)
    com_openmeteo_WeatherDaily.add(cloudcoverMean: cloudcoverMean, &fbb)
    com_openmeteo_WeatherDaily.add(uvIndexMax: uvIndexMax, &fbb)
    com_openmeteo_WeatherDaily.add(uvIndexClearSkyMax: uvIndexClearSkyMax, &fbb)
    return com_openmeteo_WeatherDaily.endWeatherDaily(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.time.p, fieldName: "time", required: true, type: com_openmeteo_TimeRange.self)
    try _v.visit(field: VTOFFSET.temperature2mMax.p, fieldName: "temperature2mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2mMin.p, fieldName: "temperature2mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2mMean.p, fieldName: "temperature2mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMax.p, fieldName: "apparentTemperatureMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMin.p, fieldName: "apparentTemperatureMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMean.p, fieldName: "apparentTemperatureMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationSum.p, fieldName: "precipitationSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMax.p, fieldName: "precipitationProbabilityMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMin.p, fieldName: "precipitationProbabilityMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMean.p, fieldName: "precipitationProbabilityMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfallSum.p, fieldName: "snowfallSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.rainSum.p, fieldName: "rainSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.showersSum.p, fieldName: "showersSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationSum.p, fieldName: "shortwaveRadiationSum", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMax.p, fieldName: "windspeed10mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMin.p, fieldName: "windspeed10mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMean.p, fieldName: "windspeed10mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMax.p, fieldName: "windgusts10mMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMin.p, fieldName: "windgusts10mMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMean.p, fieldName: "windgusts10mMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection10mDominant.p, fieldName: "winddirection10mDominant", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationHours.p, fieldName: "precipitationHours", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sunrise.p, fieldName: "sunrise", required: false, type: ForwardOffset<Vector<Int64, Int64>>.self)
    try _v.visit(field: VTOFFSET.sunset.p, fieldName: "sunset", required: false, type: ForwardOffset<Vector<Int64, Int64>>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMax.p, fieldName: "visibilityMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMin.p, fieldName: "visibilityMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMean.p, fieldName: "visibilityMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMax.p, fieldName: "pressureMslMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMin.p, fieldName: "pressureMslMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMean.p, fieldName: "pressureMslMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMax.p, fieldName: "surfacePressureMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMin.p, fieldName: "surfacePressureMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMean.p, fieldName: "surfacePressureMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMax.p, fieldName: "capeMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMin.p, fieldName: "capeMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMean.p, fieldName: "capeMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMax.p, fieldName: "cloudcoverMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMin.p, fieldName: "cloudcoverMin", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMean.p, fieldName: "cloudcoverMean", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexMax.p, fieldName: "uvIndexMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSkyMax.p, fieldName: "uvIndexClearSkyMax", required: false, type: ForwardOffset<com_openmeteo_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_WeatherApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case generationtimeMs = 12
    case utcOffsetSeconds = 14
    case timezone = 16
    case timezoneAbbreviation = 18
    case currentWeather = 20
    case daily = 22
    case hourly = 24
    case sixHourly = 26
    case minutely15 = 28
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: com_openmeteo_WeatherModel { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? .undefined : com_openmeteo_WeatherModel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var currentWeather: com_openmeteo_CurrentWeather? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_CurrentWeather.self, at: o) }
  public var mutableCurrentWeather: com_openmeteo_CurrentWeather_Mutable? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : com_openmeteo_CurrentWeather_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var daily: com_openmeteo_WeatherDaily? { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? nil : com_openmeteo_WeatherDaily(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hourly: com_openmeteo_WeatherHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sixHourly: com_openmeteo_WeatherHourly? { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? nil : com_openmeteo_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var minutely15: com_openmeteo_WeatherHourly? { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? nil : com_openmeteo_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 13) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: com_openmeteo_WeatherModel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: model.rawValue, def: 0, at: VTOFFSET.model.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(currentWeather: com_openmeteo_CurrentWeather?, _ fbb: inout FlatBufferBuilder) { guard let currentWeather = currentWeather else { return }; fbb.create(struct: currentWeather, position: VTOFFSET.currentWeather.p) }
  public static func add(daily: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: daily, at: VTOFFSET.daily.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func add(sixHourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sixHourly, at: VTOFFSET.sixHourly.p) }
  public static func add(minutely15: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: minutely15, at: VTOFFSET.minutely15.p) }
  public static func endWeatherApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    model: com_openmeteo_WeatherModel = .undefined,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    currentWeather: com_openmeteo_CurrentWeather? = nil,
    dailyOffset daily: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset(),
    sixHourlyOffset sixHourly: Offset = Offset(),
    minutely15Offset minutely15: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_WeatherApi.startWeatherApi(&fbb)
    com_openmeteo_WeatherApi.add(latitude: latitude, &fbb)
    com_openmeteo_WeatherApi.add(longitude: longitude, &fbb)
    com_openmeteo_WeatherApi.add(elevation: elevation, &fbb)
    com_openmeteo_WeatherApi.add(model: model, &fbb)
    com_openmeteo_WeatherApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_WeatherApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_WeatherApi.add(timezone: timezone, &fbb)
    com_openmeteo_WeatherApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_WeatherApi.add(currentWeather: currentWeather, &fbb)
    com_openmeteo_WeatherApi.add(daily: daily, &fbb)
    com_openmeteo_WeatherApi.add(hourly: hourly, &fbb)
    com_openmeteo_WeatherApi.add(sixHourly: sixHourly, &fbb)
    com_openmeteo_WeatherApi.add(minutely15: minutely15, &fbb)
    return com_openmeteo_WeatherApi.endWeatherApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: com_openmeteo_WeatherModel.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentWeather.p, fieldName: "currentWeather", required: false, type: com_openmeteo_CurrentWeather.self)
    try _v.visit(field: VTOFFSET.daily.p, fieldName: "daily", required: false, type: ForwardOffset<com_openmeteo_WeatherDaily>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.sixHourly.p, fieldName: "sixHourly", required: false, type: ForwardOffset<com_openmeteo_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.minutely15.p, fieldName: "minutely15", required: false, type: ForwardOffset<com_openmeteo_WeatherHourly>.self)
    _v.finish()
  }
}

