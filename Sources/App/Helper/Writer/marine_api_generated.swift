// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum MarineModel: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case bestMatch = 0
  case gwam = 1
  case ewam = 2

  public static var max: MarineModel { return .ewam }
  public static var min: MarineModel { return .bestMatch }
}


public struct MarineHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case waveHeight = 4
    case wavePeriod = 6
    case waveDirection = 8
    case windWaveHeight = 10
    case windWavePeriod = 12
    case windWavePeakPeriod = 14
    case windWaveDirection = 16
    case swellWaveHeight = 18
    case swellWavePeriod = 20
    case swellWavePeakPeriod = 22
    case swellWaveDirection = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasWaveHeight: Bool { let o = _accessor.offset(VTOFFSET.waveHeight.v); return o == 0 ? false : true }
  public var waveHeightCount: Int32 { let o = _accessor.offset(VTOFFSET.waveHeight.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func waveHeight(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.waveHeight.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var waveHeight: [Float32] { return _accessor.getVector(at: VTOFFSET.waveHeight.v) ?? [] }
  public var hasWavePeriod: Bool { let o = _accessor.offset(VTOFFSET.wavePeriod.v); return o == 0 ? false : true }
  public var wavePeriodCount: Int32 { let o = _accessor.offset(VTOFFSET.wavePeriod.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func wavePeriod(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.wavePeriod.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var wavePeriod: [Float32] { return _accessor.getVector(at: VTOFFSET.wavePeriod.v) ?? [] }
  public var hasWaveDirection: Bool { let o = _accessor.offset(VTOFFSET.waveDirection.v); return o == 0 ? false : true }
  public var waveDirectionCount: Int32 { let o = _accessor.offset(VTOFFSET.waveDirection.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func waveDirection(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.waveDirection.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var waveDirection: [Float32] { return _accessor.getVector(at: VTOFFSET.waveDirection.v) ?? [] }
  public var hasWindWaveHeight: Bool { let o = _accessor.offset(VTOFFSET.windWaveHeight.v); return o == 0 ? false : true }
  public var windWaveHeightCount: Int32 { let o = _accessor.offset(VTOFFSET.windWaveHeight.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windWaveHeight(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windWaveHeight.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windWaveHeight: [Float32] { return _accessor.getVector(at: VTOFFSET.windWaveHeight.v) ?? [] }
  public var hasWindWavePeriod: Bool { let o = _accessor.offset(VTOFFSET.windWavePeriod.v); return o == 0 ? false : true }
  public var windWavePeriodCount: Int32 { let o = _accessor.offset(VTOFFSET.windWavePeriod.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windWavePeriod(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windWavePeriod.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windWavePeriod: [Float32] { return _accessor.getVector(at: VTOFFSET.windWavePeriod.v) ?? [] }
  public var hasWindWavePeakPeriod: Bool { let o = _accessor.offset(VTOFFSET.windWavePeakPeriod.v); return o == 0 ? false : true }
  public var windWavePeakPeriodCount: Int32 { let o = _accessor.offset(VTOFFSET.windWavePeakPeriod.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windWavePeakPeriod(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windWavePeakPeriod.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windWavePeakPeriod: [Float32] { return _accessor.getVector(at: VTOFFSET.windWavePeakPeriod.v) ?? [] }
  public var hasWindWaveDirection: Bool { let o = _accessor.offset(VTOFFSET.windWaveDirection.v); return o == 0 ? false : true }
  public var windWaveDirectionCount: Int32 { let o = _accessor.offset(VTOFFSET.windWaveDirection.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windWaveDirection(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windWaveDirection.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windWaveDirection: [Float32] { return _accessor.getVector(at: VTOFFSET.windWaveDirection.v) ?? [] }
  public var hasSwellWaveHeight: Bool { let o = _accessor.offset(VTOFFSET.swellWaveHeight.v); return o == 0 ? false : true }
  public var swellWaveHeightCount: Int32 { let o = _accessor.offset(VTOFFSET.swellWaveHeight.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func swellWaveHeight(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.swellWaveHeight.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var swellWaveHeight: [Float32] { return _accessor.getVector(at: VTOFFSET.swellWaveHeight.v) ?? [] }
  public var hasSwellWavePeriod: Bool { let o = _accessor.offset(VTOFFSET.swellWavePeriod.v); return o == 0 ? false : true }
  public var swellWavePeriodCount: Int32 { let o = _accessor.offset(VTOFFSET.swellWavePeriod.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func swellWavePeriod(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.swellWavePeriod.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var swellWavePeriod: [Float32] { return _accessor.getVector(at: VTOFFSET.swellWavePeriod.v) ?? [] }
  public var hasSwellWavePeakPeriod: Bool { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriod.v); return o == 0 ? false : true }
  public var swellWavePeakPeriodCount: Int32 { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriod.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func swellWavePeakPeriod(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriod.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var swellWavePeakPeriod: [Float32] { return _accessor.getVector(at: VTOFFSET.swellWavePeakPeriod.v) ?? [] }
  public var hasSwellWaveDirection: Bool { let o = _accessor.offset(VTOFFSET.swellWaveDirection.v); return o == 0 ? false : true }
  public var swellWaveDirectionCount: Int32 { let o = _accessor.offset(VTOFFSET.swellWaveDirection.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func swellWaveDirection(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.swellWaveDirection.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var swellWaveDirection: [Float32] { return _accessor.getVector(at: VTOFFSET.swellWaveDirection.v) ?? [] }
  public static func startMarineHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func addVectorOf(waveHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveHeight, at: VTOFFSET.waveHeight.p) }
  public static func addVectorOf(wavePeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wavePeriod, at: VTOFFSET.wavePeriod.p) }
  public static func addVectorOf(waveDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveDirection, at: VTOFFSET.waveDirection.p) }
  public static func addVectorOf(windWaveHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveHeight, at: VTOFFSET.windWaveHeight.p) }
  public static func addVectorOf(windWavePeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeriod, at: VTOFFSET.windWavePeriod.p) }
  public static func addVectorOf(windWavePeakPeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeakPeriod, at: VTOFFSET.windWavePeakPeriod.p) }
  public static func addVectorOf(windWaveDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveDirection, at: VTOFFSET.windWaveDirection.p) }
  public static func addVectorOf(swellWaveHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveHeight, at: VTOFFSET.swellWaveHeight.p) }
  public static func addVectorOf(swellWavePeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeriod, at: VTOFFSET.swellWavePeriod.p) }
  public static func addVectorOf(swellWavePeakPeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeakPeriod, at: VTOFFSET.swellWavePeakPeriod.p) }
  public static func addVectorOf(swellWaveDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveDirection, at: VTOFFSET.swellWaveDirection.p) }
  public static func endMarineHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineHourly(
    _ fbb: inout FlatBufferBuilder,
    waveHeightVectorOffset waveHeight: Offset = Offset(),
    wavePeriodVectorOffset wavePeriod: Offset = Offset(),
    waveDirectionVectorOffset waveDirection: Offset = Offset(),
    windWaveHeightVectorOffset windWaveHeight: Offset = Offset(),
    windWavePeriodVectorOffset windWavePeriod: Offset = Offset(),
    windWavePeakPeriodVectorOffset windWavePeakPeriod: Offset = Offset(),
    windWaveDirectionVectorOffset windWaveDirection: Offset = Offset(),
    swellWaveHeightVectorOffset swellWaveHeight: Offset = Offset(),
    swellWavePeriodVectorOffset swellWavePeriod: Offset = Offset(),
    swellWavePeakPeriodVectorOffset swellWavePeakPeriod: Offset = Offset(),
    swellWaveDirectionVectorOffset swellWaveDirection: Offset = Offset()
  ) -> Offset {
    let __start = MarineHourly.startMarineHourly(&fbb)
    MarineHourly.addVectorOf(waveHeight: waveHeight, &fbb)
    MarineHourly.addVectorOf(wavePeriod: wavePeriod, &fbb)
    MarineHourly.addVectorOf(waveDirection: waveDirection, &fbb)
    MarineHourly.addVectorOf(windWaveHeight: windWaveHeight, &fbb)
    MarineHourly.addVectorOf(windWavePeriod: windWavePeriod, &fbb)
    MarineHourly.addVectorOf(windWavePeakPeriod: windWavePeakPeriod, &fbb)
    MarineHourly.addVectorOf(windWaveDirection: windWaveDirection, &fbb)
    MarineHourly.addVectorOf(swellWaveHeight: swellWaveHeight, &fbb)
    MarineHourly.addVectorOf(swellWavePeriod: swellWavePeriod, &fbb)
    MarineHourly.addVectorOf(swellWavePeakPeriod: swellWavePeakPeriod, &fbb)
    MarineHourly.addVectorOf(swellWaveDirection: swellWaveDirection, &fbb)
    return MarineHourly.endMarineHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.waveHeight.p, fieldName: "waveHeight", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.wavePeriod.p, fieldName: "wavePeriod", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.waveDirection.p, fieldName: "waveDirection", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windWaveHeight.p, fieldName: "windWaveHeight", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windWavePeriod.p, fieldName: "windWavePeriod", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windWavePeakPeriod.p, fieldName: "windWavePeakPeriod", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windWaveDirection.p, fieldName: "windWaveDirection", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.swellWaveHeight.p, fieldName: "swellWaveHeight", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.swellWavePeriod.p, fieldName: "swellWavePeriod", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.swellWavePeakPeriod.p, fieldName: "swellWavePeakPeriod", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.swellWaveDirection.p, fieldName: "swellWaveDirection", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct MarineHourlyUnits: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case waveHeight = 4
    case wavePeriod = 6
    case waveDirection = 8
    case windWaveHeight = 10
    case windWavePeriod = 12
    case windWavePeakPeriod = 14
    case windWaveDirection = 16
    case swellWaveHeight = 18
    case swellWavePeriod = 20
    case swellWavePeakPeriod = 22
    case swellWaveDirection = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var waveHeight: SiUnit { let o = _accessor.offset(VTOFFSET.waveHeight.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var wavePeriod: SiUnit { let o = _accessor.offset(VTOFFSET.wavePeriod.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var waveDirection: SiUnit { let o = _accessor.offset(VTOFFSET.waveDirection.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windWaveHeight: SiUnit { let o = _accessor.offset(VTOFFSET.windWaveHeight.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windWavePeriod: SiUnit { let o = _accessor.offset(VTOFFSET.windWavePeriod.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windWavePeakPeriod: SiUnit { let o = _accessor.offset(VTOFFSET.windWavePeakPeriod.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windWaveDirection: SiUnit { let o = _accessor.offset(VTOFFSET.windWaveDirection.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var swellWaveHeight: SiUnit { let o = _accessor.offset(VTOFFSET.swellWaveHeight.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var swellWavePeriod: SiUnit { let o = _accessor.offset(VTOFFSET.swellWavePeriod.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var swellWavePeakPeriod: SiUnit { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriod.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var swellWaveDirection: SiUnit { let o = _accessor.offset(VTOFFSET.swellWaveDirection.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public static func startMarineHourlyUnits(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(waveHeight: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: waveHeight.rawValue, def: 0, at: VTOFFSET.waveHeight.p) }
  public static func add(wavePeriod: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: wavePeriod.rawValue, def: 0, at: VTOFFSET.wavePeriod.p) }
  public static func add(waveDirection: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: waveDirection.rawValue, def: 0, at: VTOFFSET.waveDirection.p) }
  public static func add(windWaveHeight: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windWaveHeight.rawValue, def: 0, at: VTOFFSET.windWaveHeight.p) }
  public static func add(windWavePeriod: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windWavePeriod.rawValue, def: 0, at: VTOFFSET.windWavePeriod.p) }
  public static func add(windWavePeakPeriod: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windWavePeakPeriod.rawValue, def: 0, at: VTOFFSET.windWavePeakPeriod.p) }
  public static func add(windWaveDirection: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windWaveDirection.rawValue, def: 0, at: VTOFFSET.windWaveDirection.p) }
  public static func add(swellWaveHeight: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swellWaveHeight.rawValue, def: 0, at: VTOFFSET.swellWaveHeight.p) }
  public static func add(swellWavePeriod: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swellWavePeriod.rawValue, def: 0, at: VTOFFSET.swellWavePeriod.p) }
  public static func add(swellWavePeakPeriod: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swellWavePeakPeriod.rawValue, def: 0, at: VTOFFSET.swellWavePeakPeriod.p) }
  public static func add(swellWaveDirection: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swellWaveDirection.rawValue, def: 0, at: VTOFFSET.swellWaveDirection.p) }
  public static func endMarineHourlyUnits(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineHourlyUnits(
    _ fbb: inout FlatBufferBuilder,
    waveHeight: SiUnit = .undefined,
    wavePeriod: SiUnit = .undefined,
    waveDirection: SiUnit = .undefined,
    windWaveHeight: SiUnit = .undefined,
    windWavePeriod: SiUnit = .undefined,
    windWavePeakPeriod: SiUnit = .undefined,
    windWaveDirection: SiUnit = .undefined,
    swellWaveHeight: SiUnit = .undefined,
    swellWavePeriod: SiUnit = .undefined,
    swellWavePeakPeriod: SiUnit = .undefined,
    swellWaveDirection: SiUnit = .undefined
  ) -> Offset {
    let __start = MarineHourlyUnits.startMarineHourlyUnits(&fbb)
    MarineHourlyUnits.add(waveHeight: waveHeight, &fbb)
    MarineHourlyUnits.add(wavePeriod: wavePeriod, &fbb)
    MarineHourlyUnits.add(waveDirection: waveDirection, &fbb)
    MarineHourlyUnits.add(windWaveHeight: windWaveHeight, &fbb)
    MarineHourlyUnits.add(windWavePeriod: windWavePeriod, &fbb)
    MarineHourlyUnits.add(windWavePeakPeriod: windWavePeakPeriod, &fbb)
    MarineHourlyUnits.add(windWaveDirection: windWaveDirection, &fbb)
    MarineHourlyUnits.add(swellWaveHeight: swellWaveHeight, &fbb)
    MarineHourlyUnits.add(swellWavePeriod: swellWavePeriod, &fbb)
    MarineHourlyUnits.add(swellWavePeakPeriod: swellWavePeakPeriod, &fbb)
    MarineHourlyUnits.add(swellWaveDirection: swellWaveDirection, &fbb)
    return MarineHourlyUnits.endMarineHourlyUnits(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.waveHeight.p, fieldName: "waveHeight", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.wavePeriod.p, fieldName: "wavePeriod", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.waveDirection.p, fieldName: "waveDirection", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windWaveHeight.p, fieldName: "windWaveHeight", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windWavePeriod.p, fieldName: "windWavePeriod", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windWavePeakPeriod.p, fieldName: "windWavePeakPeriod", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windWaveDirection.p, fieldName: "windWaveDirection", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.swellWaveHeight.p, fieldName: "swellWaveHeight", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.swellWavePeriod.p, fieldName: "swellWavePeriod", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.swellWavePeakPeriod.p, fieldName: "swellWavePeakPeriod", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.swellWaveDirection.p, fieldName: "swellWaveDirection", required: false, type: SiUnit.self)
    _v.finish()
  }
}

public struct MarineDaily: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case waveHeightMax = 4
    case windWaveHeightMax = 6
    case swellWaveHeightMax = 8
    case waveDirectionDominant = 10
    case windWaveDirectionDominant = 12
    case swellWaveDirectionDominant = 14
    case wavePeriodMax = 16
    case windWavePeriodMax = 18
    case windWavePeakPeriodMax = 20
    case swellWavePeriodMax = 22
    case swellWavePeakPeriodMax = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasWaveHeightMax: Bool { let o = _accessor.offset(VTOFFSET.waveHeightMax.v); return o == 0 ? false : true }
  public var waveHeightMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.waveHeightMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func waveHeightMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.waveHeightMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var waveHeightMax: [Float32] { return _accessor.getVector(at: VTOFFSET.waveHeightMax.v) ?? [] }
  public var hasWindWaveHeightMax: Bool { let o = _accessor.offset(VTOFFSET.windWaveHeightMax.v); return o == 0 ? false : true }
  public var windWaveHeightMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.windWaveHeightMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windWaveHeightMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windWaveHeightMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windWaveHeightMax: [Float32] { return _accessor.getVector(at: VTOFFSET.windWaveHeightMax.v) ?? [] }
  public var hasSwellWaveHeightMax: Bool { let o = _accessor.offset(VTOFFSET.swellWaveHeightMax.v); return o == 0 ? false : true }
  public var swellWaveHeightMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.swellWaveHeightMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func swellWaveHeightMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.swellWaveHeightMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var swellWaveHeightMax: [Float32] { return _accessor.getVector(at: VTOFFSET.swellWaveHeightMax.v) ?? [] }
  public var hasWaveDirectionDominant: Bool { let o = _accessor.offset(VTOFFSET.waveDirectionDominant.v); return o == 0 ? false : true }
  public var waveDirectionDominantCount: Int32 { let o = _accessor.offset(VTOFFSET.waveDirectionDominant.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func waveDirectionDominant(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.waveDirectionDominant.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var waveDirectionDominant: [Float32] { return _accessor.getVector(at: VTOFFSET.waveDirectionDominant.v) ?? [] }
  public var hasWindWaveDirectionDominant: Bool { let o = _accessor.offset(VTOFFSET.windWaveDirectionDominant.v); return o == 0 ? false : true }
  public var windWaveDirectionDominantCount: Int32 { let o = _accessor.offset(VTOFFSET.windWaveDirectionDominant.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windWaveDirectionDominant(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windWaveDirectionDominant.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windWaveDirectionDominant: [Float32] { return _accessor.getVector(at: VTOFFSET.windWaveDirectionDominant.v) ?? [] }
  public var hasSwellWaveDirectionDominant: Bool { let o = _accessor.offset(VTOFFSET.swellWaveDirectionDominant.v); return o == 0 ? false : true }
  public var swellWaveDirectionDominantCount: Int32 { let o = _accessor.offset(VTOFFSET.swellWaveDirectionDominant.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func swellWaveDirectionDominant(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.swellWaveDirectionDominant.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var swellWaveDirectionDominant: [Float32] { return _accessor.getVector(at: VTOFFSET.swellWaveDirectionDominant.v) ?? [] }
  public var hasWavePeriodMax: Bool { let o = _accessor.offset(VTOFFSET.wavePeriodMax.v); return o == 0 ? false : true }
  public var wavePeriodMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.wavePeriodMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func wavePeriodMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.wavePeriodMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var wavePeriodMax: [Float32] { return _accessor.getVector(at: VTOFFSET.wavePeriodMax.v) ?? [] }
  public var hasWindWavePeriodMax: Bool { let o = _accessor.offset(VTOFFSET.windWavePeriodMax.v); return o == 0 ? false : true }
  public var windWavePeriodMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.windWavePeriodMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windWavePeriodMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windWavePeriodMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windWavePeriodMax: [Float32] { return _accessor.getVector(at: VTOFFSET.windWavePeriodMax.v) ?? [] }
  public var hasWindWavePeakPeriodMax: Bool { let o = _accessor.offset(VTOFFSET.windWavePeakPeriodMax.v); return o == 0 ? false : true }
  public var windWavePeakPeriodMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.windWavePeakPeriodMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windWavePeakPeriodMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.windWavePeakPeriodMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var windWavePeakPeriodMax: [Float32] { return _accessor.getVector(at: VTOFFSET.windWavePeakPeriodMax.v) ?? [] }
  public var hasSwellWavePeriodMax: Bool { let o = _accessor.offset(VTOFFSET.swellWavePeriodMax.v); return o == 0 ? false : true }
  public var swellWavePeriodMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.swellWavePeriodMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func swellWavePeriodMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.swellWavePeriodMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var swellWavePeriodMax: [Float32] { return _accessor.getVector(at: VTOFFSET.swellWavePeriodMax.v) ?? [] }
  public var hasSwellWavePeakPeriodMax: Bool { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriodMax.v); return o == 0 ? false : true }
  public var swellWavePeakPeriodMaxCount: Int32 { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriodMax.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func swellWavePeakPeriodMax(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriodMax.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var swellWavePeakPeriodMax: [Float32] { return _accessor.getVector(at: VTOFFSET.swellWavePeakPeriodMax.v) ?? [] }
  public static func startMarineDaily(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func addVectorOf(waveHeightMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveHeightMax, at: VTOFFSET.waveHeightMax.p) }
  public static func addVectorOf(windWaveHeightMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveHeightMax, at: VTOFFSET.windWaveHeightMax.p) }
  public static func addVectorOf(swellWaveHeightMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveHeightMax, at: VTOFFSET.swellWaveHeightMax.p) }
  public static func addVectorOf(waveDirectionDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveDirectionDominant, at: VTOFFSET.waveDirectionDominant.p) }
  public static func addVectorOf(windWaveDirectionDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveDirectionDominant, at: VTOFFSET.windWaveDirectionDominant.p) }
  public static func addVectorOf(swellWaveDirectionDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveDirectionDominant, at: VTOFFSET.swellWaveDirectionDominant.p) }
  public static func addVectorOf(wavePeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wavePeriodMax, at: VTOFFSET.wavePeriodMax.p) }
  public static func addVectorOf(windWavePeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeriodMax, at: VTOFFSET.windWavePeriodMax.p) }
  public static func addVectorOf(windWavePeakPeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeakPeriodMax, at: VTOFFSET.windWavePeakPeriodMax.p) }
  public static func addVectorOf(swellWavePeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeriodMax, at: VTOFFSET.swellWavePeriodMax.p) }
  public static func addVectorOf(swellWavePeakPeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeakPeriodMax, at: VTOFFSET.swellWavePeakPeriodMax.p) }
  public static func endMarineDaily(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineDaily(
    _ fbb: inout FlatBufferBuilder,
    waveHeightMaxVectorOffset waveHeightMax: Offset = Offset(),
    windWaveHeightMaxVectorOffset windWaveHeightMax: Offset = Offset(),
    swellWaveHeightMaxVectorOffset swellWaveHeightMax: Offset = Offset(),
    waveDirectionDominantVectorOffset waveDirectionDominant: Offset = Offset(),
    windWaveDirectionDominantVectorOffset windWaveDirectionDominant: Offset = Offset(),
    swellWaveDirectionDominantVectorOffset swellWaveDirectionDominant: Offset = Offset(),
    wavePeriodMaxVectorOffset wavePeriodMax: Offset = Offset(),
    windWavePeriodMaxVectorOffset windWavePeriodMax: Offset = Offset(),
    windWavePeakPeriodMaxVectorOffset windWavePeakPeriodMax: Offset = Offset(),
    swellWavePeriodMaxVectorOffset swellWavePeriodMax: Offset = Offset(),
    swellWavePeakPeriodMaxVectorOffset swellWavePeakPeriodMax: Offset = Offset()
  ) -> Offset {
    let __start = MarineDaily.startMarineDaily(&fbb)
    MarineDaily.addVectorOf(waveHeightMax: waveHeightMax, &fbb)
    MarineDaily.addVectorOf(windWaveHeightMax: windWaveHeightMax, &fbb)
    MarineDaily.addVectorOf(swellWaveHeightMax: swellWaveHeightMax, &fbb)
    MarineDaily.addVectorOf(waveDirectionDominant: waveDirectionDominant, &fbb)
    MarineDaily.addVectorOf(windWaveDirectionDominant: windWaveDirectionDominant, &fbb)
    MarineDaily.addVectorOf(swellWaveDirectionDominant: swellWaveDirectionDominant, &fbb)
    MarineDaily.addVectorOf(wavePeriodMax: wavePeriodMax, &fbb)
    MarineDaily.addVectorOf(windWavePeriodMax: windWavePeriodMax, &fbb)
    MarineDaily.addVectorOf(windWavePeakPeriodMax: windWavePeakPeriodMax, &fbb)
    MarineDaily.addVectorOf(swellWavePeriodMax: swellWavePeriodMax, &fbb)
    MarineDaily.addVectorOf(swellWavePeakPeriodMax: swellWavePeakPeriodMax, &fbb)
    return MarineDaily.endMarineDaily(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.waveHeightMax.p, fieldName: "waveHeightMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windWaveHeightMax.p, fieldName: "windWaveHeightMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.swellWaveHeightMax.p, fieldName: "swellWaveHeightMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.waveDirectionDominant.p, fieldName: "waveDirectionDominant", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windWaveDirectionDominant.p, fieldName: "windWaveDirectionDominant", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.swellWaveDirectionDominant.p, fieldName: "swellWaveDirectionDominant", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.wavePeriodMax.p, fieldName: "wavePeriodMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windWavePeriodMax.p, fieldName: "windWavePeriodMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.windWavePeakPeriodMax.p, fieldName: "windWavePeakPeriodMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.swellWavePeriodMax.p, fieldName: "swellWavePeriodMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.swellWavePeakPeriodMax.p, fieldName: "swellWavePeakPeriodMax", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct MarineDailyUnits: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case waveHeightMax = 4
    case windWaveHeightMax = 6
    case swellWaveHeightMax = 8
    case waveDirectionDominant = 10
    case windWaveDirectionDominant = 12
    case swellWaveDirectionDominant = 14
    case wavePeriodMax = 16
    case windWavePeriodMax = 18
    case windWavePeakPeriodMax = 20
    case swellWavePeriodMax = 22
    case swellWavePeakPeriodMax = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var waveHeightMax: SiUnit { let o = _accessor.offset(VTOFFSET.waveHeightMax.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windWaveHeightMax: SiUnit { let o = _accessor.offset(VTOFFSET.windWaveHeightMax.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var swellWaveHeightMax: SiUnit { let o = _accessor.offset(VTOFFSET.swellWaveHeightMax.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var waveDirectionDominant: SiUnit { let o = _accessor.offset(VTOFFSET.waveDirectionDominant.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windWaveDirectionDominant: SiUnit { let o = _accessor.offset(VTOFFSET.windWaveDirectionDominant.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var swellWaveDirectionDominant: SiUnit { let o = _accessor.offset(VTOFFSET.swellWaveDirectionDominant.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var wavePeriodMax: SiUnit { let o = _accessor.offset(VTOFFSET.wavePeriodMax.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windWavePeriodMax: SiUnit { let o = _accessor.offset(VTOFFSET.windWavePeriodMax.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var windWavePeakPeriodMax: SiUnit { let o = _accessor.offset(VTOFFSET.windWavePeakPeriodMax.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var swellWavePeriodMax: SiUnit { let o = _accessor.offset(VTOFFSET.swellWavePeriodMax.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var swellWavePeakPeriodMax: SiUnit { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriodMax.v); return o == 0 ? .undefined : SiUnit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public static func startMarineDailyUnits(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(waveHeightMax: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: waveHeightMax.rawValue, def: 0, at: VTOFFSET.waveHeightMax.p) }
  public static func add(windWaveHeightMax: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windWaveHeightMax.rawValue, def: 0, at: VTOFFSET.windWaveHeightMax.p) }
  public static func add(swellWaveHeightMax: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swellWaveHeightMax.rawValue, def: 0, at: VTOFFSET.swellWaveHeightMax.p) }
  public static func add(waveDirectionDominant: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: waveDirectionDominant.rawValue, def: 0, at: VTOFFSET.waveDirectionDominant.p) }
  public static func add(windWaveDirectionDominant: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windWaveDirectionDominant.rawValue, def: 0, at: VTOFFSET.windWaveDirectionDominant.p) }
  public static func add(swellWaveDirectionDominant: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swellWaveDirectionDominant.rawValue, def: 0, at: VTOFFSET.swellWaveDirectionDominant.p) }
  public static func add(wavePeriodMax: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: wavePeriodMax.rawValue, def: 0, at: VTOFFSET.wavePeriodMax.p) }
  public static func add(windWavePeriodMax: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windWavePeriodMax.rawValue, def: 0, at: VTOFFSET.windWavePeriodMax.p) }
  public static func add(windWavePeakPeriodMax: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: windWavePeakPeriodMax.rawValue, def: 0, at: VTOFFSET.windWavePeakPeriodMax.p) }
  public static func add(swellWavePeriodMax: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swellWavePeriodMax.rawValue, def: 0, at: VTOFFSET.swellWavePeriodMax.p) }
  public static func add(swellWavePeakPeriodMax: SiUnit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: swellWavePeakPeriodMax.rawValue, def: 0, at: VTOFFSET.swellWavePeakPeriodMax.p) }
  public static func endMarineDailyUnits(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineDailyUnits(
    _ fbb: inout FlatBufferBuilder,
    waveHeightMax: SiUnit = .undefined,
    windWaveHeightMax: SiUnit = .undefined,
    swellWaveHeightMax: SiUnit = .undefined,
    waveDirectionDominant: SiUnit = .undefined,
    windWaveDirectionDominant: SiUnit = .undefined,
    swellWaveDirectionDominant: SiUnit = .undefined,
    wavePeriodMax: SiUnit = .undefined,
    windWavePeriodMax: SiUnit = .undefined,
    windWavePeakPeriodMax: SiUnit = .undefined,
    swellWavePeriodMax: SiUnit = .undefined,
    swellWavePeakPeriodMax: SiUnit = .undefined
  ) -> Offset {
    let __start = MarineDailyUnits.startMarineDailyUnits(&fbb)
    MarineDailyUnits.add(waveHeightMax: waveHeightMax, &fbb)
    MarineDailyUnits.add(windWaveHeightMax: windWaveHeightMax, &fbb)
    MarineDailyUnits.add(swellWaveHeightMax: swellWaveHeightMax, &fbb)
    MarineDailyUnits.add(waveDirectionDominant: waveDirectionDominant, &fbb)
    MarineDailyUnits.add(windWaveDirectionDominant: windWaveDirectionDominant, &fbb)
    MarineDailyUnits.add(swellWaveDirectionDominant: swellWaveDirectionDominant, &fbb)
    MarineDailyUnits.add(wavePeriodMax: wavePeriodMax, &fbb)
    MarineDailyUnits.add(windWavePeriodMax: windWavePeriodMax, &fbb)
    MarineDailyUnits.add(windWavePeakPeriodMax: windWavePeakPeriodMax, &fbb)
    MarineDailyUnits.add(swellWavePeriodMax: swellWavePeriodMax, &fbb)
    MarineDailyUnits.add(swellWavePeakPeriodMax: swellWavePeakPeriodMax, &fbb)
    return MarineDailyUnits.endMarineDailyUnits(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.waveHeightMax.p, fieldName: "waveHeightMax", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windWaveHeightMax.p, fieldName: "windWaveHeightMax", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.swellWaveHeightMax.p, fieldName: "swellWaveHeightMax", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.waveDirectionDominant.p, fieldName: "waveDirectionDominant", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windWaveDirectionDominant.p, fieldName: "windWaveDirectionDominant", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.swellWaveDirectionDominant.p, fieldName: "swellWaveDirectionDominant", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.wavePeriodMax.p, fieldName: "wavePeriodMax", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windWavePeriodMax.p, fieldName: "windWavePeriodMax", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.windWavePeakPeriodMax.p, fieldName: "windWavePeakPeriodMax", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.swellWavePeriodMax.p, fieldName: "swellWavePeriodMax", required: false, type: SiUnit.self)
    try _v.visit(field: VTOFFSET.swellWavePeakPeriodMax.p, fieldName: "swellWavePeakPeriodMax", required: false, type: SiUnit.self)
    _v.finish()
  }
}

public struct MarineApiResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case generationtimeMs = 12
    case utcOffsetSeconds = 14
    case timezone = 16
    case timezoneAbbreviation = 18
    case timeStart = 20
    case daily = 22
    case dailyUnits = 24
    case hourly = 26
    case hourlyUnits = 28
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: MarineModel { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? .bestMatch : MarineModel(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .bestMatch }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var timeStart: Int64 { let o = _accessor.offset(VTOFFSET.timeStart.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var daily: MarineDaily? { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? nil : MarineDaily(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dailyUnits: MarineDailyUnits? { let o = _accessor.offset(VTOFFSET.dailyUnits.v); return o == 0 ? nil : MarineDailyUnits(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hourly: MarineHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : MarineHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hourlyUnits: MarineHourlyUnits? { let o = _accessor.offset(VTOFFSET.hourlyUnits.v); return o == 0 ? nil : MarineHourlyUnits(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startMarineApiResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 13) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: MarineModel, _ fbb: inout FlatBufferBuilder) { fbb.add(element: model.rawValue, def: 0, at: VTOFFSET.model.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(timeStart: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timeStart, def: 0, at: VTOFFSET.timeStart.p) }
  public static func add(daily: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: daily, at: VTOFFSET.daily.p) }
  public static func add(dailyUnits: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dailyUnits, at: VTOFFSET.dailyUnits.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func add(hourlyUnits: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourlyUnits, at: VTOFFSET.hourlyUnits.p) }
  public static func endMarineApiResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineApiResponse(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    model: MarineModel = .bestMatch,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    timeStart: Int64 = 0,
    dailyOffset daily: Offset = Offset(),
    dailyUnitsOffset dailyUnits: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset(),
    hourlyUnitsOffset hourlyUnits: Offset = Offset()
  ) -> Offset {
    let __start = MarineApiResponse.startMarineApiResponse(&fbb)
    MarineApiResponse.add(latitude: latitude, &fbb)
    MarineApiResponse.add(longitude: longitude, &fbb)
    MarineApiResponse.add(elevation: elevation, &fbb)
    MarineApiResponse.add(model: model, &fbb)
    MarineApiResponse.add(generationtimeMs: generationtimeMs, &fbb)
    MarineApiResponse.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    MarineApiResponse.add(timezone: timezone, &fbb)
    MarineApiResponse.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    MarineApiResponse.add(timeStart: timeStart, &fbb)
    MarineApiResponse.add(daily: daily, &fbb)
    MarineApiResponse.add(dailyUnits: dailyUnits, &fbb)
    MarineApiResponse.add(hourly: hourly, &fbb)
    MarineApiResponse.add(hourlyUnits: hourlyUnits, &fbb)
    return MarineApiResponse.endMarineApiResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: MarineModel.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timeStart.p, fieldName: "timeStart", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.daily.p, fieldName: "daily", required: false, type: ForwardOffset<MarineDaily>.self)
    try _v.visit(field: VTOFFSET.dailyUnits.p, fieldName: "dailyUnits", required: false, type: ForwardOffset<MarineDailyUnits>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<MarineHourly>.self)
    try _v.visit(field: VTOFFSET.hourlyUnits.p, fieldName: "hourlyUnits", required: false, type: ForwardOffset<MarineHourlyUnits>.self)
    _v.finish()
  }
}

