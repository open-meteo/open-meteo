// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum com_openmeteo_api_result_Unit: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case celsius = 1
  case fahrenheit = 2
  case kelvin = 3
  case kmh = 4
  case mph = 5
  case knots = 6
  case ms = 7
  case msNotUnitConverted = 8
  case millimeter = 9
  case centimeter = 10
  case inch = 11
  case feet = 12
  case meter = 13
  case gpm = 14
  case percent = 15
  case hectoPascal = 16
  case pascal = 17
  case degreeDirection = 18
  case wmoCode = 19
  case wattPerSquareMeter = 20
  case kilogramPerSquareMeter = 21
  case gramPerKilogram = 22
  case perSecond = 23
  case second = 24
  case qubicMeterPerQubicMeter = 25
  case qubicMeterPerSecond = 26
  case kiloPascal = 27
  case megaJoulesPerSquareMeter = 28
  case joulesPerKilogram = 29
  case hours = 30
  case iso8601 = 31
  case unixtime = 32
  case microgramsPerQuibicMeter = 33
  case grainsPerQuibicMeter = 34
  case dimensionless = 35
  case dimensionlessInteger = 36
  case eaqi = 37
  case usaqi = 38
  case gddCelsius = 39
  case fraction = 40

  public static var max: com_openmeteo_api_result_Unit { return .fraction }
  public static var min: com_openmeteo_api_result_Unit { return .celsius }
}


public enum com_openmeteo_api_result_Aggregation: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case undefined = 0
  case minimum = 1
  case maximum = 2
  case mean = 3
  case median = 4
  case p10 = 5
  case p25 = 6
  case p75 = 7
  case p90 = 8
  case dominant = 9
  case sum = 10

  public static var max: com_openmeteo_api_result_Aggregation { return .sum }
  public static var min: com_openmeteo_api_result_Aggregation { return .undefined }
}


public enum com_openmeteo_api_result_VariableType: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case undefined = 0
  case temperature = 1
  case cloudcover = 2
  case cloudcoverLow = 3
  case cloudcoverMid = 4
  case cloudcoverHigh = 5
  case pressureMsl = 6
  case relativehumidity = 7
  case precipitation = 8
  case precipitationProbability = 9
  case weathercode = 10
  case soilTemperature = 11
  case soilMoisture = 12
  case snowDepth = 13
  case snowHeight = 14
  case sensibleHeatflux = 15
  case latentHeatflux = 16
  case showers = 17
  case rain = 18
  case windgusts = 19
  case freezinglevelHeight = 20
  case dewpoint = 21
  case diffuseRadiation = 22
  case directRadiation = 23
  case apparentTemperature = 24
  case windspeed = 25
  case winddirection = 26
  case directNormalIrradiance = 27
  case evapotranspiration = 28
  case et0FaoEvapotranspiration = 29
  case vaporPressureDeficit = 30
  case shortwaveRadiation = 31
  case snowfall = 32
  case surfacePressure = 33
  case terrestrialRadiation = 34
  case terrestrialRadiationInstant = 35
  case shortwaveRadiationInstant = 36
  case diffuseRadiationInstant = 37
  case directRadiationInstant = 38
  case directNormalIrradianceInstant = 39
  case visibility = 40
  case cape = 41
  case uvIndex = 42
  case uvIndexClearSky = 43
  case isDay = 44
  case growingDegreeDays = 45
  case leafWetnessProbability = 46
  case soilMoistureIndex = 47
  case geopotentialHeight = 48
  case verticalVelocity = 49
  case daylightDuration = 50
  case sunrise = 51
  case sunset = 52
  case pm10 = 53
  case pm25 = 54
  case dust = 55
  case aerosolOpticalDepth = 56
  case carbonMonoxide = 57
  case nitrogenDioxide = 58
  case ammonia = 59
  case ozone = 60
  case sulphurDioxide = 61
  case alderPollen = 62
  case birchPollen = 63
  case grassPollen = 64
  case mugwortPollen = 65
  case olivePollen = 66
  case ragweedPollen = 67
  case waveHeight = 68
  case wavePeriod = 69
  case waveDirection = 70
  case windWaveHeight = 71
  case windWavePeriod = 72
  case windWavePeakPeriod = 73
  case windWaveDirection = 74
  case swellWaveHeight = 75
  case swellWavePeriod = 76
  case swellWavePeakPeriod = 77
  case swellWaveDirection = 78
  case riverDischarge = 79

  public static var max: com_openmeteo_api_result_VariableType { return .riverDischarge }
  public static var min: com_openmeteo_api_result_VariableType { return .undefined }
}


public enum com_openmeteo_api_result_Model: Int8, Enum, Verifiable {
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case undefined = 0
  case bestMatch = 1
  case gfsSeamless = 2
  case gfsGlobal = 3
  case gfsHrrr = 4
  case meteofranceSeamless = 5
  case meteofranceArpegeWorld = 6
  case meteofranceArpegeEurope = 7
  case meteofranceAromeFrance = 8
  case meteofranceAromeFranceHd = 9
  case jmaSeamless = 10
  case jmaMsm = 11
  case jmsGsm = 12
  case jmaGsm = 13
  case gemSeamless = 14
  case gemGlobal = 15
  case gemRegional = 16
  case gemHrdpsContinental = 17
  case iconSeamless = 18
  case iconGlobal = 19
  case iconEu = 20
  case iconD2 = 21
  case ecmwfIfs04 = 22
  case metnoNordic = 23
  case camsGlobal = 24
  case camsEurope = 25
  case cmccCm2Vhr4 = 26
  case fgoalsF3HHighressst = 27
  case fgoalsF3H = 28
  case hiramSitHr = 29
  case mriAgcm32S = 30
  case ecEarth3pHr = 31
  case mpiEsm12Xr = 32
  case nicam168s = 33
  case era5 = 34
  case cerra = 35
  case era5Land = 36
  case ecmwfIfs = 37
  case glofasSeamlessV3 = 38
  case glofasForecastV3 = 39
  case glofasConsolidatedV3 = 40
  case glofasSeamlessV4 = 41
  case glofasForecastV4 = 42
  case glofasConsolidatedV4 = 43
  case gwam = 44
  case ewam = 45
  case noaaCfs = 46

  public static var max: com_openmeteo_api_result_Model { return .noaaCfs }
  public static var min: com_openmeteo_api_result_Model { return .undefined }
}


public struct com_openmeteo_api_result_CurrentWeather: NativeStruct, Verifiable, FlatbuffersInitializable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }

  private var _time: Int64
  private var _temperature: Float32
  private var _weathercode: Float32
  private var _windspeed: Float32
  private var _winddirection: Float32
  private var _isDay: Float32
  private let padding0__: UInt32 = 0

  public init(_ bb: ByteBuffer, o: Int32) {
    let _accessor = Struct(bb: bb, position: o)
    _time = _accessor.readBuffer(of: Int64.self, at: 0)
    _temperature = _accessor.readBuffer(of: Float32.self, at: 8)
    _weathercode = _accessor.readBuffer(of: Float32.self, at: 12)
    _windspeed = _accessor.readBuffer(of: Float32.self, at: 16)
    _winddirection = _accessor.readBuffer(of: Float32.self, at: 20)
    _isDay = _accessor.readBuffer(of: Float32.self, at: 24)
  }

  public init(time: Int64, temperature: Float32, weathercode: Float32, windspeed: Float32, winddirection: Float32, isDay: Float32) {
    _time = time
    _temperature = temperature
    _weathercode = weathercode
    _windspeed = windspeed
    _winddirection = winddirection
    _isDay = isDay
  }

  public init() {
    _time = 0
    _temperature = 0.0
    _weathercode = 0.0
    _windspeed = 0.0
    _winddirection = 0.0
    _isDay = 0.0
  }

  public var time: Int64 { _time }
  public var temperature: Float32 { _temperature }
  public var weathercode: Float32 { _weathercode }
  public var windspeed: Float32 { _windspeed }
  public var winddirection: Float32 { _winddirection }
  public var isDay: Float32 { _isDay }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    try verifier.inBuffer(position: position, of: com_openmeteo_api_result_CurrentWeather.self)
  }
}

public struct com_openmeteo_api_result_CurrentWeather_Mutable: FlatBufferObject {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Struct

  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Struct(bb: bb, position: o) }

  public var time: Int64 { return _accessor.readBuffer(of: Int64.self, at: 0) }
  public var temperature: Float32 { return _accessor.readBuffer(of: Float32.self, at: 8) }
  public var weathercode: Float32 { return _accessor.readBuffer(of: Float32.self, at: 12) }
  public var windspeed: Float32 { return _accessor.readBuffer(of: Float32.self, at: 16) }
  public var winddirection: Float32 { return _accessor.readBuffer(of: Float32.self, at: 20) }
  public var isDay: Float32 { return _accessor.readBuffer(of: Float32.self, at: 24) }
}

public struct com_openmeteo_api_result_Variable: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case values = 4
    case variable = 6
    case aggregation = 8
    case unit = 10
    case ensembleMember = 12
    case model = 14
    case altitude = 16
    case pressure = 18
    case depth = 20
    case depthUpper = 22
    case gddBase = 24
    case gddLimit = 26
    case inclination = 28
    case facing = 30
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public var variable: com_openmeteo_api_result_VariableType { let o = _accessor.offset(VTOFFSET.variable.v); return o == 0 ? .undefined : com_openmeteo_api_result_VariableType(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var aggregation: com_openmeteo_api_result_Aggregation { let o = _accessor.offset(VTOFFSET.aggregation.v); return o == 0 ? .undefined : com_openmeteo_api_result_Aggregation(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var unit: com_openmeteo_api_result_Unit { let o = _accessor.offset(VTOFFSET.unit.v); return o == 0 ? .dimensionless : com_openmeteo_api_result_Unit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .dimensionless }
  public var ensembleMember: Int32 { let o = _accessor.offset(VTOFFSET.ensembleMember.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var model: com_openmeteo_api_result_Model { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? .undefined : com_openmeteo_api_result_Model(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .undefined }
  public var altitude: Int32 { let o = _accessor.offset(VTOFFSET.altitude.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var pressure: Int32 { let o = _accessor.offset(VTOFFSET.pressure.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var depth: Int32 { let o = _accessor.offset(VTOFFSET.depth.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var depthUpper: Int32 { let o = _accessor.offset(VTOFFSET.depthUpper.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var gddBase: Int32 { let o = _accessor.offset(VTOFFSET.gddBase.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var gddLimit: Int32 { let o = _accessor.offset(VTOFFSET.gddLimit.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var inclination: Int32 { let o = _accessor.offset(VTOFFSET.inclination.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var facing: Int32 { let o = _accessor.offset(VTOFFSET.facing.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startVariable(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 14) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func add(variable: com_openmeteo_api_result_VariableType, _ fbb: inout FlatBufferBuilder) { fbb.add(element: variable.rawValue, def: 0, at: VTOFFSET.variable.p) }
  public static func add(aggregation: com_openmeteo_api_result_Aggregation, _ fbb: inout FlatBufferBuilder) { fbb.add(element: aggregation.rawValue, def: 0, at: VTOFFSET.aggregation.p) }
  public static func add(unit: com_openmeteo_api_result_Unit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unit.rawValue, def: 35, at: VTOFFSET.unit.p) }
  public static func add(ensembleMember: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ensembleMember, def: 0, at: VTOFFSET.ensembleMember.p) }
  public static func add(model: com_openmeteo_api_result_Model, _ fbb: inout FlatBufferBuilder) { fbb.add(element: model.rawValue, def: 0, at: VTOFFSET.model.p) }
  public static func add(altitude: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: altitude, def: 0, at: VTOFFSET.altitude.p) }
  public static func add(pressure: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pressure, def: 0, at: VTOFFSET.pressure.p) }
  public static func add(depth: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: depth, def: 0, at: VTOFFSET.depth.p) }
  public static func add(depthUpper: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: depthUpper, def: 0, at: VTOFFSET.depthUpper.p) }
  public static func add(gddBase: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gddBase, def: 0, at: VTOFFSET.gddBase.p) }
  public static func add(gddLimit: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: gddLimit, def: 0, at: VTOFFSET.gddLimit.p) }
  public static func add(inclination: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: inclination, def: 0, at: VTOFFSET.inclination.p) }
  public static func add(facing: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: facing, def: 0, at: VTOFFSET.facing.p) }
  public static func endVariable(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createVariable(
    _ fbb: inout FlatBufferBuilder,
    valuesVectorOffset values: Offset,
    variable: com_openmeteo_api_result_VariableType = .undefined,
    aggregation: com_openmeteo_api_result_Aggregation = .undefined,
    unit: com_openmeteo_api_result_Unit = .dimensionless,
    ensembleMember: Int32 = 0,
    model: com_openmeteo_api_result_Model = .undefined,
    altitude: Int32 = 0,
    pressure: Int32 = 0,
    depth: Int32 = 0,
    depthUpper: Int32 = 0,
    gddBase: Int32 = 0,
    gddLimit: Int32 = 0,
    inclination: Int32 = 0,
    facing: Int32 = 0
  ) -> Offset {
    let __start = com_openmeteo_api_result_Variable.startVariable(&fbb)
    com_openmeteo_api_result_Variable.addVectorOf(values: values, &fbb)
    com_openmeteo_api_result_Variable.add(variable: variable, &fbb)
    com_openmeteo_api_result_Variable.add(aggregation: aggregation, &fbb)
    com_openmeteo_api_result_Variable.add(unit: unit, &fbb)
    com_openmeteo_api_result_Variable.add(ensembleMember: ensembleMember, &fbb)
    com_openmeteo_api_result_Variable.add(model: model, &fbb)
    com_openmeteo_api_result_Variable.add(altitude: altitude, &fbb)
    com_openmeteo_api_result_Variable.add(pressure: pressure, &fbb)
    com_openmeteo_api_result_Variable.add(depth: depth, &fbb)
    com_openmeteo_api_result_Variable.add(depthUpper: depthUpper, &fbb)
    com_openmeteo_api_result_Variable.add(gddBase: gddBase, &fbb)
    com_openmeteo_api_result_Variable.add(gddLimit: gddLimit, &fbb)
    com_openmeteo_api_result_Variable.add(inclination: inclination, &fbb)
    com_openmeteo_api_result_Variable.add(facing: facing, &fbb)
    return com_openmeteo_api_result_Variable.endVariable(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: true, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.variable.p, fieldName: "variable", required: false, type: com_openmeteo_api_result_VariableType.self)
    try _v.visit(field: VTOFFSET.aggregation.p, fieldName: "aggregation", required: false, type: com_openmeteo_api_result_Aggregation.self)
    try _v.visit(field: VTOFFSET.unit.p, fieldName: "unit", required: false, type: com_openmeteo_api_result_Unit.self)
    try _v.visit(field: VTOFFSET.ensembleMember.p, fieldName: "ensembleMember", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: com_openmeteo_api_result_Model.self)
    try _v.visit(field: VTOFFSET.altitude.p, fieldName: "altitude", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.pressure.p, fieldName: "pressure", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.depth.p, fieldName: "depth", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.depthUpper.p, fieldName: "depthUpper", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.gddBase.p, fieldName: "gddBase", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.gddLimit.p, fieldName: "gddLimit", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.inclination.p, fieldName: "inclination", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.facing.p, fieldName: "facing", required: false, type: Int32.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_VariableSingle: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case variable = 4
    case unit = 6
    case value = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var variable: String! { let o = _accessor.offset(VTOFFSET.variable.v); return _accessor.string(at: o) }
  public var variableSegmentArray: [UInt8]! { return _accessor.getVector(at: VTOFFSET.variable.v) }
  public var unit: com_openmeteo_api_result_Unit { let o = _accessor.offset(VTOFFSET.unit.v); return o == 0 ? .dimensionless : com_openmeteo_api_result_Unit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .dimensionless }
  public var value: Float32 { let o = _accessor.offset(VTOFFSET.value.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public static func startVariableSingle(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(variable: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: variable, at: VTOFFSET.variable.p) }
  public static func add(unit: com_openmeteo_api_result_Unit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unit.rawValue, def: 35, at: VTOFFSET.unit.p) }
  public static func add(value: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: value, def: 0.0, at: VTOFFSET.value.p) }
  public static func endVariableSingle(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); fbb.require(table: end, fields: [4]); return end }
  public static func createVariableSingle(
    _ fbb: inout FlatBufferBuilder,
    variableOffset variable: Offset,
    unit: com_openmeteo_api_result_Unit = .dimensionless,
    value: Float32 = 0.0
  ) -> Offset {
    let __start = com_openmeteo_api_result_VariableSingle.startVariableSingle(&fbb)
    com_openmeteo_api_result_VariableSingle.add(variable: variable, &fbb)
    com_openmeteo_api_result_VariableSingle.add(unit: unit, &fbb)
    com_openmeteo_api_result_VariableSingle.add(value: value, &fbb)
    return com_openmeteo_api_result_VariableSingle.endVariableSingle(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.variable.p, fieldName: "variable", required: true, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.unit.p, fieldName: "unit", required: false, type: com_openmeteo_api_result_Unit.self)
    try _v.visit(field: VTOFFSET.value.p, fieldName: "value", required: false, type: Float32.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_MarineHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case waveHeight = 4
    case wavePeriod = 6
    case waveDirection = 8
    case windWaveHeight = 10
    case windWavePeriod = 12
    case windWavePeakPeriod = 14
    case windWaveDirection = 16
    case swellWaveHeight = 18
    case swellWavePeriod = 20
    case swellWavePeakPeriod = 22
    case swellWaveDirection = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var waveHeight: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.waveHeight.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var wavePeriod: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.wavePeriod.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var waveDirection: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.waveDirection.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWaveHeight: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveHeight.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWavePeriod: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeriod.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWavePeakPeriod: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeakPeriod.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWaveDirection: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveDirection.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWaveHeight: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveHeight.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWavePeriod: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeriod.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWavePeakPeriod: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriod.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWaveDirection: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveDirection.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startMarineHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(waveHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveHeight, at: VTOFFSET.waveHeight.p) }
  public static func add(wavePeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wavePeriod, at: VTOFFSET.wavePeriod.p) }
  public static func add(waveDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveDirection, at: VTOFFSET.waveDirection.p) }
  public static func add(windWaveHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveHeight, at: VTOFFSET.windWaveHeight.p) }
  public static func add(windWavePeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeriod, at: VTOFFSET.windWavePeriod.p) }
  public static func add(windWavePeakPeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeakPeriod, at: VTOFFSET.windWavePeakPeriod.p) }
  public static func add(windWaveDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveDirection, at: VTOFFSET.windWaveDirection.p) }
  public static func add(swellWaveHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveHeight, at: VTOFFSET.swellWaveHeight.p) }
  public static func add(swellWavePeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeriod, at: VTOFFSET.swellWavePeriod.p) }
  public static func add(swellWavePeakPeriod: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeakPeriod, at: VTOFFSET.swellWavePeakPeriod.p) }
  public static func add(swellWaveDirection: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveDirection, at: VTOFFSET.swellWaveDirection.p) }
  public static func endMarineHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineHourly(
    _ fbb: inout FlatBufferBuilder,
    waveHeightOffset waveHeight: Offset = Offset(),
    wavePeriodOffset wavePeriod: Offset = Offset(),
    waveDirectionOffset waveDirection: Offset = Offset(),
    windWaveHeightOffset windWaveHeight: Offset = Offset(),
    windWavePeriodOffset windWavePeriod: Offset = Offset(),
    windWavePeakPeriodOffset windWavePeakPeriod: Offset = Offset(),
    windWaveDirectionOffset windWaveDirection: Offset = Offset(),
    swellWaveHeightOffset swellWaveHeight: Offset = Offset(),
    swellWavePeriodOffset swellWavePeriod: Offset = Offset(),
    swellWavePeakPeriodOffset swellWavePeakPeriod: Offset = Offset(),
    swellWaveDirectionOffset swellWaveDirection: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_MarineHourly.startMarineHourly(&fbb)
    com_openmeteo_api_result_MarineHourly.add(waveHeight: waveHeight, &fbb)
    com_openmeteo_api_result_MarineHourly.add(wavePeriod: wavePeriod, &fbb)
    com_openmeteo_api_result_MarineHourly.add(waveDirection: waveDirection, &fbb)
    com_openmeteo_api_result_MarineHourly.add(windWaveHeight: windWaveHeight, &fbb)
    com_openmeteo_api_result_MarineHourly.add(windWavePeriod: windWavePeriod, &fbb)
    com_openmeteo_api_result_MarineHourly.add(windWavePeakPeriod: windWavePeakPeriod, &fbb)
    com_openmeteo_api_result_MarineHourly.add(windWaveDirection: windWaveDirection, &fbb)
    com_openmeteo_api_result_MarineHourly.add(swellWaveHeight: swellWaveHeight, &fbb)
    com_openmeteo_api_result_MarineHourly.add(swellWavePeriod: swellWavePeriod, &fbb)
    com_openmeteo_api_result_MarineHourly.add(swellWavePeakPeriod: swellWavePeakPeriod, &fbb)
    com_openmeteo_api_result_MarineHourly.add(swellWaveDirection: swellWaveDirection, &fbb)
    return com_openmeteo_api_result_MarineHourly.endMarineHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.waveHeight.p, fieldName: "waveHeight", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.wavePeriod.p, fieldName: "wavePeriod", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.waveDirection.p, fieldName: "waveDirection", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWaveHeight.p, fieldName: "windWaveHeight", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWavePeriod.p, fieldName: "windWavePeriod", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWavePeakPeriod.p, fieldName: "windWavePeakPeriod", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWaveDirection.p, fieldName: "windWaveDirection", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWaveHeight.p, fieldName: "swellWaveHeight", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWavePeriod.p, fieldName: "swellWavePeriod", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWavePeakPeriod.p, fieldName: "swellWavePeakPeriod", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWaveDirection.p, fieldName: "swellWaveDirection", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_MarineDaily: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case waveHeightMax = 4
    case windWaveHeightMax = 6
    case swellWaveHeightMax = 8
    case waveDirectionDominant = 10
    case windWaveDirectionDominant = 12
    case swellWaveDirectionDominant = 14
    case wavePeriodMax = 16
    case windWavePeriodMax = 18
    case windWavePeakPeriodMax = 20
    case swellWavePeriodMax = 22
    case swellWavePeakPeriodMax = 24
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var waveHeightMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.waveHeightMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWaveHeightMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveHeightMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWaveHeightMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveHeightMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var waveDirectionDominant: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.waveDirectionDominant.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWaveDirectionDominant: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWaveDirectionDominant.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWaveDirectionDominant: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWaveDirectionDominant.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var wavePeriodMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.wavePeriodMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWavePeriodMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeriodMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windWavePeakPeriodMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windWavePeakPeriodMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWavePeriodMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeriodMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var swellWavePeakPeriodMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.swellWavePeakPeriodMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startMarineDaily(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 11) }
  public static func add(waveHeightMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveHeightMax, at: VTOFFSET.waveHeightMax.p) }
  public static func add(windWaveHeightMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveHeightMax, at: VTOFFSET.windWaveHeightMax.p) }
  public static func add(swellWaveHeightMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveHeightMax, at: VTOFFSET.swellWaveHeightMax.p) }
  public static func add(waveDirectionDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: waveDirectionDominant, at: VTOFFSET.waveDirectionDominant.p) }
  public static func add(windWaveDirectionDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWaveDirectionDominant, at: VTOFFSET.windWaveDirectionDominant.p) }
  public static func add(swellWaveDirectionDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWaveDirectionDominant, at: VTOFFSET.swellWaveDirectionDominant.p) }
  public static func add(wavePeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: wavePeriodMax, at: VTOFFSET.wavePeriodMax.p) }
  public static func add(windWavePeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeriodMax, at: VTOFFSET.windWavePeriodMax.p) }
  public static func add(windWavePeakPeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windWavePeakPeriodMax, at: VTOFFSET.windWavePeakPeriodMax.p) }
  public static func add(swellWavePeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeriodMax, at: VTOFFSET.swellWavePeriodMax.p) }
  public static func add(swellWavePeakPeriodMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: swellWavePeakPeriodMax, at: VTOFFSET.swellWavePeakPeriodMax.p) }
  public static func endMarineDaily(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineDaily(
    _ fbb: inout FlatBufferBuilder,
    waveHeightMaxOffset waveHeightMax: Offset = Offset(),
    windWaveHeightMaxOffset windWaveHeightMax: Offset = Offset(),
    swellWaveHeightMaxOffset swellWaveHeightMax: Offset = Offset(),
    waveDirectionDominantOffset waveDirectionDominant: Offset = Offset(),
    windWaveDirectionDominantOffset windWaveDirectionDominant: Offset = Offset(),
    swellWaveDirectionDominantOffset swellWaveDirectionDominant: Offset = Offset(),
    wavePeriodMaxOffset wavePeriodMax: Offset = Offset(),
    windWavePeriodMaxOffset windWavePeriodMax: Offset = Offset(),
    windWavePeakPeriodMaxOffset windWavePeakPeriodMax: Offset = Offset(),
    swellWavePeriodMaxOffset swellWavePeriodMax: Offset = Offset(),
    swellWavePeakPeriodMaxOffset swellWavePeakPeriodMax: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_MarineDaily.startMarineDaily(&fbb)
    com_openmeteo_api_result_MarineDaily.add(waveHeightMax: waveHeightMax, &fbb)
    com_openmeteo_api_result_MarineDaily.add(windWaveHeightMax: windWaveHeightMax, &fbb)
    com_openmeteo_api_result_MarineDaily.add(swellWaveHeightMax: swellWaveHeightMax, &fbb)
    com_openmeteo_api_result_MarineDaily.add(waveDirectionDominant: waveDirectionDominant, &fbb)
    com_openmeteo_api_result_MarineDaily.add(windWaveDirectionDominant: windWaveDirectionDominant, &fbb)
    com_openmeteo_api_result_MarineDaily.add(swellWaveDirectionDominant: swellWaveDirectionDominant, &fbb)
    com_openmeteo_api_result_MarineDaily.add(wavePeriodMax: wavePeriodMax, &fbb)
    com_openmeteo_api_result_MarineDaily.add(windWavePeriodMax: windWavePeriodMax, &fbb)
    com_openmeteo_api_result_MarineDaily.add(windWavePeakPeriodMax: windWavePeakPeriodMax, &fbb)
    com_openmeteo_api_result_MarineDaily.add(swellWavePeriodMax: swellWavePeriodMax, &fbb)
    com_openmeteo_api_result_MarineDaily.add(swellWavePeakPeriodMax: swellWavePeakPeriodMax, &fbb)
    return com_openmeteo_api_result_MarineDaily.endMarineDaily(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.waveHeightMax.p, fieldName: "waveHeightMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWaveHeightMax.p, fieldName: "windWaveHeightMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWaveHeightMax.p, fieldName: "swellWaveHeightMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.waveDirectionDominant.p, fieldName: "waveDirectionDominant", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWaveDirectionDominant.p, fieldName: "windWaveDirectionDominant", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWaveDirectionDominant.p, fieldName: "swellWaveDirectionDominant", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.wavePeriodMax.p, fieldName: "wavePeriodMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWavePeriodMax.p, fieldName: "windWavePeriodMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windWavePeakPeriodMax.p, fieldName: "windWavePeakPeriodMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWavePeriodMax.p, fieldName: "swellWavePeriodMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.swellWavePeakPeriodMax.p, fieldName: "swellWavePeakPeriodMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_AirQualityHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case pm10 = 4
    case pm25 = 6
    case dust = 8
    case aerosolOpticalDepth = 10
    case carbonMonoxide = 12
    case nitrogenDioxide = 14
    case ammonia = 16
    case ozone = 18
    case sulphurDioxide = 20
    case uvIndex = 22
    case uvIndexClearSky = 24
    case alderPollen = 26
    case birchPollen = 28
    case grassPollen = 30
    case mugwortPollen = 32
    case olivePollen = 34
    case ragweedPollen = 36
    case europeanAqi = 38
    case europeanAqiPm25 = 40
    case europeanAqiPm10 = 42
    case europeanAqiNo2 = 44
    case europeanAqiO3 = 46
    case europeanAqiSo2 = 48
    case usAqi = 50
    case usAqiPm25 = 52
    case usAqiPm10 = 54
    case usAqiNo2 = 56
    case usAqiO3 = 58
    case usAqiSo2 = 60
    case usAqiCo = 62
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var pm10: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pm10.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pm25: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pm25.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dust: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dust.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var aerosolOpticalDepth: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.aerosolOpticalDepth.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var carbonMonoxide: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.carbonMonoxide.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var nitrogenDioxide: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.nitrogenDioxide.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var ammonia: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.ammonia.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var ozone: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.ozone.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sulphurDioxide: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.sulphurDioxide.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndex: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSky: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var alderPollen: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.alderPollen.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var birchPollen: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.birchPollen.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var grassPollen: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.grassPollen.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var mugwortPollen: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.mugwortPollen.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var olivePollen: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.olivePollen.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var ragweedPollen: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.ragweedPollen.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqi: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqi.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiPm25: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiPm25.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiPm10: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiPm10.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiNo2: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiNo2.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiO3: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiO3.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var europeanAqiSo2: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.europeanAqiSo2.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqi: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqi.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiPm25: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiPm25.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiPm10: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiPm10.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiNo2: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiNo2.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiO3: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiO3.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiSo2: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiSo2.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var usAqiCo: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.usAqiCo.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startAirQualityHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 30) }
  public static func add(pm10: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pm10, at: VTOFFSET.pm10.p) }
  public static func add(pm25: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pm25, at: VTOFFSET.pm25.p) }
  public static func add(dust: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dust, at: VTOFFSET.dust.p) }
  public static func add(aerosolOpticalDepth: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: aerosolOpticalDepth, at: VTOFFSET.aerosolOpticalDepth.p) }
  public static func add(carbonMonoxide: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: carbonMonoxide, at: VTOFFSET.carbonMonoxide.p) }
  public static func add(nitrogenDioxide: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: nitrogenDioxide, at: VTOFFSET.nitrogenDioxide.p) }
  public static func add(ammonia: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ammonia, at: VTOFFSET.ammonia.p) }
  public static func add(ozone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ozone, at: VTOFFSET.ozone.p) }
  public static func add(sulphurDioxide: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sulphurDioxide, at: VTOFFSET.sulphurDioxide.p) }
  public static func add(uvIndex: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndex, at: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSky, at: VTOFFSET.uvIndexClearSky.p) }
  public static func add(alderPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: alderPollen, at: VTOFFSET.alderPollen.p) }
  public static func add(birchPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: birchPollen, at: VTOFFSET.birchPollen.p) }
  public static func add(grassPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: grassPollen, at: VTOFFSET.grassPollen.p) }
  public static func add(mugwortPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: mugwortPollen, at: VTOFFSET.mugwortPollen.p) }
  public static func add(olivePollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: olivePollen, at: VTOFFSET.olivePollen.p) }
  public static func add(ragweedPollen: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: ragweedPollen, at: VTOFFSET.ragweedPollen.p) }
  public static func add(europeanAqi: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqi, at: VTOFFSET.europeanAqi.p) }
  public static func add(europeanAqiPm25: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiPm25, at: VTOFFSET.europeanAqiPm25.p) }
  public static func add(europeanAqiPm10: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiPm10, at: VTOFFSET.europeanAqiPm10.p) }
  public static func add(europeanAqiNo2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiNo2, at: VTOFFSET.europeanAqiNo2.p) }
  public static func add(europeanAqiO3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiO3, at: VTOFFSET.europeanAqiO3.p) }
  public static func add(europeanAqiSo2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: europeanAqiSo2, at: VTOFFSET.europeanAqiSo2.p) }
  public static func add(usAqi: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqi, at: VTOFFSET.usAqi.p) }
  public static func add(usAqiPm25: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiPm25, at: VTOFFSET.usAqiPm25.p) }
  public static func add(usAqiPm10: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiPm10, at: VTOFFSET.usAqiPm10.p) }
  public static func add(usAqiNo2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiNo2, at: VTOFFSET.usAqiNo2.p) }
  public static func add(usAqiO3: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiO3, at: VTOFFSET.usAqiO3.p) }
  public static func add(usAqiSo2: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiSo2, at: VTOFFSET.usAqiSo2.p) }
  public static func add(usAqiCo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: usAqiCo, at: VTOFFSET.usAqiCo.p) }
  public static func endAirQualityHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirQualityHourly(
    _ fbb: inout FlatBufferBuilder,
    pm10Offset pm10: Offset = Offset(),
    pm25Offset pm25: Offset = Offset(),
    dustOffset dust: Offset = Offset(),
    aerosolOpticalDepthOffset aerosolOpticalDepth: Offset = Offset(),
    carbonMonoxideOffset carbonMonoxide: Offset = Offset(),
    nitrogenDioxideOffset nitrogenDioxide: Offset = Offset(),
    ammoniaOffset ammonia: Offset = Offset(),
    ozoneOffset ozone: Offset = Offset(),
    sulphurDioxideOffset sulphurDioxide: Offset = Offset(),
    uvIndexOffset uvIndex: Offset = Offset(),
    uvIndexClearSkyOffset uvIndexClearSky: Offset = Offset(),
    alderPollenOffset alderPollen: Offset = Offset(),
    birchPollenOffset birchPollen: Offset = Offset(),
    grassPollenOffset grassPollen: Offset = Offset(),
    mugwortPollenOffset mugwortPollen: Offset = Offset(),
    olivePollenOffset olivePollen: Offset = Offset(),
    ragweedPollenOffset ragweedPollen: Offset = Offset(),
    europeanAqiOffset europeanAqi: Offset = Offset(),
    europeanAqiPm25Offset europeanAqiPm25: Offset = Offset(),
    europeanAqiPm10Offset europeanAqiPm10: Offset = Offset(),
    europeanAqiNo2Offset europeanAqiNo2: Offset = Offset(),
    europeanAqiO3Offset europeanAqiO3: Offset = Offset(),
    europeanAqiSo2Offset europeanAqiSo2: Offset = Offset(),
    usAqiOffset usAqi: Offset = Offset(),
    usAqiPm25Offset usAqiPm25: Offset = Offset(),
    usAqiPm10Offset usAqiPm10: Offset = Offset(),
    usAqiNo2Offset usAqiNo2: Offset = Offset(),
    usAqiO3Offset usAqiO3: Offset = Offset(),
    usAqiSo2Offset usAqiSo2: Offset = Offset(),
    usAqiCoOffset usAqiCo: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_AirQualityHourly.startAirQualityHourly(&fbb)
    com_openmeteo_api_result_AirQualityHourly.add(pm10: pm10, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(pm25: pm25, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(dust: dust, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(aerosolOpticalDepth: aerosolOpticalDepth, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(carbonMonoxide: carbonMonoxide, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(nitrogenDioxide: nitrogenDioxide, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(ammonia: ammonia, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(ozone: ozone, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(sulphurDioxide: sulphurDioxide, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(alderPollen: alderPollen, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(birchPollen: birchPollen, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(grassPollen: grassPollen, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(mugwortPollen: mugwortPollen, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(olivePollen: olivePollen, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(ragweedPollen: ragweedPollen, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(europeanAqi: europeanAqi, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(europeanAqiPm25: europeanAqiPm25, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(europeanAqiPm10: europeanAqiPm10, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(europeanAqiNo2: europeanAqiNo2, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(europeanAqiO3: europeanAqiO3, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(europeanAqiSo2: europeanAqiSo2, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(usAqi: usAqi, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(usAqiPm25: usAqiPm25, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(usAqiPm10: usAqiPm10, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(usAqiNo2: usAqiNo2, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(usAqiO3: usAqiO3, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(usAqiSo2: usAqiSo2, &fbb)
    com_openmeteo_api_result_AirQualityHourly.add(usAqiCo: usAqiCo, &fbb)
    return com_openmeteo_api_result_AirQualityHourly.endAirQualityHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.pm10.p, fieldName: "pm10", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pm25.p, fieldName: "pm25", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dust.p, fieldName: "dust", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.aerosolOpticalDepth.p, fieldName: "aerosolOpticalDepth", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.carbonMonoxide.p, fieldName: "carbonMonoxide", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.nitrogenDioxide.p, fieldName: "nitrogenDioxide", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.ammonia.p, fieldName: "ammonia", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.ozone.p, fieldName: "ozone", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sulphurDioxide.p, fieldName: "sulphurDioxide", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.alderPollen.p, fieldName: "alderPollen", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.birchPollen.p, fieldName: "birchPollen", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.grassPollen.p, fieldName: "grassPollen", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.mugwortPollen.p, fieldName: "mugwortPollen", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.olivePollen.p, fieldName: "olivePollen", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.ragweedPollen.p, fieldName: "ragweedPollen", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqi.p, fieldName: "europeanAqi", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiPm25.p, fieldName: "europeanAqiPm25", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiPm10.p, fieldName: "europeanAqiPm10", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiNo2.p, fieldName: "europeanAqiNo2", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiO3.p, fieldName: "europeanAqiO3", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.europeanAqiSo2.p, fieldName: "europeanAqiSo2", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqi.p, fieldName: "usAqi", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiPm25.p, fieldName: "usAqiPm25", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiPm10.p, fieldName: "usAqiPm10", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiNo2.p, fieldName: "usAqiNo2", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiO3.p, fieldName: "usAqiO3", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiSo2.p, fieldName: "usAqiSo2", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.usAqiCo.p, fieldName: "usAqiCo", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_WeatherHourly: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case temperture2m = 4
    case cloudcover = 6
    case cloudcoverLow = 8
    case cloudcoverMid = 10
    case cloudcoverHigh = 12
    case pressureMsl = 14
    case relativehumidity2m = 16
    case precipitation = 18
    case precipitationProbability = 20
    case weathercode = 22
    case temperature80m = 24
    case temperature120m = 26
    case temperature180m = 28
    case soilTemperature0cm = 30
    case soilTemperature6cm = 32
    case soilTemperature18cm = 34
    case soilTemperature54cm = 36
    case soilMoisture01cm = 38
    case soilMoisture13cm = 40
    case soilMoisture39cm = 42
    case soilMoisture927cm = 44
    case soilMoisture2781cm = 46
    case snowDepth = 48
    case snowHeight = 50
    case sensibleHeatflux = 52
    case latentHeatflux = 54
    case showers = 56
    case rain = 58
    case windgusts10m = 60
    case freezinglevelHeight = 62
    case dewpoint2m = 64
    case diffuseRadiation = 66
    case directRadiation = 68
    case apparentTemperature = 70
    case windspeed10m = 72
    case winddirection10m = 74
    case windspeed80m = 76
    case winddirection80m = 78
    case windspeed120m = 80
    case winddirection120m = 82
    case windspeed180m = 84
    case winddirection180m = 86
    case directNormalIrradiance = 88
    case evapotranspiration = 90
    case et0FaoEvapotranspiration = 92
    case vaporPressureDeficit = 94
    case shortwaveRadiation = 96
    case snowfall = 98
    case surfacePressure = 100
    case terrestrialRadiation = 102
    case terrestrialRadiationInstant = 104
    case shortwaveRadiationInstant = 106
    case diffuseRadiationInstant = 108
    case directRadiationInstant = 110
    case directNormalIrradianceInstant = 112
    case visibility = 114
    case cape = 116
    case uvIndex = 118
    case uvIndexClearSky = 120
    case isDay = 122
    case soilTemperature0To10cm = 124
    case soilTemperature10To40cm = 126
    case soilTemperature40To100cm = 128
    case soilTemperature100To200cm = 130
    case soilMoisture0To10cm = 132
    case soilMoisture10To40cm = 134
    case soilMoisture40To100cm = 136
    case soilMoisture100To200cm = 138
    case growingDegreeDaysBase0Limit50 = 140
    case leafWetnessProbability = 142
    case soilMoistureIndex0To7cm = 144
    case soilMoistureIndex7To28cm = 146
    case soilMoistureIndex28To100cm = 148
    case soilMoistureIndex100To255cm = 150
    case soilMoistureIndex0To100cm = 152
    case lightningPotential = 154
    case temperatureHpa = 156
    case geopotentialHeightHpa = 158
    case relativehumidityHpa = 160
    case windspeedHpa = 162
    case winddirectionHpa = 164
    case dewpointHpa = 166
    case cloudcoverHpa = 168
    case verticalVelocityHpa = 170
    case growingDegreeDays = 172
    case tiltedDirectRadiation = 174
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var temperture2m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperture2m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcover: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcover.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverLow: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverLow.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMid: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMid.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverHigh: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverHigh.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMsl: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMsl.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var relativehumidity2m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.relativehumidity2m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitation: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitation.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbability: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbability.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var weathercode: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature80m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature80m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature120m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature120m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature180m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature180m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature6cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature6cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature18cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature18cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature54cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature54cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture01cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture01cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture13cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture13cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture39cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture39cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture927cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture927cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture2781cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture2781cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowDepth: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowDepth.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowHeight: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowHeight.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sensibleHeatflux: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.sensibleHeatflux.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var latentHeatflux: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.latentHeatflux.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var showers: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.showers.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var rain: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.rain.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var freezinglevelHeight: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.freezinglevelHeight.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var dewpoint2m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.dewpoint2m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiation: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiation.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiation: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiation.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperature: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperature.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed80m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed80m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection80m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection80m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed120m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed120m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection120m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection120m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed180m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed180m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection180m: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection180m.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradiance: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradiance.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var evapotranspiration: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.evapotranspiration.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var et0FaoEvapotranspiration: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var vaporPressureDeficit: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.vaporPressureDeficit.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiation: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiation.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfall: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfall.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressure: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressure.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var terrestrialRadiation: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiation.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var terrestrialRadiationInstant: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.terrestrialRadiationInstant.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiationInstant: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationInstant.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var diffuseRadiationInstant: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.diffuseRadiationInstant.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directRadiationInstant: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directRadiationInstant.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var directNormalIrradianceInstant: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.directNormalIrradianceInstant.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibility: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibility.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cape: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cape.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndex: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndex.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSky: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSky.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var isDay: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.isDay.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature0To10cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature0To10cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature10To40cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature10To40cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature40To100cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature40To100cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilTemperature100To200cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilTemperature100To200cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture0To10cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture0To10cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture10To40cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture10To40cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture40To100cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture40To100cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoisture100To200cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoisture100To200cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var growingDegreeDaysBase0Limit50: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.growingDegreeDaysBase0Limit50.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var leafWetnessProbability: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.leafWetnessProbability.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To7cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To7cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex7To28cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex7To28cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex28To100cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex28To100cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex100To255cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex100To255cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var soilMoistureIndex0To100cm: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.soilMoistureIndex0To100cm.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var lightningPotential: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.lightningPotential.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hasTemperatureHpa: Bool { let o = _accessor.offset(VTOFFSET.temperatureHpa.v); return o == 0 ? false : true }
  public var temperatureHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.temperatureHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func temperatureHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.temperatureHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasGeopotentialHeightHpa: Bool { let o = _accessor.offset(VTOFFSET.geopotentialHeightHpa.v); return o == 0 ? false : true }
  public var geopotentialHeightHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.geopotentialHeightHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func geopotentialHeightHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.geopotentialHeightHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasRelativehumidityHpa: Bool { let o = _accessor.offset(VTOFFSET.relativehumidityHpa.v); return o == 0 ? false : true }
  public var relativehumidityHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.relativehumidityHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func relativehumidityHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.relativehumidityHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasWindspeedHpa: Bool { let o = _accessor.offset(VTOFFSET.windspeedHpa.v); return o == 0 ? false : true }
  public var windspeedHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.windspeedHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func windspeedHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.windspeedHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasWinddirectionHpa: Bool { let o = _accessor.offset(VTOFFSET.winddirectionHpa.v); return o == 0 ? false : true }
  public var winddirectionHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.winddirectionHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func winddirectionHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.winddirectionHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasDewpointHpa: Bool { let o = _accessor.offset(VTOFFSET.dewpointHpa.v); return o == 0 ? false : true }
  public var dewpointHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.dewpointHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func dewpointHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.dewpointHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasCloudcoverHpa: Bool { let o = _accessor.offset(VTOFFSET.cloudcoverHpa.v); return o == 0 ? false : true }
  public var cloudcoverHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.cloudcoverHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func cloudcoverHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.cloudcoverHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasVerticalVelocityHpa: Bool { let o = _accessor.offset(VTOFFSET.verticalVelocityHpa.v); return o == 0 ? false : true }
  public var verticalVelocityHpaCount: Int32 { let o = _accessor.offset(VTOFFSET.verticalVelocityHpa.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func verticalVelocityHpa(at index: Int32) -> com_openmeteo_api_result_PressureValues? { let o = _accessor.offset(VTOFFSET.verticalVelocityHpa.v); return o == 0 ? nil : com_openmeteo_api_result_PressureValues(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var growingDegreeDays: com_openmeteo_api_result_Gdd? { let o = _accessor.offset(VTOFFSET.growingDegreeDays.v); return o == 0 ? nil : com_openmeteo_api_result_Gdd(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var tiltedDirectRadiation: com_openmeteo_api_result_Tilted? { let o = _accessor.offset(VTOFFSET.tiltedDirectRadiation.v); return o == 0 ? nil : com_openmeteo_api_result_Tilted(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startWeatherHourly(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 86) }
  public static func add(temperture2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperture2m, at: VTOFFSET.temperture2m.p) }
  public static func add(cloudcover: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcover, at: VTOFFSET.cloudcover.p) }
  public static func add(cloudcoverLow: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverLow, at: VTOFFSET.cloudcoverLow.p) }
  public static func add(cloudcoverMid: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMid, at: VTOFFSET.cloudcoverMid.p) }
  public static func add(cloudcoverHigh: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverHigh, at: VTOFFSET.cloudcoverHigh.p) }
  public static func add(pressureMsl: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMsl, at: VTOFFSET.pressureMsl.p) }
  public static func add(relativehumidity2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidity2m, at: VTOFFSET.relativehumidity2m.p) }
  public static func add(precipitation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitation, at: VTOFFSET.precipitation.p) }
  public static func add(precipitationProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbability, at: VTOFFSET.precipitationProbability.p) }
  public static func add(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func add(temperature80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature80m, at: VTOFFSET.temperature80m.p) }
  public static func add(temperature120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature120m, at: VTOFFSET.temperature120m.p) }
  public static func add(temperature180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature180m, at: VTOFFSET.temperature180m.p) }
  public static func add(soilTemperature0cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0cm, at: VTOFFSET.soilTemperature0cm.p) }
  public static func add(soilTemperature6cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature6cm, at: VTOFFSET.soilTemperature6cm.p) }
  public static func add(soilTemperature18cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature18cm, at: VTOFFSET.soilTemperature18cm.p) }
  public static func add(soilTemperature54cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature54cm, at: VTOFFSET.soilTemperature54cm.p) }
  public static func add(soilMoisture01cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture01cm, at: VTOFFSET.soilMoisture01cm.p) }
  public static func add(soilMoisture13cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture13cm, at: VTOFFSET.soilMoisture13cm.p) }
  public static func add(soilMoisture39cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture39cm, at: VTOFFSET.soilMoisture39cm.p) }
  public static func add(soilMoisture927cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture927cm, at: VTOFFSET.soilMoisture927cm.p) }
  public static func add(soilMoisture2781cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture2781cm, at: VTOFFSET.soilMoisture2781cm.p) }
  public static func add(snowDepth: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowDepth, at: VTOFFSET.snowDepth.p) }
  public static func add(snowHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowHeight, at: VTOFFSET.snowHeight.p) }
  public static func add(sensibleHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sensibleHeatflux, at: VTOFFSET.sensibleHeatflux.p) }
  public static func add(latentHeatflux: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: latentHeatflux, at: VTOFFSET.latentHeatflux.p) }
  public static func add(showers: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showers, at: VTOFFSET.showers.p) }
  public static func add(rain: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rain, at: VTOFFSET.rain.p) }
  public static func add(windgusts10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10m, at: VTOFFSET.windgusts10m.p) }
  public static func add(freezinglevelHeight: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: freezinglevelHeight, at: VTOFFSET.freezinglevelHeight.p) }
  public static func add(dewpoint2m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpoint2m, at: VTOFFSET.dewpoint2m.p) }
  public static func add(diffuseRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiation, at: VTOFFSET.diffuseRadiation.p) }
  public static func add(directRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiation, at: VTOFFSET.directRadiation.p) }
  public static func add(apparentTemperature: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperature, at: VTOFFSET.apparentTemperature.p) }
  public static func add(windspeed10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10m, at: VTOFFSET.windspeed10m.p) }
  public static func add(winddirection10m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10m, at: VTOFFSET.winddirection10m.p) }
  public static func add(windspeed80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed80m, at: VTOFFSET.windspeed80m.p) }
  public static func add(winddirection80m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection80m, at: VTOFFSET.winddirection80m.p) }
  public static func add(windspeed120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed120m, at: VTOFFSET.windspeed120m.p) }
  public static func add(winddirection120m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection120m, at: VTOFFSET.winddirection120m.p) }
  public static func add(windspeed180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed180m, at: VTOFFSET.windspeed180m.p) }
  public static func add(winddirection180m: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection180m, at: VTOFFSET.winddirection180m.p) }
  public static func add(directNormalIrradiance: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradiance, at: VTOFFSET.directNormalIrradiance.p) }
  public static func add(evapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: evapotranspiration, at: VTOFFSET.evapotranspiration.p) }
  public static func add(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(vaporPressureDeficit: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: vaporPressureDeficit, at: VTOFFSET.vaporPressureDeficit.p) }
  public static func add(shortwaveRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiation, at: VTOFFSET.shortwaveRadiation.p) }
  public static func add(snowfall: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfall, at: VTOFFSET.snowfall.p) }
  public static func add(surfacePressure: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressure, at: VTOFFSET.surfacePressure.p) }
  public static func add(terrestrialRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiation, at: VTOFFSET.terrestrialRadiation.p) }
  public static func add(terrestrialRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: terrestrialRadiationInstant, at: VTOFFSET.terrestrialRadiationInstant.p) }
  public static func add(shortwaveRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationInstant, at: VTOFFSET.shortwaveRadiationInstant.p) }
  public static func add(diffuseRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: diffuseRadiationInstant, at: VTOFFSET.diffuseRadiationInstant.p) }
  public static func add(directRadiationInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directRadiationInstant, at: VTOFFSET.directRadiationInstant.p) }
  public static func add(directNormalIrradianceInstant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: directNormalIrradianceInstant, at: VTOFFSET.directNormalIrradianceInstant.p) }
  public static func add(visibility: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibility, at: VTOFFSET.visibility.p) }
  public static func add(cape: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cape, at: VTOFFSET.cape.p) }
  public static func add(uvIndex: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndex, at: VTOFFSET.uvIndex.p) }
  public static func add(uvIndexClearSky: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSky, at: VTOFFSET.uvIndexClearSky.p) }
  public static func add(isDay: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: isDay, at: VTOFFSET.isDay.p) }
  public static func add(soilTemperature0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature0To10cm, at: VTOFFSET.soilTemperature0To10cm.p) }
  public static func add(soilTemperature10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature10To40cm, at: VTOFFSET.soilTemperature10To40cm.p) }
  public static func add(soilTemperature40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature40To100cm, at: VTOFFSET.soilTemperature40To100cm.p) }
  public static func add(soilTemperature100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilTemperature100To200cm, at: VTOFFSET.soilTemperature100To200cm.p) }
  public static func add(soilMoisture0To10cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture0To10cm, at: VTOFFSET.soilMoisture0To10cm.p) }
  public static func add(soilMoisture10To40cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture10To40cm, at: VTOFFSET.soilMoisture10To40cm.p) }
  public static func add(soilMoisture40To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture40To100cm, at: VTOFFSET.soilMoisture40To100cm.p) }
  public static func add(soilMoisture100To200cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoisture100To200cm, at: VTOFFSET.soilMoisture100To200cm.p) }
  public static func add(growingDegreeDaysBase0Limit50: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: growingDegreeDaysBase0Limit50, at: VTOFFSET.growingDegreeDaysBase0Limit50.p) }
  public static func add(leafWetnessProbability: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: leafWetnessProbability, at: VTOFFSET.leafWetnessProbability.p) }
  public static func add(soilMoistureIndex0To7cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To7cm, at: VTOFFSET.soilMoistureIndex0To7cm.p) }
  public static func add(soilMoistureIndex7To28cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex7To28cm, at: VTOFFSET.soilMoistureIndex7To28cm.p) }
  public static func add(soilMoistureIndex28To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex28To100cm, at: VTOFFSET.soilMoistureIndex28To100cm.p) }
  public static func add(soilMoistureIndex100To255cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex100To255cm, at: VTOFFSET.soilMoistureIndex100To255cm.p) }
  public static func add(soilMoistureIndex0To100cm: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: soilMoistureIndex0To100cm, at: VTOFFSET.soilMoistureIndex0To100cm.p) }
  public static func add(lightningPotential: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lightningPotential, at: VTOFFSET.lightningPotential.p) }
  public static func addVectorOf(temperatureHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperatureHpa, at: VTOFFSET.temperatureHpa.p) }
  public static func addVectorOf(geopotentialHeightHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: geopotentialHeightHpa, at: VTOFFSET.geopotentialHeightHpa.p) }
  public static func addVectorOf(relativehumidityHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: relativehumidityHpa, at: VTOFFSET.relativehumidityHpa.p) }
  public static func addVectorOf(windspeedHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeedHpa, at: VTOFFSET.windspeedHpa.p) }
  public static func addVectorOf(winddirectionHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirectionHpa, at: VTOFFSET.winddirectionHpa.p) }
  public static func addVectorOf(dewpointHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: dewpointHpa, at: VTOFFSET.dewpointHpa.p) }
  public static func addVectorOf(cloudcoverHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverHpa, at: VTOFFSET.cloudcoverHpa.p) }
  public static func addVectorOf(verticalVelocityHpa: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: verticalVelocityHpa, at: VTOFFSET.verticalVelocityHpa.p) }
  public static func add(growingDegreeDays: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: growingDegreeDays, at: VTOFFSET.growingDegreeDays.p) }
  public static func add(tiltedDirectRadiation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: tiltedDirectRadiation, at: VTOFFSET.tiltedDirectRadiation.p) }
  public static func endWeatherHourly(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherHourly(
    _ fbb: inout FlatBufferBuilder,
    temperture2mOffset temperture2m: Offset = Offset(),
    cloudcoverOffset cloudcover: Offset = Offset(),
    cloudcoverLowOffset cloudcoverLow: Offset = Offset(),
    cloudcoverMidOffset cloudcoverMid: Offset = Offset(),
    cloudcoverHighOffset cloudcoverHigh: Offset = Offset(),
    pressureMslOffset pressureMsl: Offset = Offset(),
    relativehumidity2mOffset relativehumidity2m: Offset = Offset(),
    precipitationOffset precipitation: Offset = Offset(),
    precipitationProbabilityOffset precipitationProbability: Offset = Offset(),
    weathercodeOffset weathercode: Offset = Offset(),
    temperature80mOffset temperature80m: Offset = Offset(),
    temperature120mOffset temperature120m: Offset = Offset(),
    temperature180mOffset temperature180m: Offset = Offset(),
    soilTemperature0cmOffset soilTemperature0cm: Offset = Offset(),
    soilTemperature6cmOffset soilTemperature6cm: Offset = Offset(),
    soilTemperature18cmOffset soilTemperature18cm: Offset = Offset(),
    soilTemperature54cmOffset soilTemperature54cm: Offset = Offset(),
    soilMoisture01cmOffset soilMoisture01cm: Offset = Offset(),
    soilMoisture13cmOffset soilMoisture13cm: Offset = Offset(),
    soilMoisture39cmOffset soilMoisture39cm: Offset = Offset(),
    soilMoisture927cmOffset soilMoisture927cm: Offset = Offset(),
    soilMoisture2781cmOffset soilMoisture2781cm: Offset = Offset(),
    snowDepthOffset snowDepth: Offset = Offset(),
    snowHeightOffset snowHeight: Offset = Offset(),
    sensibleHeatfluxOffset sensibleHeatflux: Offset = Offset(),
    latentHeatfluxOffset latentHeatflux: Offset = Offset(),
    showersOffset showers: Offset = Offset(),
    rainOffset rain: Offset = Offset(),
    windgusts10mOffset windgusts10m: Offset = Offset(),
    freezinglevelHeightOffset freezinglevelHeight: Offset = Offset(),
    dewpoint2mOffset dewpoint2m: Offset = Offset(),
    diffuseRadiationOffset diffuseRadiation: Offset = Offset(),
    directRadiationOffset directRadiation: Offset = Offset(),
    apparentTemperatureOffset apparentTemperature: Offset = Offset(),
    windspeed10mOffset windspeed10m: Offset = Offset(),
    winddirection10mOffset winddirection10m: Offset = Offset(),
    windspeed80mOffset windspeed80m: Offset = Offset(),
    winddirection80mOffset winddirection80m: Offset = Offset(),
    windspeed120mOffset windspeed120m: Offset = Offset(),
    winddirection120mOffset winddirection120m: Offset = Offset(),
    windspeed180mOffset windspeed180m: Offset = Offset(),
    winddirection180mOffset winddirection180m: Offset = Offset(),
    directNormalIrradianceOffset directNormalIrradiance: Offset = Offset(),
    evapotranspirationOffset evapotranspiration: Offset = Offset(),
    et0FaoEvapotranspirationOffset et0FaoEvapotranspiration: Offset = Offset(),
    vaporPressureDeficitOffset vaporPressureDeficit: Offset = Offset(),
    shortwaveRadiationOffset shortwaveRadiation: Offset = Offset(),
    snowfallOffset snowfall: Offset = Offset(),
    surfacePressureOffset surfacePressure: Offset = Offset(),
    terrestrialRadiationOffset terrestrialRadiation: Offset = Offset(),
    terrestrialRadiationInstantOffset terrestrialRadiationInstant: Offset = Offset(),
    shortwaveRadiationInstantOffset shortwaveRadiationInstant: Offset = Offset(),
    diffuseRadiationInstantOffset diffuseRadiationInstant: Offset = Offset(),
    directRadiationInstantOffset directRadiationInstant: Offset = Offset(),
    directNormalIrradianceInstantOffset directNormalIrradianceInstant: Offset = Offset(),
    visibilityOffset visibility: Offset = Offset(),
    capeOffset cape: Offset = Offset(),
    uvIndexOffset uvIndex: Offset = Offset(),
    uvIndexClearSkyOffset uvIndexClearSky: Offset = Offset(),
    isDayOffset isDay: Offset = Offset(),
    soilTemperature0To10cmOffset soilTemperature0To10cm: Offset = Offset(),
    soilTemperature10To40cmOffset soilTemperature10To40cm: Offset = Offset(),
    soilTemperature40To100cmOffset soilTemperature40To100cm: Offset = Offset(),
    soilTemperature100To200cmOffset soilTemperature100To200cm: Offset = Offset(),
    soilMoisture0To10cmOffset soilMoisture0To10cm: Offset = Offset(),
    soilMoisture10To40cmOffset soilMoisture10To40cm: Offset = Offset(),
    soilMoisture40To100cmOffset soilMoisture40To100cm: Offset = Offset(),
    soilMoisture100To200cmOffset soilMoisture100To200cm: Offset = Offset(),
    growingDegreeDaysBase0Limit50Offset growingDegreeDaysBase0Limit50: Offset = Offset(),
    leafWetnessProbabilityOffset leafWetnessProbability: Offset = Offset(),
    soilMoistureIndex0To7cmOffset soilMoistureIndex0To7cm: Offset = Offset(),
    soilMoistureIndex7To28cmOffset soilMoistureIndex7To28cm: Offset = Offset(),
    soilMoistureIndex28To100cmOffset soilMoistureIndex28To100cm: Offset = Offset(),
    soilMoistureIndex100To255cmOffset soilMoistureIndex100To255cm: Offset = Offset(),
    soilMoistureIndex0To100cmOffset soilMoistureIndex0To100cm: Offset = Offset(),
    lightningPotentialOffset lightningPotential: Offset = Offset(),
    temperatureHpaVectorOffset temperatureHpa: Offset = Offset(),
    geopotentialHeightHpaVectorOffset geopotentialHeightHpa: Offset = Offset(),
    relativehumidityHpaVectorOffset relativehumidityHpa: Offset = Offset(),
    windspeedHpaVectorOffset windspeedHpa: Offset = Offset(),
    winddirectionHpaVectorOffset winddirectionHpa: Offset = Offset(),
    dewpointHpaVectorOffset dewpointHpa: Offset = Offset(),
    cloudcoverHpaVectorOffset cloudcoverHpa: Offset = Offset(),
    verticalVelocityHpaVectorOffset verticalVelocityHpa: Offset = Offset(),
    growingDegreeDaysOffset growingDegreeDays: Offset = Offset(),
    tiltedDirectRadiationOffset tiltedDirectRadiation: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_WeatherHourly.startWeatherHourly(&fbb)
    com_openmeteo_api_result_WeatherHourly.add(temperture2m: temperture2m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(cloudcover: cloudcover, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(cloudcoverLow: cloudcoverLow, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(cloudcoverMid: cloudcoverMid, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(cloudcoverHigh: cloudcoverHigh, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(pressureMsl: pressureMsl, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(relativehumidity2m: relativehumidity2m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(precipitation: precipitation, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(precipitationProbability: precipitationProbability, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(weathercode: weathercode, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(temperature80m: temperature80m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(temperature120m: temperature120m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(temperature180m: temperature180m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilTemperature0cm: soilTemperature0cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilTemperature6cm: soilTemperature6cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilTemperature18cm: soilTemperature18cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilTemperature54cm: soilTemperature54cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoisture01cm: soilMoisture01cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoisture13cm: soilMoisture13cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoisture39cm: soilMoisture39cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoisture927cm: soilMoisture927cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoisture2781cm: soilMoisture2781cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(snowDepth: snowDepth, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(snowHeight: snowHeight, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(sensibleHeatflux: sensibleHeatflux, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(latentHeatflux: latentHeatflux, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(showers: showers, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(rain: rain, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(windgusts10m: windgusts10m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(freezinglevelHeight: freezinglevelHeight, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(dewpoint2m: dewpoint2m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(diffuseRadiation: diffuseRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(directRadiation: directRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(apparentTemperature: apparentTemperature, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(windspeed10m: windspeed10m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(winddirection10m: winddirection10m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(windspeed80m: windspeed80m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(winddirection80m: winddirection80m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(windspeed120m: windspeed120m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(winddirection120m: winddirection120m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(windspeed180m: windspeed180m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(winddirection180m: winddirection180m, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(directNormalIrradiance: directNormalIrradiance, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(evapotranspiration: evapotranspiration, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(vaporPressureDeficit: vaporPressureDeficit, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(shortwaveRadiation: shortwaveRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(snowfall: snowfall, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(surfacePressure: surfacePressure, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(terrestrialRadiation: terrestrialRadiation, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(terrestrialRadiationInstant: terrestrialRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(shortwaveRadiationInstant: shortwaveRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(diffuseRadiationInstant: diffuseRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(directRadiationInstant: directRadiationInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(directNormalIrradianceInstant: directNormalIrradianceInstant, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(visibility: visibility, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(cape: cape, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(uvIndex: uvIndex, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(uvIndexClearSky: uvIndexClearSky, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(isDay: isDay, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilTemperature0To10cm: soilTemperature0To10cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilTemperature10To40cm: soilTemperature10To40cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilTemperature40To100cm: soilTemperature40To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilTemperature100To200cm: soilTemperature100To200cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoisture0To10cm: soilMoisture0To10cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoisture10To40cm: soilMoisture10To40cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoisture40To100cm: soilMoisture40To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoisture100To200cm: soilMoisture100To200cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(growingDegreeDaysBase0Limit50: growingDegreeDaysBase0Limit50, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(leafWetnessProbability: leafWetnessProbability, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoistureIndex0To7cm: soilMoistureIndex0To7cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoistureIndex7To28cm: soilMoistureIndex7To28cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoistureIndex28To100cm: soilMoistureIndex28To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoistureIndex100To255cm: soilMoistureIndex100To255cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(soilMoistureIndex0To100cm: soilMoistureIndex0To100cm, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(lightningPotential: lightningPotential, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(temperatureHpa: temperatureHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(geopotentialHeightHpa: geopotentialHeightHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(relativehumidityHpa: relativehumidityHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(windspeedHpa: windspeedHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(winddirectionHpa: winddirectionHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(dewpointHpa: dewpointHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(cloudcoverHpa: cloudcoverHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.addVectorOf(verticalVelocityHpa: verticalVelocityHpa, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(growingDegreeDays: growingDegreeDays, &fbb)
    com_openmeteo_api_result_WeatherHourly.add(tiltedDirectRadiation: tiltedDirectRadiation, &fbb)
    return com_openmeteo_api_result_WeatherHourly.endWeatherHourly(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.temperture2m.p, fieldName: "temperture2m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcover.p, fieldName: "cloudcover", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverLow.p, fieldName: "cloudcoverLow", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMid.p, fieldName: "cloudcoverMid", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverHigh.p, fieldName: "cloudcoverHigh", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMsl.p, fieldName: "pressureMsl", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.relativehumidity2m.p, fieldName: "relativehumidity2m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitation.p, fieldName: "precipitation", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbability.p, fieldName: "precipitationProbability", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature80m.p, fieldName: "temperature80m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature120m.p, fieldName: "temperature120m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature180m.p, fieldName: "temperature180m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0cm.p, fieldName: "soilTemperature0cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature6cm.p, fieldName: "soilTemperature6cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature18cm.p, fieldName: "soilTemperature18cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature54cm.p, fieldName: "soilTemperature54cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture01cm.p, fieldName: "soilMoisture01cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture13cm.p, fieldName: "soilMoisture13cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture39cm.p, fieldName: "soilMoisture39cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture927cm.p, fieldName: "soilMoisture927cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture2781cm.p, fieldName: "soilMoisture2781cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowDepth.p, fieldName: "snowDepth", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowHeight.p, fieldName: "snowHeight", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sensibleHeatflux.p, fieldName: "sensibleHeatflux", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.latentHeatflux.p, fieldName: "latentHeatflux", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.showers.p, fieldName: "showers", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.rain.p, fieldName: "rain", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10m.p, fieldName: "windgusts10m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.freezinglevelHeight.p, fieldName: "freezinglevelHeight", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.dewpoint2m.p, fieldName: "dewpoint2m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiation.p, fieldName: "diffuseRadiation", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directRadiation.p, fieldName: "directRadiation", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperature.p, fieldName: "apparentTemperature", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10m.p, fieldName: "windspeed10m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection10m.p, fieldName: "winddirection10m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed80m.p, fieldName: "windspeed80m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection80m.p, fieldName: "winddirection80m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed120m.p, fieldName: "windspeed120m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection120m.p, fieldName: "winddirection120m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed180m.p, fieldName: "windspeed180m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection180m.p, fieldName: "winddirection180m", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradiance.p, fieldName: "directNormalIrradiance", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.evapotranspiration.p, fieldName: "evapotranspiration", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.vaporPressureDeficit.p, fieldName: "vaporPressureDeficit", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiation.p, fieldName: "shortwaveRadiation", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfall.p, fieldName: "snowfall", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressure.p, fieldName: "surfacePressure", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiation.p, fieldName: "terrestrialRadiation", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.terrestrialRadiationInstant.p, fieldName: "terrestrialRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationInstant.p, fieldName: "shortwaveRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.diffuseRadiationInstant.p, fieldName: "diffuseRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directRadiationInstant.p, fieldName: "directRadiationInstant", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.directNormalIrradianceInstant.p, fieldName: "directNormalIrradianceInstant", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibility.p, fieldName: "visibility", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cape.p, fieldName: "cape", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndex.p, fieldName: "uvIndex", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSky.p, fieldName: "uvIndexClearSky", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.isDay.p, fieldName: "isDay", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature0To10cm.p, fieldName: "soilTemperature0To10cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature10To40cm.p, fieldName: "soilTemperature10To40cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature40To100cm.p, fieldName: "soilTemperature40To100cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilTemperature100To200cm.p, fieldName: "soilTemperature100To200cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture0To10cm.p, fieldName: "soilMoisture0To10cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture10To40cm.p, fieldName: "soilMoisture10To40cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture40To100cm.p, fieldName: "soilMoisture40To100cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoisture100To200cm.p, fieldName: "soilMoisture100To200cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.growingDegreeDaysBase0Limit50.p, fieldName: "growingDegreeDaysBase0Limit50", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.leafWetnessProbability.p, fieldName: "leafWetnessProbability", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To7cm.p, fieldName: "soilMoistureIndex0To7cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex7To28cm.p, fieldName: "soilMoistureIndex7To28cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex28To100cm.p, fieldName: "soilMoistureIndex28To100cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex100To255cm.p, fieldName: "soilMoistureIndex100To255cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.soilMoistureIndex0To100cm.p, fieldName: "soilMoistureIndex0To100cm", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.lightningPotential.p, fieldName: "lightningPotential", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperatureHpa.p, fieldName: "temperatureHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.geopotentialHeightHpa.p, fieldName: "geopotentialHeightHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.relativehumidityHpa.p, fieldName: "relativehumidityHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.windspeedHpa.p, fieldName: "windspeedHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.winddirectionHpa.p, fieldName: "winddirectionHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.dewpointHpa.p, fieldName: "dewpointHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.cloudcoverHpa.p, fieldName: "cloudcoverHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.verticalVelocityHpa.p, fieldName: "verticalVelocityHpa", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_PressureValues>, com_openmeteo_api_result_PressureValues>>.self)
    try _v.visit(field: VTOFFSET.growingDegreeDays.p, fieldName: "growingDegreeDays", required: false, type: ForwardOffset<com_openmeteo_api_result_Gdd>.self)
    try _v.visit(field: VTOFFSET.tiltedDirectRadiation.p, fieldName: "tiltedDirectRadiation", required: false, type: ForwardOffset<com_openmeteo_api_result_Tilted>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_ValuesAndUnit: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case values = 4
    case unit = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public var unit: com_openmeteo_api_result_Unit { let o = _accessor.offset(VTOFFSET.unit.v); return o == 0 ? .dimensionless : com_openmeteo_api_result_Unit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .dimensionless }
  public static func startValuesAndUnit(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func add(unit: com_openmeteo_api_result_Unit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unit.rawValue, def: 35, at: VTOFFSET.unit.p) }
  public static func endValuesAndUnit(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createValuesAndUnit(
    _ fbb: inout FlatBufferBuilder,
    valuesVectorOffset values: Offset = Offset(),
    unit: com_openmeteo_api_result_Unit = .dimensionless
  ) -> Offset {
    let __start = com_openmeteo_api_result_ValuesAndUnit.startValuesAndUnit(&fbb)
    com_openmeteo_api_result_ValuesAndUnit.addVectorOf(values: values, &fbb)
    com_openmeteo_api_result_ValuesAndUnit.add(unit: unit, &fbb)
    return com_openmeteo_api_result_ValuesAndUnit.endValuesAndUnit(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    try _v.visit(field: VTOFFSET.unit.p, fieldName: "unit", required: false, type: com_openmeteo_api_result_Unit.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_PressureValues: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case pressureLevel = 4
    case unit = 6
    case values = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var pressureLevel: Int16 { let o = _accessor.offset(VTOFFSET.pressureLevel.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int16.self, at: o) }
  public var unit: com_openmeteo_api_result_Unit { let o = _accessor.offset(VTOFFSET.unit.v); return o == 0 ? .dimensionless : com_openmeteo_api_result_Unit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .dimensionless }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public static func startPressureValues(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(pressureLevel: Int16, _ fbb: inout FlatBufferBuilder) { fbb.add(element: pressureLevel, def: 0, at: VTOFFSET.pressureLevel.p) }
  public static func add(unit: com_openmeteo_api_result_Unit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unit.rawValue, def: 35, at: VTOFFSET.unit.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endPressureValues(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPressureValues(
    _ fbb: inout FlatBufferBuilder,
    pressureLevel: Int16 = 0,
    unit: com_openmeteo_api_result_Unit = .dimensionless,
    valuesVectorOffset values: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_PressureValues.startPressureValues(&fbb)
    com_openmeteo_api_result_PressureValues.add(pressureLevel: pressureLevel, &fbb)
    com_openmeteo_api_result_PressureValues.add(unit: unit, &fbb)
    com_openmeteo_api_result_PressureValues.addVectorOf(values: values, &fbb)
    return com_openmeteo_api_result_PressureValues.endPressureValues(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.pressureLevel.p, fieldName: "pressureLevel", required: false, type: Int16.self)
    try _v.visit(field: VTOFFSET.unit.p, fieldName: "unit", required: false, type: com_openmeteo_api_result_Unit.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_Gdd: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case limit = 4
    case base = 6
    case unit = 8
    case values = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var limit: Float32 { let o = _accessor.offset(VTOFFSET.limit.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var base: Float32 { let o = _accessor.offset(VTOFFSET.base.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var unit: com_openmeteo_api_result_Unit { let o = _accessor.offset(VTOFFSET.unit.v); return o == 0 ? .dimensionless : com_openmeteo_api_result_Unit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .dimensionless }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public static func startGdd(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(limit: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: limit, def: 0.0, at: VTOFFSET.limit.p) }
  public static func add(base: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: base, def: 0.0, at: VTOFFSET.base.p) }
  public static func add(unit: com_openmeteo_api_result_Unit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unit.rawValue, def: 35, at: VTOFFSET.unit.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endGdd(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGdd(
    _ fbb: inout FlatBufferBuilder,
    limit: Float32 = 0.0,
    base: Float32 = 0.0,
    unit: com_openmeteo_api_result_Unit = .dimensionless,
    valuesVectorOffset values: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_Gdd.startGdd(&fbb)
    com_openmeteo_api_result_Gdd.add(limit: limit, &fbb)
    com_openmeteo_api_result_Gdd.add(base: base, &fbb)
    com_openmeteo_api_result_Gdd.add(unit: unit, &fbb)
    com_openmeteo_api_result_Gdd.addVectorOf(values: values, &fbb)
    return com_openmeteo_api_result_Gdd.endGdd(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.limit.p, fieldName: "limit", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.base.p, fieldName: "base", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.unit.p, fieldName: "unit", required: false, type: com_openmeteo_api_result_Unit.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_Tilted: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case tilt = 4
    case azimuth = 6
    case unit = 8
    case values = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var tilt: Float32 { let o = _accessor.offset(VTOFFSET.tilt.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var azimuth: Float32 { let o = _accessor.offset(VTOFFSET.azimuth.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var unit: com_openmeteo_api_result_Unit { let o = _accessor.offset(VTOFFSET.unit.v); return o == 0 ? .dimensionless : com_openmeteo_api_result_Unit(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .dimensionless }
  public var hasValues: Bool { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? false : true }
  public var valuesCount: Int32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func values(at index: Int32) -> Float32 { let o = _accessor.offset(VTOFFSET.values.v); return o == 0 ? 0 : _accessor.directRead(of: Float32.self, offset: _accessor.vector(at: o) + index * 4) }
  public var values: [Float32] { return _accessor.getVector(at: VTOFFSET.values.v) ?? [] }
  public static func startTilted(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(tilt: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: tilt, def: 0.0, at: VTOFFSET.tilt.p) }
  public static func add(azimuth: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: azimuth, def: 0.0, at: VTOFFSET.azimuth.p) }
  public static func add(unit: com_openmeteo_api_result_Unit, _ fbb: inout FlatBufferBuilder) { fbb.add(element: unit.rawValue, def: 35, at: VTOFFSET.unit.p) }
  public static func addVectorOf(values: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: values, at: VTOFFSET.values.p) }
  public static func endTilted(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createTilted(
    _ fbb: inout FlatBufferBuilder,
    tilt: Float32 = 0.0,
    azimuth: Float32 = 0.0,
    unit: com_openmeteo_api_result_Unit = .dimensionless,
    valuesVectorOffset values: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_Tilted.startTilted(&fbb)
    com_openmeteo_api_result_Tilted.add(tilt: tilt, &fbb)
    com_openmeteo_api_result_Tilted.add(azimuth: azimuth, &fbb)
    com_openmeteo_api_result_Tilted.add(unit: unit, &fbb)
    com_openmeteo_api_result_Tilted.addVectorOf(values: values, &fbb)
    return com_openmeteo_api_result_Tilted.endTilted(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.tilt.p, fieldName: "tilt", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.azimuth.p, fieldName: "azimuth", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.unit.p, fieldName: "unit", required: false, type: com_openmeteo_api_result_Unit.self)
    try _v.visit(field: VTOFFSET.values.p, fieldName: "values", required: false, type: ForwardOffset<Vector<Float32, Float32>>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_Daily: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case temperature2mMax = 4
    case temperature2mMin = 6
    case temperature2mMean = 8
    case apparentTemperatureMax = 10
    case apparentTemperatureMin = 12
    case apparentTemperatureMean = 14
    case precipitationSum = 16
    case precipitationProbabilityMax = 18
    case precipitationProbabilityMin = 20
    case precipitationProbabilityMean = 22
    case snowfallSum = 24
    case rainSum = 26
    case showersSum = 28
    case weathercode = 30
    case shortwaveRadiationSum = 32
    case windspeed10mMax = 34
    case windspeed10mMin = 36
    case windspeed10mMean = 38
    case windgusts10mMax = 40
    case windgusts10mMin = 42
    case windgusts10mMean = 44
    case winddirection10mDominant = 46
    case precipitationHours = 48
    case sunrise = 50
    case sunset = 52
    case et0FaoEvapotranspiration = 54
    case visibilityMax = 56
    case visibilityMin = 58
    case visibilityMean = 60
    case pressureMslMax = 62
    case pressureMslMin = 64
    case pressureMslMean = 66
    case surfacePressureMax = 68
    case surfacePressureMin = 70
    case surfacePressureMean = 72
    case capeMax = 74
    case capeMin = 76
    case capeMean = 78
    case cloudcoverMax = 80
    case cloudcoverMin = 82
    case cloudcoverMean = 84
    case uvIndexMax = 86
    case uvIndexClearSkyMax = 88
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var temperature2mMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2mMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var temperature2mMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.temperature2mMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var apparentTemperatureMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.apparentTemperatureMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationSum: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationSum.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationProbabilityMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationProbabilityMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var snowfallSum: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.snowfallSum.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var rainSum: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.rainSum.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var showersSum: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.showersSum.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var weathercode: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.weathercode.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var shortwaveRadiationSum: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.shortwaveRadiationSum.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windspeed10mMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windspeed10mMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var windgusts10mMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.windgusts10mMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var winddirection10mDominant: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.winddirection10mDominant.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var precipitationHours: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.precipitationHours.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sunrise: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.sunrise.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var sunset: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.sunset.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var et0FaoEvapotranspiration: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.et0FaoEvapotranspiration.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var visibilityMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.visibilityMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var pressureMslMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.pressureMslMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var surfacePressureMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.surfacePressureMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var capeMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.capeMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var cloudcoverMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.cloudcoverMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var uvIndexClearSkyMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.uvIndexClearSkyMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startDaily(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 43) }
  public static func add(temperature2mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMax, at: VTOFFSET.temperature2mMax.p) }
  public static func add(temperature2mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMin, at: VTOFFSET.temperature2mMin.p) }
  public static func add(temperature2mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: temperature2mMean, at: VTOFFSET.temperature2mMean.p) }
  public static func add(apparentTemperatureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMax, at: VTOFFSET.apparentTemperatureMax.p) }
  public static func add(apparentTemperatureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMin, at: VTOFFSET.apparentTemperatureMin.p) }
  public static func add(apparentTemperatureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: apparentTemperatureMean, at: VTOFFSET.apparentTemperatureMean.p) }
  public static func add(precipitationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationSum, at: VTOFFSET.precipitationSum.p) }
  public static func add(precipitationProbabilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMax, at: VTOFFSET.precipitationProbabilityMax.p) }
  public static func add(precipitationProbabilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMin, at: VTOFFSET.precipitationProbabilityMin.p) }
  public static func add(precipitationProbabilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationProbabilityMean, at: VTOFFSET.precipitationProbabilityMean.p) }
  public static func add(snowfallSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: snowfallSum, at: VTOFFSET.snowfallSum.p) }
  public static func add(rainSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: rainSum, at: VTOFFSET.rainSum.p) }
  public static func add(showersSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: showersSum, at: VTOFFSET.showersSum.p) }
  public static func add(weathercode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: weathercode, at: VTOFFSET.weathercode.p) }
  public static func add(shortwaveRadiationSum: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: shortwaveRadiationSum, at: VTOFFSET.shortwaveRadiationSum.p) }
  public static func add(windspeed10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMax, at: VTOFFSET.windspeed10mMax.p) }
  public static func add(windspeed10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMin, at: VTOFFSET.windspeed10mMin.p) }
  public static func add(windspeed10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windspeed10mMean, at: VTOFFSET.windspeed10mMean.p) }
  public static func add(windgusts10mMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMax, at: VTOFFSET.windgusts10mMax.p) }
  public static func add(windgusts10mMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMin, at: VTOFFSET.windgusts10mMin.p) }
  public static func add(windgusts10mMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: windgusts10mMean, at: VTOFFSET.windgusts10mMean.p) }
  public static func add(winddirection10mDominant: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: winddirection10mDominant, at: VTOFFSET.winddirection10mDominant.p) }
  public static func add(precipitationHours: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: precipitationHours, at: VTOFFSET.precipitationHours.p) }
  public static func add(sunrise: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunrise, at: VTOFFSET.sunrise.p) }
  public static func add(sunset: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sunset, at: VTOFFSET.sunset.p) }
  public static func add(et0FaoEvapotranspiration: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: et0FaoEvapotranspiration, at: VTOFFSET.et0FaoEvapotranspiration.p) }
  public static func add(visibilityMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMax, at: VTOFFSET.visibilityMax.p) }
  public static func add(visibilityMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMin, at: VTOFFSET.visibilityMin.p) }
  public static func add(visibilityMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: visibilityMean, at: VTOFFSET.visibilityMean.p) }
  public static func add(pressureMslMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMax, at: VTOFFSET.pressureMslMax.p) }
  public static func add(pressureMslMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMin, at: VTOFFSET.pressureMslMin.p) }
  public static func add(pressureMslMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: pressureMslMean, at: VTOFFSET.pressureMslMean.p) }
  public static func add(surfacePressureMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMax, at: VTOFFSET.surfacePressureMax.p) }
  public static func add(surfacePressureMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMin, at: VTOFFSET.surfacePressureMin.p) }
  public static func add(surfacePressureMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: surfacePressureMean, at: VTOFFSET.surfacePressureMean.p) }
  public static func add(capeMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMax, at: VTOFFSET.capeMax.p) }
  public static func add(capeMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMin, at: VTOFFSET.capeMin.p) }
  public static func add(capeMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: capeMean, at: VTOFFSET.capeMean.p) }
  public static func add(cloudcoverMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMax, at: VTOFFSET.cloudcoverMax.p) }
  public static func add(cloudcoverMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMin, at: VTOFFSET.cloudcoverMin.p) }
  public static func add(cloudcoverMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: cloudcoverMean, at: VTOFFSET.cloudcoverMean.p) }
  public static func add(uvIndexMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexMax, at: VTOFFSET.uvIndexMax.p) }
  public static func add(uvIndexClearSkyMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: uvIndexClearSkyMax, at: VTOFFSET.uvIndexClearSkyMax.p) }
  public static func endDaily(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createDaily(
    _ fbb: inout FlatBufferBuilder,
    temperature2mMaxOffset temperature2mMax: Offset = Offset(),
    temperature2mMinOffset temperature2mMin: Offset = Offset(),
    temperature2mMeanOffset temperature2mMean: Offset = Offset(),
    apparentTemperatureMaxOffset apparentTemperatureMax: Offset = Offset(),
    apparentTemperatureMinOffset apparentTemperatureMin: Offset = Offset(),
    apparentTemperatureMeanOffset apparentTemperatureMean: Offset = Offset(),
    precipitationSumOffset precipitationSum: Offset = Offset(),
    precipitationProbabilityMaxOffset precipitationProbabilityMax: Offset = Offset(),
    precipitationProbabilityMinOffset precipitationProbabilityMin: Offset = Offset(),
    precipitationProbabilityMeanOffset precipitationProbabilityMean: Offset = Offset(),
    snowfallSumOffset snowfallSum: Offset = Offset(),
    rainSumOffset rainSum: Offset = Offset(),
    showersSumOffset showersSum: Offset = Offset(),
    weathercodeOffset weathercode: Offset = Offset(),
    shortwaveRadiationSumOffset shortwaveRadiationSum: Offset = Offset(),
    windspeed10mMaxOffset windspeed10mMax: Offset = Offset(),
    windspeed10mMinOffset windspeed10mMin: Offset = Offset(),
    windspeed10mMeanOffset windspeed10mMean: Offset = Offset(),
    windgusts10mMaxOffset windgusts10mMax: Offset = Offset(),
    windgusts10mMinOffset windgusts10mMin: Offset = Offset(),
    windgusts10mMeanOffset windgusts10mMean: Offset = Offset(),
    winddirection10mDominantOffset winddirection10mDominant: Offset = Offset(),
    precipitationHoursOffset precipitationHours: Offset = Offset(),
    sunriseOffset sunrise: Offset = Offset(),
    sunsetOffset sunset: Offset = Offset(),
    et0FaoEvapotranspirationOffset et0FaoEvapotranspiration: Offset = Offset(),
    visibilityMaxOffset visibilityMax: Offset = Offset(),
    visibilityMinOffset visibilityMin: Offset = Offset(),
    visibilityMeanOffset visibilityMean: Offset = Offset(),
    pressureMslMaxOffset pressureMslMax: Offset = Offset(),
    pressureMslMinOffset pressureMslMin: Offset = Offset(),
    pressureMslMeanOffset pressureMslMean: Offset = Offset(),
    surfacePressureMaxOffset surfacePressureMax: Offset = Offset(),
    surfacePressureMinOffset surfacePressureMin: Offset = Offset(),
    surfacePressureMeanOffset surfacePressureMean: Offset = Offset(),
    capeMaxOffset capeMax: Offset = Offset(),
    capeMinOffset capeMin: Offset = Offset(),
    capeMeanOffset capeMean: Offset = Offset(),
    cloudcoverMaxOffset cloudcoverMax: Offset = Offset(),
    cloudcoverMinOffset cloudcoverMin: Offset = Offset(),
    cloudcoverMeanOffset cloudcoverMean: Offset = Offset(),
    uvIndexMaxOffset uvIndexMax: Offset = Offset(),
    uvIndexClearSkyMaxOffset uvIndexClearSkyMax: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_Daily.startDaily(&fbb)
    com_openmeteo_api_result_Daily.add(temperature2mMax: temperature2mMax, &fbb)
    com_openmeteo_api_result_Daily.add(temperature2mMin: temperature2mMin, &fbb)
    com_openmeteo_api_result_Daily.add(temperature2mMean: temperature2mMean, &fbb)
    com_openmeteo_api_result_Daily.add(apparentTemperatureMax: apparentTemperatureMax, &fbb)
    com_openmeteo_api_result_Daily.add(apparentTemperatureMin: apparentTemperatureMin, &fbb)
    com_openmeteo_api_result_Daily.add(apparentTemperatureMean: apparentTemperatureMean, &fbb)
    com_openmeteo_api_result_Daily.add(precipitationSum: precipitationSum, &fbb)
    com_openmeteo_api_result_Daily.add(precipitationProbabilityMax: precipitationProbabilityMax, &fbb)
    com_openmeteo_api_result_Daily.add(precipitationProbabilityMin: precipitationProbabilityMin, &fbb)
    com_openmeteo_api_result_Daily.add(precipitationProbabilityMean: precipitationProbabilityMean, &fbb)
    com_openmeteo_api_result_Daily.add(snowfallSum: snowfallSum, &fbb)
    com_openmeteo_api_result_Daily.add(rainSum: rainSum, &fbb)
    com_openmeteo_api_result_Daily.add(showersSum: showersSum, &fbb)
    com_openmeteo_api_result_Daily.add(weathercode: weathercode, &fbb)
    com_openmeteo_api_result_Daily.add(shortwaveRadiationSum: shortwaveRadiationSum, &fbb)
    com_openmeteo_api_result_Daily.add(windspeed10mMax: windspeed10mMax, &fbb)
    com_openmeteo_api_result_Daily.add(windspeed10mMin: windspeed10mMin, &fbb)
    com_openmeteo_api_result_Daily.add(windspeed10mMean: windspeed10mMean, &fbb)
    com_openmeteo_api_result_Daily.add(windgusts10mMax: windgusts10mMax, &fbb)
    com_openmeteo_api_result_Daily.add(windgusts10mMin: windgusts10mMin, &fbb)
    com_openmeteo_api_result_Daily.add(windgusts10mMean: windgusts10mMean, &fbb)
    com_openmeteo_api_result_Daily.add(winddirection10mDominant: winddirection10mDominant, &fbb)
    com_openmeteo_api_result_Daily.add(precipitationHours: precipitationHours, &fbb)
    com_openmeteo_api_result_Daily.add(sunrise: sunrise, &fbb)
    com_openmeteo_api_result_Daily.add(sunset: sunset, &fbb)
    com_openmeteo_api_result_Daily.add(et0FaoEvapotranspiration: et0FaoEvapotranspiration, &fbb)
    com_openmeteo_api_result_Daily.add(visibilityMax: visibilityMax, &fbb)
    com_openmeteo_api_result_Daily.add(visibilityMin: visibilityMin, &fbb)
    com_openmeteo_api_result_Daily.add(visibilityMean: visibilityMean, &fbb)
    com_openmeteo_api_result_Daily.add(pressureMslMax: pressureMslMax, &fbb)
    com_openmeteo_api_result_Daily.add(pressureMslMin: pressureMslMin, &fbb)
    com_openmeteo_api_result_Daily.add(pressureMslMean: pressureMslMean, &fbb)
    com_openmeteo_api_result_Daily.add(surfacePressureMax: surfacePressureMax, &fbb)
    com_openmeteo_api_result_Daily.add(surfacePressureMin: surfacePressureMin, &fbb)
    com_openmeteo_api_result_Daily.add(surfacePressureMean: surfacePressureMean, &fbb)
    com_openmeteo_api_result_Daily.add(capeMax: capeMax, &fbb)
    com_openmeteo_api_result_Daily.add(capeMin: capeMin, &fbb)
    com_openmeteo_api_result_Daily.add(capeMean: capeMean, &fbb)
    com_openmeteo_api_result_Daily.add(cloudcoverMax: cloudcoverMax, &fbb)
    com_openmeteo_api_result_Daily.add(cloudcoverMin: cloudcoverMin, &fbb)
    com_openmeteo_api_result_Daily.add(cloudcoverMean: cloudcoverMean, &fbb)
    com_openmeteo_api_result_Daily.add(uvIndexMax: uvIndexMax, &fbb)
    com_openmeteo_api_result_Daily.add(uvIndexClearSkyMax: uvIndexClearSkyMax, &fbb)
    return com_openmeteo_api_result_Daily.endDaily(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.temperature2mMax.p, fieldName: "temperature2mMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2mMin.p, fieldName: "temperature2mMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.temperature2mMean.p, fieldName: "temperature2mMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMax.p, fieldName: "apparentTemperatureMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMin.p, fieldName: "apparentTemperatureMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.apparentTemperatureMean.p, fieldName: "apparentTemperatureMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationSum.p, fieldName: "precipitationSum", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMax.p, fieldName: "precipitationProbabilityMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMin.p, fieldName: "precipitationProbabilityMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationProbabilityMean.p, fieldName: "precipitationProbabilityMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.snowfallSum.p, fieldName: "snowfallSum", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.rainSum.p, fieldName: "rainSum", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.showersSum.p, fieldName: "showersSum", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.weathercode.p, fieldName: "weathercode", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.shortwaveRadiationSum.p, fieldName: "shortwaveRadiationSum", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMax.p, fieldName: "windspeed10mMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMin.p, fieldName: "windspeed10mMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windspeed10mMean.p, fieldName: "windspeed10mMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMax.p, fieldName: "windgusts10mMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMin.p, fieldName: "windgusts10mMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.windgusts10mMean.p, fieldName: "windgusts10mMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.winddirection10mDominant.p, fieldName: "winddirection10mDominant", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.precipitationHours.p, fieldName: "precipitationHours", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sunrise.p, fieldName: "sunrise", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.sunset.p, fieldName: "sunset", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.et0FaoEvapotranspiration.p, fieldName: "et0FaoEvapotranspiration", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMax.p, fieldName: "visibilityMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMin.p, fieldName: "visibilityMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.visibilityMean.p, fieldName: "visibilityMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMax.p, fieldName: "pressureMslMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMin.p, fieldName: "pressureMslMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.pressureMslMean.p, fieldName: "pressureMslMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMax.p, fieldName: "surfacePressureMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMin.p, fieldName: "surfacePressureMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.surfacePressureMean.p, fieldName: "surfacePressureMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMax.p, fieldName: "capeMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMin.p, fieldName: "capeMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.capeMean.p, fieldName: "capeMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMax.p, fieldName: "cloudcoverMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMin.p, fieldName: "cloudcoverMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.cloudcoverMean.p, fieldName: "cloudcoverMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexMax.p, fieldName: "uvIndexMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.uvIndexClearSkyMax.p, fieldName: "uvIndexClearSkyMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_FloodDaily: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case riverDischargeMean = 4
    case riverDischargeMin = 6
    case riverDischargeMax = 8
    case riverDischargeMedian = 10
    case riverDischargeP25 = 12
    case riverDischargeP75 = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var riverDischargeMean: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.riverDischargeMean.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var riverDischargeMin: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.riverDischargeMin.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var riverDischargeMax: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.riverDischargeMax.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var riverDischargeMedian: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.riverDischargeMedian.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var riverDischargeP25: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.riverDischargeP25.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var riverDischargeP75: com_openmeteo_api_result_ValuesAndUnit? { let o = _accessor.offset(VTOFFSET.riverDischargeP75.v); return o == 0 ? nil : com_openmeteo_api_result_ValuesAndUnit(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public static func startFloodDaily(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(riverDischargeMean: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: riverDischargeMean, at: VTOFFSET.riverDischargeMean.p) }
  public static func add(riverDischargeMin: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: riverDischargeMin, at: VTOFFSET.riverDischargeMin.p) }
  public static func add(riverDischargeMax: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: riverDischargeMax, at: VTOFFSET.riverDischargeMax.p) }
  public static func add(riverDischargeMedian: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: riverDischargeMedian, at: VTOFFSET.riverDischargeMedian.p) }
  public static func add(riverDischargeP25: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: riverDischargeP25, at: VTOFFSET.riverDischargeP25.p) }
  public static func add(riverDischargeP75: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: riverDischargeP75, at: VTOFFSET.riverDischargeP75.p) }
  public static func endFloodDaily(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createFloodDaily(
    _ fbb: inout FlatBufferBuilder,
    riverDischargeMeanOffset riverDischargeMean: Offset = Offset(),
    riverDischargeMinOffset riverDischargeMin: Offset = Offset(),
    riverDischargeMaxOffset riverDischargeMax: Offset = Offset(),
    riverDischargeMedianOffset riverDischargeMedian: Offset = Offset(),
    riverDischargeP25Offset riverDischargeP25: Offset = Offset(),
    riverDischargeP75Offset riverDischargeP75: Offset = Offset()
  ) -> Offset {
    let __start = com_openmeteo_api_result_FloodDaily.startFloodDaily(&fbb)
    com_openmeteo_api_result_FloodDaily.add(riverDischargeMean: riverDischargeMean, &fbb)
    com_openmeteo_api_result_FloodDaily.add(riverDischargeMin: riverDischargeMin, &fbb)
    com_openmeteo_api_result_FloodDaily.add(riverDischargeMax: riverDischargeMax, &fbb)
    com_openmeteo_api_result_FloodDaily.add(riverDischargeMedian: riverDischargeMedian, &fbb)
    com_openmeteo_api_result_FloodDaily.add(riverDischargeP25: riverDischargeP25, &fbb)
    com_openmeteo_api_result_FloodDaily.add(riverDischargeP75: riverDischargeP75, &fbb)
    return com_openmeteo_api_result_FloodDaily.endFloodDaily(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.riverDischargeMean.p, fieldName: "riverDischargeMean", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.riverDischargeMin.p, fieldName: "riverDischargeMin", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.riverDischargeMax.p, fieldName: "riverDischargeMax", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.riverDischargeMedian.p, fieldName: "riverDischargeMedian", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.riverDischargeP25.p, fieldName: "riverDischargeP25", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    try _v.visit(field: VTOFFSET.riverDischargeP75.p, fieldName: "riverDischargeP75", required: false, type: ForwardOffset<com_openmeteo_api_result_ValuesAndUnit>.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_FloodApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public static func startFloodApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func endFloodApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createFloodApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0
  ) -> Offset {
    let __start = com_openmeteo_api_result_FloodApi.startFloodApi(&fbb)
    com_openmeteo_api_result_FloodApi.add(latitude: latitude, &fbb)
    com_openmeteo_api_result_FloodApi.add(longitude: longitude, &fbb)
    com_openmeteo_api_result_FloodApi.add(elevation: elevation, &fbb)
    return com_openmeteo_api_result_FloodApi.endFloodApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_EnsembleApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public static func startEnsembleApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func endEnsembleApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createEnsembleApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0
  ) -> Offset {
    let __start = com_openmeteo_api_result_EnsembleApi.startEnsembleApi(&fbb)
    com_openmeteo_api_result_EnsembleApi.add(latitude: latitude, &fbb)
    return com_openmeteo_api_result_EnsembleApi.endEnsembleApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_WeatherApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case ensembleMember = 12
    case generationtimeMs = 14
    case utcOffsetSeconds = 16
    case timezone = 18
    case timezoneAbbreviation = 20
    case currentWeather = 22
    case timeStart = 24
    case daily = 26
    case hourly = 28
    case sixHourly = 30
    case minutely15 = 32
    case current = 34
    case currentTime = 36
    case currentIntervalSeconds = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: String? { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var modelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.model.v) }
  public var ensembleMember: Int8 { let o = _accessor.offset(VTOFFSET.ensembleMember.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int8.self, at: o) }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var currentWeather: com_openmeteo_api_result_CurrentWeather? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_api_result_CurrentWeather.self, at: o) }
  public var mutableCurrentWeather: com_openmeteo_api_result_CurrentWeather_Mutable? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : com_openmeteo_api_result_CurrentWeather_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var timeStart: Int64 { let o = _accessor.offset(VTOFFSET.timeStart.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var hasDaily: Bool { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? false : true }
  public var dailyCount: Int32 { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func daily(at index: Int32) -> com_openmeteo_api_result_Variable? { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? nil : com_openmeteo_api_result_Variable(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hourly: com_openmeteo_api_result_WeatherHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_api_result_WeatherHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hasSixHourly: Bool { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? false : true }
  public var sixHourlyCount: Int32 { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sixHourly(at index: Int32) -> com_openmeteo_api_result_Variable? { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? nil : com_openmeteo_api_result_Variable(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasMinutely15: Bool { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? false : true }
  public var minutely15Count: Int32 { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func minutely15(at index: Int32) -> com_openmeteo_api_result_Variable? { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? nil : com_openmeteo_api_result_Variable(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasCurrent: Bool { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? false : true }
  public var currentCount: Int32 { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func current(at index: Int32) -> com_openmeteo_api_result_VariableSingle? { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? nil : com_openmeteo_api_result_VariableSingle(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var currentTime: Int64 { let o = _accessor.offset(VTOFFSET.currentTime.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var currentIntervalSeconds: Int32 { let o = _accessor.offset(VTOFFSET.currentIntervalSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startWeatherApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: model, at: VTOFFSET.model.p) }
  public static func add(ensembleMember: Int8, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ensembleMember, def: 0, at: VTOFFSET.ensembleMember.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(currentWeather: com_openmeteo_api_result_CurrentWeather?, _ fbb: inout FlatBufferBuilder) { guard let currentWeather = currentWeather else { return }; fbb.create(struct: currentWeather, position: VTOFFSET.currentWeather.p) }
  public static func add(timeStart: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timeStart, def: 0, at: VTOFFSET.timeStart.p) }
  public static func addVectorOf(daily: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: daily, at: VTOFFSET.daily.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func addVectorOf(sixHourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sixHourly, at: VTOFFSET.sixHourly.p) }
  public static func addVectorOf(minutely15: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: minutely15, at: VTOFFSET.minutely15.p) }
  public static func addVectorOf(current: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: current, at: VTOFFSET.current.p) }
  public static func add(currentTime: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentTime, def: 0, at: VTOFFSET.currentTime.p) }
  public static func add(currentIntervalSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentIntervalSeconds, def: 0, at: VTOFFSET.currentIntervalSeconds.p) }
  public static func endWeatherApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createWeatherApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    modelOffset model: Offset = Offset(),
    ensembleMember: Int8 = 0,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    currentWeather: com_openmeteo_api_result_CurrentWeather? = nil,
    timeStart: Int64 = 0,
    dailyVectorOffset daily: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset(),
    sixHourlyVectorOffset sixHourly: Offset = Offset(),
    minutely15VectorOffset minutely15: Offset = Offset(),
    currentVectorOffset current: Offset = Offset(),
    currentTime: Int64 = 0,
    currentIntervalSeconds: Int32 = 0
  ) -> Offset {
    let __start = com_openmeteo_api_result_WeatherApi.startWeatherApi(&fbb)
    com_openmeteo_api_result_WeatherApi.add(latitude: latitude, &fbb)
    com_openmeteo_api_result_WeatherApi.add(longitude: longitude, &fbb)
    com_openmeteo_api_result_WeatherApi.add(elevation: elevation, &fbb)
    com_openmeteo_api_result_WeatherApi.add(model: model, &fbb)
    com_openmeteo_api_result_WeatherApi.add(ensembleMember: ensembleMember, &fbb)
    com_openmeteo_api_result_WeatherApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_api_result_WeatherApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_api_result_WeatherApi.add(timezone: timezone, &fbb)
    com_openmeteo_api_result_WeatherApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_api_result_WeatherApi.add(currentWeather: currentWeather, &fbb)
    com_openmeteo_api_result_WeatherApi.add(timeStart: timeStart, &fbb)
    com_openmeteo_api_result_WeatherApi.addVectorOf(daily: daily, &fbb)
    com_openmeteo_api_result_WeatherApi.add(hourly: hourly, &fbb)
    com_openmeteo_api_result_WeatherApi.addVectorOf(sixHourly: sixHourly, &fbb)
    com_openmeteo_api_result_WeatherApi.addVectorOf(minutely15: minutely15, &fbb)
    com_openmeteo_api_result_WeatherApi.addVectorOf(current: current, &fbb)
    com_openmeteo_api_result_WeatherApi.add(currentTime: currentTime, &fbb)
    com_openmeteo_api_result_WeatherApi.add(currentIntervalSeconds: currentIntervalSeconds, &fbb)
    return com_openmeteo_api_result_WeatherApi.endWeatherApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ensembleMember.p, fieldName: "ensembleMember", required: false, type: Int8.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentWeather.p, fieldName: "currentWeather", required: false, type: com_openmeteo_api_result_CurrentWeather.self)
    try _v.visit(field: VTOFFSET.timeStart.p, fieldName: "timeStart", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.daily.p, fieldName: "daily", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_Variable>, com_openmeteo_api_result_Variable>>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_api_result_WeatherHourly>.self)
    try _v.visit(field: VTOFFSET.sixHourly.p, fieldName: "sixHourly", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_Variable>, com_openmeteo_api_result_Variable>>.self)
    try _v.visit(field: VTOFFSET.minutely15.p, fieldName: "minutely15", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_Variable>, com_openmeteo_api_result_Variable>>.self)
    try _v.visit(field: VTOFFSET.current.p, fieldName: "current", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_VariableSingle>, com_openmeteo_api_result_VariableSingle>>.self)
    try _v.visit(field: VTOFFSET.currentTime.p, fieldName: "currentTime", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.currentIntervalSeconds.p, fieldName: "currentIntervalSeconds", required: false, type: Int32.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_MarineApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case ensembleMember = 12
    case generationtimeMs = 14
    case utcOffsetSeconds = 16
    case timezone = 18
    case timezoneAbbreviation = 20
    case currentWeather = 22
    case timeStart = 24
    case daily = 26
    case hourly = 28
    case sixHourly = 30
    case minutely15 = 32
    case current = 34
    case currentTime = 36
    case currentIntervalSeconds = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: String? { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var modelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.model.v) }
  public var ensembleMember: Int8 { let o = _accessor.offset(VTOFFSET.ensembleMember.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int8.self, at: o) }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var currentWeather: com_openmeteo_api_result_CurrentWeather? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_api_result_CurrentWeather.self, at: o) }
  public var mutableCurrentWeather: com_openmeteo_api_result_CurrentWeather_Mutable? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : com_openmeteo_api_result_CurrentWeather_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var timeStart: Int64 { let o = _accessor.offset(VTOFFSET.timeStart.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var hasDaily: Bool { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? false : true }
  public var dailyCount: Int32 { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func daily(at index: Int32) -> com_openmeteo_api_result_Variable? { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? nil : com_openmeteo_api_result_Variable(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hourly: com_openmeteo_api_result_MarineHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_api_result_MarineHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hasSixHourly: Bool { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? false : true }
  public var sixHourlyCount: Int32 { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sixHourly(at index: Int32) -> com_openmeteo_api_result_Variable? { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? nil : com_openmeteo_api_result_Variable(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasMinutely15: Bool { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? false : true }
  public var minutely15Count: Int32 { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func minutely15(at index: Int32) -> com_openmeteo_api_result_Variable? { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? nil : com_openmeteo_api_result_Variable(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasCurrent: Bool { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? false : true }
  public var currentCount: Int32 { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func current(at index: Int32) -> com_openmeteo_api_result_VariableSingle? { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? nil : com_openmeteo_api_result_VariableSingle(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var currentTime: Int64 { let o = _accessor.offset(VTOFFSET.currentTime.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var currentIntervalSeconds: Int32 { let o = _accessor.offset(VTOFFSET.currentIntervalSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startMarineApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: model, at: VTOFFSET.model.p) }
  public static func add(ensembleMember: Int8, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ensembleMember, def: 0, at: VTOFFSET.ensembleMember.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(currentWeather: com_openmeteo_api_result_CurrentWeather?, _ fbb: inout FlatBufferBuilder) { guard let currentWeather = currentWeather else { return }; fbb.create(struct: currentWeather, position: VTOFFSET.currentWeather.p) }
  public static func add(timeStart: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timeStart, def: 0, at: VTOFFSET.timeStart.p) }
  public static func addVectorOf(daily: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: daily, at: VTOFFSET.daily.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func addVectorOf(sixHourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sixHourly, at: VTOFFSET.sixHourly.p) }
  public static func addVectorOf(minutely15: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: minutely15, at: VTOFFSET.minutely15.p) }
  public static func addVectorOf(current: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: current, at: VTOFFSET.current.p) }
  public static func add(currentTime: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentTime, def: 0, at: VTOFFSET.currentTime.p) }
  public static func add(currentIntervalSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentIntervalSeconds, def: 0, at: VTOFFSET.currentIntervalSeconds.p) }
  public static func endMarineApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarineApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    modelOffset model: Offset = Offset(),
    ensembleMember: Int8 = 0,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    currentWeather: com_openmeteo_api_result_CurrentWeather? = nil,
    timeStart: Int64 = 0,
    dailyVectorOffset daily: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset(),
    sixHourlyVectorOffset sixHourly: Offset = Offset(),
    minutely15VectorOffset minutely15: Offset = Offset(),
    currentVectorOffset current: Offset = Offset(),
    currentTime: Int64 = 0,
    currentIntervalSeconds: Int32 = 0
  ) -> Offset {
    let __start = com_openmeteo_api_result_MarineApi.startMarineApi(&fbb)
    com_openmeteo_api_result_MarineApi.add(latitude: latitude, &fbb)
    com_openmeteo_api_result_MarineApi.add(longitude: longitude, &fbb)
    com_openmeteo_api_result_MarineApi.add(elevation: elevation, &fbb)
    com_openmeteo_api_result_MarineApi.add(model: model, &fbb)
    com_openmeteo_api_result_MarineApi.add(ensembleMember: ensembleMember, &fbb)
    com_openmeteo_api_result_MarineApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_api_result_MarineApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_api_result_MarineApi.add(timezone: timezone, &fbb)
    com_openmeteo_api_result_MarineApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_api_result_MarineApi.add(currentWeather: currentWeather, &fbb)
    com_openmeteo_api_result_MarineApi.add(timeStart: timeStart, &fbb)
    com_openmeteo_api_result_MarineApi.addVectorOf(daily: daily, &fbb)
    com_openmeteo_api_result_MarineApi.add(hourly: hourly, &fbb)
    com_openmeteo_api_result_MarineApi.addVectorOf(sixHourly: sixHourly, &fbb)
    com_openmeteo_api_result_MarineApi.addVectorOf(minutely15: minutely15, &fbb)
    com_openmeteo_api_result_MarineApi.addVectorOf(current: current, &fbb)
    com_openmeteo_api_result_MarineApi.add(currentTime: currentTime, &fbb)
    com_openmeteo_api_result_MarineApi.add(currentIntervalSeconds: currentIntervalSeconds, &fbb)
    return com_openmeteo_api_result_MarineApi.endMarineApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ensembleMember.p, fieldName: "ensembleMember", required: false, type: Int8.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentWeather.p, fieldName: "currentWeather", required: false, type: com_openmeteo_api_result_CurrentWeather.self)
    try _v.visit(field: VTOFFSET.timeStart.p, fieldName: "timeStart", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.daily.p, fieldName: "daily", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_Variable>, com_openmeteo_api_result_Variable>>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_api_result_MarineHourly>.self)
    try _v.visit(field: VTOFFSET.sixHourly.p, fieldName: "sixHourly", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_Variable>, com_openmeteo_api_result_Variable>>.self)
    try _v.visit(field: VTOFFSET.minutely15.p, fieldName: "minutely15", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_Variable>, com_openmeteo_api_result_Variable>>.self)
    try _v.visit(field: VTOFFSET.current.p, fieldName: "current", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_VariableSingle>, com_openmeteo_api_result_VariableSingle>>.self)
    try _v.visit(field: VTOFFSET.currentTime.p, fieldName: "currentTime", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.currentIntervalSeconds.p, fieldName: "currentIntervalSeconds", required: false, type: Int32.self)
    _v.finish()
  }
}

public struct com_openmeteo_api_result_AirQualityApi: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_23_5_26() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case latitude = 4
    case longitude = 6
    case elevation = 8
    case model = 10
    case ensembleMember = 12
    case generationtimeMs = 14
    case utcOffsetSeconds = 16
    case timezone = 18
    case timezoneAbbreviation = 20
    case currentWeather = 22
    case timeStart = 24
    case daily = 26
    case hourly = 28
    case sixHourly = 30
    case minutely15 = 32
    case current = 34
    case currentTime = 36
    case currentIntervalSeconds = 38
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var latitude: Float32 { let o = _accessor.offset(VTOFFSET.latitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var longitude: Float32 { let o = _accessor.offset(VTOFFSET.longitude.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var elevation: Float32 { let o = _accessor.offset(VTOFFSET.elevation.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var model: String? { let o = _accessor.offset(VTOFFSET.model.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var modelSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.model.v) }
  public var ensembleMember: Int8 { let o = _accessor.offset(VTOFFSET.ensembleMember.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int8.self, at: o) }
  public var generationtimeMs: Float32 { let o = _accessor.offset(VTOFFSET.generationtimeMs.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Float32.self, at: o) }
  public var utcOffsetSeconds: Int32 { let o = _accessor.offset(VTOFFSET.utcOffsetSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var timezone: String? { let o = _accessor.offset(VTOFFSET.timezone.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezone.v) }
  public var timezoneAbbreviation: String? { let o = _accessor.offset(VTOFFSET.timezoneAbbreviation.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var timezoneAbbreviationSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.timezoneAbbreviation.v) }
  public var currentWeather: com_openmeteo_api_result_CurrentWeather? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : _accessor.readBuffer(of: com_openmeteo_api_result_CurrentWeather.self, at: o) }
  public var mutableCurrentWeather: com_openmeteo_api_result_CurrentWeather_Mutable? { let o = _accessor.offset(VTOFFSET.currentWeather.v); return o == 0 ? nil : com_openmeteo_api_result_CurrentWeather_Mutable(_accessor.bb, o: o + _accessor.postion) }
  public var timeStart: Int64 { let o = _accessor.offset(VTOFFSET.timeStart.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var hasDaily: Bool { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? false : true }
  public var dailyCount: Int32 { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func daily(at index: Int32) -> com_openmeteo_api_result_Variable? { let o = _accessor.offset(VTOFFSET.daily.v); return o == 0 ? nil : com_openmeteo_api_result_Variable(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hourly: com_openmeteo_api_result_AirQualityHourly? { let o = _accessor.offset(VTOFFSET.hourly.v); return o == 0 ? nil : com_openmeteo_api_result_AirQualityHourly(_accessor.bb, o: _accessor.indirect(o + _accessor.postion)) }
  public var hasSixHourly: Bool { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? false : true }
  public var sixHourlyCount: Int32 { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func sixHourly(at index: Int32) -> com_openmeteo_api_result_Variable? { let o = _accessor.offset(VTOFFSET.sixHourly.v); return o == 0 ? nil : com_openmeteo_api_result_Variable(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasMinutely15: Bool { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? false : true }
  public var minutely15Count: Int32 { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func minutely15(at index: Int32) -> com_openmeteo_api_result_Variable? { let o = _accessor.offset(VTOFFSET.minutely15.v); return o == 0 ? nil : com_openmeteo_api_result_Variable(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasCurrent: Bool { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? false : true }
  public var currentCount: Int32 { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func current(at index: Int32) -> com_openmeteo_api_result_VariableSingle? { let o = _accessor.offset(VTOFFSET.current.v); return o == 0 ? nil : com_openmeteo_api_result_VariableSingle(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var currentTime: Int64 { let o = _accessor.offset(VTOFFSET.currentTime.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var currentIntervalSeconds: Int32 { let o = _accessor.offset(VTOFFSET.currentIntervalSeconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startAirQualityApi(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 18) }
  public static func add(latitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: latitude, def: 0.0, at: VTOFFSET.latitude.p) }
  public static func add(longitude: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: longitude, def: 0.0, at: VTOFFSET.longitude.p) }
  public static func add(elevation: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: elevation, def: 0.0, at: VTOFFSET.elevation.p) }
  public static func add(model: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: model, at: VTOFFSET.model.p) }
  public static func add(ensembleMember: Int8, _ fbb: inout FlatBufferBuilder) { fbb.add(element: ensembleMember, def: 0, at: VTOFFSET.ensembleMember.p) }
  public static func add(generationtimeMs: Float32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: generationtimeMs, def: 0.0, at: VTOFFSET.generationtimeMs.p) }
  public static func add(utcOffsetSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: utcOffsetSeconds, def: 0, at: VTOFFSET.utcOffsetSeconds.p) }
  public static func add(timezone: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezone, at: VTOFFSET.timezone.p) }
  public static func add(timezoneAbbreviation: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timezoneAbbreviation, at: VTOFFSET.timezoneAbbreviation.p) }
  public static func add(currentWeather: com_openmeteo_api_result_CurrentWeather?, _ fbb: inout FlatBufferBuilder) { guard let currentWeather = currentWeather else { return }; fbb.create(struct: currentWeather, position: VTOFFSET.currentWeather.p) }
  public static func add(timeStart: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: timeStart, def: 0, at: VTOFFSET.timeStart.p) }
  public static func addVectorOf(daily: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: daily, at: VTOFFSET.daily.p) }
  public static func add(hourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: hourly, at: VTOFFSET.hourly.p) }
  public static func addVectorOf(sixHourly: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sixHourly, at: VTOFFSET.sixHourly.p) }
  public static func addVectorOf(minutely15: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: minutely15, at: VTOFFSET.minutely15.p) }
  public static func addVectorOf(current: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: current, at: VTOFFSET.current.p) }
  public static func add(currentTime: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentTime, def: 0, at: VTOFFSET.currentTime.p) }
  public static func add(currentIntervalSeconds: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: currentIntervalSeconds, def: 0, at: VTOFFSET.currentIntervalSeconds.p) }
  public static func endAirQualityApi(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAirQualityApi(
    _ fbb: inout FlatBufferBuilder,
    latitude: Float32 = 0.0,
    longitude: Float32 = 0.0,
    elevation: Float32 = 0.0,
    modelOffset model: Offset = Offset(),
    ensembleMember: Int8 = 0,
    generationtimeMs: Float32 = 0.0,
    utcOffsetSeconds: Int32 = 0,
    timezoneOffset timezone: Offset = Offset(),
    timezoneAbbreviationOffset timezoneAbbreviation: Offset = Offset(),
    currentWeather: com_openmeteo_api_result_CurrentWeather? = nil,
    timeStart: Int64 = 0,
    dailyVectorOffset daily: Offset = Offset(),
    hourlyOffset hourly: Offset = Offset(),
    sixHourlyVectorOffset sixHourly: Offset = Offset(),
    minutely15VectorOffset minutely15: Offset = Offset(),
    currentVectorOffset current: Offset = Offset(),
    currentTime: Int64 = 0,
    currentIntervalSeconds: Int32 = 0
  ) -> Offset {
    let __start = com_openmeteo_api_result_AirQualityApi.startAirQualityApi(&fbb)
    com_openmeteo_api_result_AirQualityApi.add(latitude: latitude, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(longitude: longitude, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(elevation: elevation, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(model: model, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(ensembleMember: ensembleMember, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(generationtimeMs: generationtimeMs, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(utcOffsetSeconds: utcOffsetSeconds, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(timezone: timezone, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(timezoneAbbreviation: timezoneAbbreviation, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(currentWeather: currentWeather, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(timeStart: timeStart, &fbb)
    com_openmeteo_api_result_AirQualityApi.addVectorOf(daily: daily, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(hourly: hourly, &fbb)
    com_openmeteo_api_result_AirQualityApi.addVectorOf(sixHourly: sixHourly, &fbb)
    com_openmeteo_api_result_AirQualityApi.addVectorOf(minutely15: minutely15, &fbb)
    com_openmeteo_api_result_AirQualityApi.addVectorOf(current: current, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(currentTime: currentTime, &fbb)
    com_openmeteo_api_result_AirQualityApi.add(currentIntervalSeconds: currentIntervalSeconds, &fbb)
    return com_openmeteo_api_result_AirQualityApi.endAirQualityApi(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.latitude.p, fieldName: "latitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.longitude.p, fieldName: "longitude", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.elevation.p, fieldName: "elevation", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.model.p, fieldName: "model", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.ensembleMember.p, fieldName: "ensembleMember", required: false, type: Int8.self)
    try _v.visit(field: VTOFFSET.generationtimeMs.p, fieldName: "generationtimeMs", required: false, type: Float32.self)
    try _v.visit(field: VTOFFSET.utcOffsetSeconds.p, fieldName: "utcOffsetSeconds", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.timezone.p, fieldName: "timezone", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timezoneAbbreviation.p, fieldName: "timezoneAbbreviation", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.currentWeather.p, fieldName: "currentWeather", required: false, type: com_openmeteo_api_result_CurrentWeather.self)
    try _v.visit(field: VTOFFSET.timeStart.p, fieldName: "timeStart", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.daily.p, fieldName: "daily", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_Variable>, com_openmeteo_api_result_Variable>>.self)
    try _v.visit(field: VTOFFSET.hourly.p, fieldName: "hourly", required: false, type: ForwardOffset<com_openmeteo_api_result_AirQualityHourly>.self)
    try _v.visit(field: VTOFFSET.sixHourly.p, fieldName: "sixHourly", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_Variable>, com_openmeteo_api_result_Variable>>.self)
    try _v.visit(field: VTOFFSET.minutely15.p, fieldName: "minutely15", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_Variable>, com_openmeteo_api_result_Variable>>.self)
    try _v.visit(field: VTOFFSET.current.p, fieldName: "current", required: false, type: ForwardOffset<Vector<ForwardOffset<com_openmeteo_api_result_VariableSingle>, com_openmeteo_api_result_VariableSingle>>.self)
    try _v.visit(field: VTOFFSET.currentTime.p, fieldName: "currentTime", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.currentIntervalSeconds.p, fieldName: "currentIntervalSeconds", required: false, type: Int32.self)
    _v.finish()
  }
}

